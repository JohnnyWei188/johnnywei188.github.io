{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/images/avatar.jpeg","path":"images/avatar.jpeg","modified":0,"renderable":0},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scroll-cookie.js","path":"js/src/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","path":"lib/canvas-ribbon/canvas-ribbon.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/js.cookie.js","path":"js/src/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","path":"lib/needsharebutton/needsharebutton.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","path":"lib/needsharebutton/needsharebutton.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","path":"lib/pace/pace-theme-barber-shop.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","path":"lib/needsharebutton/font-embedded.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","path":"lib/pace/pace-theme-bounce.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","path":"lib/pace/pace-theme-big-counter.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","path":"lib/pace/pace-theme-center-atom.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","path":"lib/pace/pace-theme-center-circle.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","path":"lib/pace/pace-theme-center-radar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","path":"lib/pace/pace-theme-center-simple.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","path":"lib/pace/pace-theme-corner-indicator.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","path":"lib/pace/pace-theme-fill-left.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","path":"lib/pace/pace-theme-flash.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","path":"lib/pace/pace-theme-loading-bar.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","path":"lib/pace/pace-theme-minimal.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","path":"lib/pace/pace-theme-mac-osx.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/pace/pace.min.js","path":"lib/pace/pace.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","path":"lib/three/canvas_sphere.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three-waves.min.js","path":"lib/three/three-waves.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","path":"lib/three/canvas_lines.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.css","path":"lib/Han/dist/han.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.css","path":"lib/Han/dist/han.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.min.js","path":"lib/Han/dist/han.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/han.js","path":"lib/Han/dist/han.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","path":"lib/Han/dist/font/han-space.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","path":"lib/Han/dist/font/han-space.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","path":"lib/Han/dist/font/han.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","path":"lib/Han/dist/font/han.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","path":"lib/Han/dist/font/han.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/three/three.min.js","path":"lib/three/three.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1521028711715},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1521028711716},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1521028711716},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1521028711720},{"_id":"themes/next/.javascript_ignore","hash":"8a224b381155f10e6eb132a4d815c5b52962a9d1","modified":1521028711720},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1521028711721},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1521028711721},{"_id":"themes/next/.travis.yml","hash":"d60d4a5375fea23d53b2156b764a99b2e56fa660","modified":1521028711721},{"_id":"source/CNAME","hash":"36eb186de98ea323d5070479820867022539d871","modified":1532434121925},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1521028711722},{"_id":"themes/next/README.cn.md","hash":"5d8af3d8de8d3926126a738519e97c8442b0effe","modified":1521028711722},{"_id":"themes/next/bower.json","hash":"0674f11d3d514e087a176da0e1d85c2286aa5fba","modified":1521028711724},{"_id":"themes/next/gulpfile.coffee","hash":"031bffc483e417b20e90eceb6cf358e7596d2e69","modified":1521028711724},{"_id":"themes/next/README.md","hash":"44b28d995681a7c48bfe3d0577d6203812d07e59","modified":1521028711723},{"_id":"themes/next/_config.yml","hash":"4fb272a056c82db9e2e38c820878baddd486e69f","modified":1521162728146},{"_id":"themes/next/package.json","hash":"036d3a1346203d2f1a3958024df7f74e7ac07bfe","modified":1521028711783},{"_id":"source/_posts/.elasticsearch-1.md.swp","hash":"0cb2ebe32f803b93f2ea78b140609f4007088e5b","modified":1564647956838},{"_id":"source/_posts/elasticsearch-1.md","hash":"47ff2a47a02dd38978934bb88d2a535e9c68bf16","modified":1564648614198},{"_id":"source/categories/index.md","hash":"1cb6f170c29d8475d26c7fe33fdbdfef4ec9e291","modified":1489249563000},{"_id":"source/_posts/.DS_Store","hash":"df2fbeb1400acda0909a32c1cf6bf492f1121e07","modified":1489295644000},{"_id":"source/_posts/docker-compose-lnmp.md","hash":"0f8ae15d205216807692bc52f242b15f4c629794","modified":1564648881036},{"_id":"source/_posts/fannel.md","hash":"bce23bdc9ea5d5edbe071bb556ebb7071babbb0e","modified":1564649056744},{"_id":"source/_posts/etcd.md","hash":"c103611119c0d3affca3fb4c850ea7ab973c7abd","modified":1564648885716},{"_id":"source/_posts/go-goroutine.md","hash":"78c61945dc8e4aa88e8f2971a78ca9e8166df103","modified":1564648926077},{"_id":"source/_posts/go-pprof.md","hash":"6fd4feb9c9da0dcc171e2b739eb83ac91469def5","modified":1564641815120},{"_id":"source/_posts/nginx-cros.md","hash":"94540acf2e65049b578bd460f552adcb224f09f4","modified":1547519132661},{"_id":"source/_posts/hello-world.md","hash":"8a02477044e2b77f1b262da2c48c01429e4a32e4","modified":1520993512268},{"_id":"source/_posts/hexo-travis-ci.md","hash":"88daab508fb1e9fc26a370f880ea1ada004f2ecf","modified":1489299969000},{"_id":"source/_posts/openssl.md","hash":"4bd9a1852447702600517ebefae55b1b3d646678","modified":1564649006719},{"_id":"source/_posts/go-context.md","hash":"0adf1b1b21af2bb59516bda564fb855737a80aa7","modified":1564648966159},{"_id":"source/_posts/raft.md","hash":"fd87c4ddb0b53fc0ddf9d4648a59e8eef0cd0689","modified":1534294334368},{"_id":"source/images/avatar.jpeg","hash":"3016bbe211851b92da7ea979e638b70872b82a42","modified":1481640862000},{"_id":"source/_posts/soa-consul-envoy.md","hash":"c799304372bf0c498145b8bdf8c41af5a7bc4968","modified":1534298658619},{"_id":"source/tags/index.md","hash":"fc2d49543652d442d51773615d593f1f77d97266","modified":1489249461000},{"_id":"source/_posts/nsq.md","hash":"300a2ac7afaf2772745e9c5f1952843531335c0c","modified":1541218412521},{"_id":"themes/next/languages/default.yml","hash":"44ef3f26917f467459326c2c8be2f73e4d947f35","modified":1521028711725},{"_id":"themes/next/languages/en.yml","hash":"7e680d9bb8f3a3a9d1ba1c9d312b3d257183dded","modified":1521028711726},{"_id":"themes/next/languages/fr-FR.yml","hash":"7e4eb7011b8feee641cfb11c6e73180b0ded1c0f","modified":1521028711726},{"_id":"themes/next/languages/de.yml","hash":"057e7df11ddeb1c8c15a5d7c5ff29430d725ec6b","modified":1521028711725},{"_id":"themes/next/languages/it.yml","hash":"aa595f2bda029f73ef7bfa104b4c55c3f4e9fb4c","modified":1521028711727},{"_id":"themes/next/languages/ko.yml","hash":"ea5b46056e73ebcee121d5551627af35cbffc900","modified":1521028711728},{"_id":"themes/next/languages/nl-NL.yml","hash":"edca4f3598857dbc3cbf19ed412213329b6edd47","modified":1521028711728},{"_id":"themes/next/languages/pt-BR.yml","hash":"b1694ae766ed90277bcc4daca4b1cfa19cdcb72b","modified":1521028711728},{"_id":"themes/next/languages/id.yml","hash":"b5de1ea66dd9ef54cac9a1440eaa4e3f5fc011f5","modified":1521028711727},{"_id":"themes/next/languages/pt.yml","hash":"44b61f2d085b827b507909a0b8f8ce31c6ef5d04","modified":1521028711730},{"_id":"themes/next/languages/vi.yml","hash":"fd08d3c8d2c62965a98ac420fdaf95e54c25d97c","modified":1521028711731},{"_id":"themes/next/languages/ja.yml","hash":"3c76e16fd19b262864475faa6854b718bc08c4d8","modified":1521028711727},{"_id":"themes/next/languages/ru.yml","hash":"98ec6f0b7183282e11cffc7ff586ceb82400dd75","modified":1521028711730},{"_id":"themes/next/layout/_layout.swig","hash":"da0929166674ea637e0ad454f85ad0d7bac4aff2","modified":1521028711734},{"_id":"themes/next/languages/zh-Hans.yml","hash":"d998a128348bb954bf148c7e22c9c60db4d82c8c","modified":1564648852804},{"_id":"themes/next/languages/zh-hk.yml","hash":"9396f41ae76e4fef99b257c93c7354e661f6e0fa","modified":1521028711732},{"_id":"themes/next/languages/zh-tw.yml","hash":"50b71abb3ecc0686f9739e179e2f829cd074ecd9","modified":1521028711733},{"_id":"themes/next/layout/page.swig","hash":"969caaee05bdea725e99016eb63d810893a73e99","modified":1521028711782},{"_id":"themes/next/layout/schedule.swig","hash":"d86f8de4e118f8c4d778b285c140474084a271db","modified":1521028711783},{"_id":"themes/next/layout/category.swig","hash":"4472255f4a3e3dd6d79201523a9526dcabdfbf18","modified":1521028711780},{"_id":"themes/next/layout/archive.swig","hash":"f0a8225feafd971419837cdb4bcfec98a4a59b2f","modified":1521028711777},{"_id":"themes/next/scripts/merge-configs.js","hash":"81e86717ecfb775986b945d17f0a4ba27532ef07","modified":1521028711784},{"_id":"themes/next/layout/post.swig","hash":"b3589a8e46288a10d20e41c7a5985d2493725aec","modified":1521028711782},{"_id":"themes/next/layout/index.swig","hash":"783611349c941848a0e26ee2f1dc44dd14879bd1","modified":1521028711780},{"_id":"themes/next/layout/tag.swig","hash":"7e0a7d7d832883eddb1297483ad22c184e4368de","modified":1521028711783},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1521028711785},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1521028711923},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1521028711924},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1521028711924},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521028711839},{"_id":"source/_posts/go-pprof/cpu.png","hash":"72d8a86c7d0630bd7756e5e7ad771c232e91932a","modified":1532565257053},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1521028711733},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1521028711734},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"31322a7f57936cf2dc62e824af5490da5354cf02","modified":1521028711735},{"_id":"themes/next/layout/_macro/post-copyright.swig","hash":"665a928604f99d2ba7dc4a4a9150178229568cc6","modified":1521028711735},{"_id":"themes/next/layout/_macro/post.swig","hash":"446a35a2cd389f8cfc3aa38973a9b44ad0740134","modified":1521028711735},{"_id":"themes/next/layout/_macro/reward.swig","hash":"56e8d8556cf474c56ae1bef9cb7bbd26554adb07","modified":1521028711736},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"6a54c3c85ff6b19d275827a327abbf4bd99b2ebf","modified":1521028711736},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"39852700e4084ecccffa6d4669168e5cc0514c9e","modified":1521028711736},{"_id":"themes/next/layout/_partials/comments.swig","hash":"4a6f5b1792b2e5262b7fdab9a716b3108e2f09c7","modified":1521028711737},{"_id":"themes/next/layout/_partials/footer.swig","hash":"72837472bd7e0bd2432f888d98f084b04afeea3f","modified":1521162855946},{"_id":"themes/next/layout/_partials/head.swig","hash":"6b94fe8f3279daea5623c49ef4bb35917ba57510","modified":1521028711737},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1521028711739},{"_id":"themes/next/layout/_partials/header.swig","hash":"ed042be6252848058c90109236ec988e392d91d4","modified":1521028711738},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1521028711739},{"_id":"themes/next/layout/_partials/search.swig","hash":"9dbd378e94abfcb3f864a5b8dbbf18d212ca2ee0","modified":1521028711739},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1521028711746},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1521028711746},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"a266f96ad06ee87bdeae6e105a4b53cd587bbd04","modified":1521028711748},{"_id":"themes/next/layout/_third-party/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1521028711768},{"_id":"themes/next/layout/_third-party/exturl.swig","hash":"7c04a42319d728be356746363aff8ea247791d24","modified":1521028711768},{"_id":"themes/next/layout/_third-party/needsharebutton.swig","hash":"5fe0447cc88a5a63b530cf0426f93c4634811876","modified":1521028711770},{"_id":"themes/next/layout/_third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1521028711769},{"_id":"themes/next/layout/_third-party/rating.swig","hash":"fc93b1a7e6aed0dddb1f3910142b48d8ab61174e","modified":1521028711770},{"_id":"themes/next/layout/_third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1521028711771},{"_id":"themes/next/layout/_third-party/scroll-cookie.swig","hash":"1ddb2336a1a19b47af3017047012c01ec5f54529","modified":1521028711771},{"_id":"themes/next/scripts/tags/button.js","hash":"d023f10a00077f47082b0517e2ad666e6e994f60","modified":1521028711786},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1521028711786},{"_id":"themes/next/scripts/tags/exturl.js","hash":"8d7e60f60779bde050d20fd76f6fdc36fc85e06d","modified":1521028711786},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1521028711786},{"_id":"themes/next/scripts/tags/label.js","hash":"2f8f41a7316372f0d1ed6b51190dc4acd3e16fff","modified":1521028711787},{"_id":"themes/next/scripts/tags/lazy-image.js","hash":"eeeabede68cf263de9e6593ecf682f620da16f0a","modified":1521028711788},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1521028711787},{"_id":"themes/next/scripts/tags/tabs.js","hash":"5786545d51c38e8ca38d1bfc7dd9e946fc70a316","modified":1521028711793},{"_id":"themes/next/scripts/tags/note.js","hash":"64de4e9d01cf3b491ffc7d53afdf148ee5ad9779","modified":1521028711791},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"ec119560b382b2624e00144ae01c137186e91621","modified":1521028711840},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1521028711840},{"_id":"themes/next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1521028711840},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1521028711841},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1521028711841},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1521028711842},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1521028711843},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1521028711843},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1521028711845},{"_id":"themes/next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1521028711845},{"_id":"themes/next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1521028711845},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1521028711844},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1521028711846},{"_id":"themes/next/source/images/logo.svg","hash":"d29cacbae1bdc4bbccb542107ee0524fe55ad6de","modified":1521028711846},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1521028711846},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1521028711847},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1521028711847},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1521028711847},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1521028711839},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521028711747},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521028711747},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521028711827},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521028711827},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521028711828},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521028711838},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1521028711838},{"_id":"source/_posts/go-pprof/web.svg","hash":"38aa05e256e1fc175abfbb471ac6097997d8e07d","modified":1532505626882},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1521028711738},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1521028711738},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"957701729b85fb0c5bfcf2fb99c19d54582f91ed","modified":1521028711740},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1521028711741},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1521028711744},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1521028711744},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1521028711745},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1521028711745},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"048fd5e98149469f8c28c21ba3561a7a67952c9b","modified":1521028711745},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1521028711746},{"_id":"themes/next/layout/_scripts/schemes/gemini.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1521028711747},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1521028711748},{"_id":"themes/next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"98df9d72e37dd071e882f2d5623c9d817815b139","modified":1521028711749},{"_id":"themes/next/layout/_third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1521028711749},{"_id":"themes/next/layout/_third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1521028711749},{"_id":"themes/next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"18e7bef8923d83ea42df6c97405e515a876cede4","modified":1521028711750},{"_id":"themes/next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1521028711750},{"_id":"themes/next/layout/_third-party/analytics/facebook-sdk.swig","hash":"a234c5cd1f75ca5731e814d0dbb92fdcf9240d1b","modified":1521028711750},{"_id":"themes/next/layout/_third-party/analytics/firestore.swig","hash":"1cd01c6e92ab1913d48e556a92bb4f28b6dc4996","modified":1521028711750},{"_id":"themes/next/layout/_third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1521028711751},{"_id":"themes/next/layout/_third-party/analytics/lean-analytics.swig","hash":"fc65b9c98a0a8ab43a5e7aabff6c5f03838e09c8","modified":1521028711752},{"_id":"themes/next/layout/_third-party/analytics/index.swig","hash":"5e9bb24c750b49513d9a65799e832f07410002ac","modified":1521028711751},{"_id":"themes/next/layout/_third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1521028711752},{"_id":"themes/next/layout/_third-party/analytics/tencent-mta.swig","hash":"0ddc94ed4ba0c19627765fdf1abc4d8efbe53d5a","modified":1521028711755},{"_id":"themes/next/layout/_third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1521028711757},{"_id":"themes/next/layout/_third-party/comments/changyan.swig","hash":"0e3378f7c39b2b0f69638290873ede6b6b6825c0","modified":1521028711761},{"_id":"themes/next/layout/_third-party/comments/disqus.swig","hash":"c316758546dc9ba6c60cb4d852c17ca6bb6d6724","modified":1521028711762},{"_id":"themes/next/layout/_third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1521028711763},{"_id":"themes/next/layout/_third-party/comments/gitment.swig","hash":"10160daceaa6f1ecf632323d422ebe2caae49ddf","modified":1521028711764},{"_id":"themes/next/layout/_third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1521028711765},{"_id":"themes/next/layout/_third-party/comments/index.swig","hash":"aa0629277d751c55c6d973e7691bf84af9b17a60","modified":1521028711766},{"_id":"themes/next/layout/_third-party/comments/livere.swig","hash":"8a2e393d2e49f7bf560766d8a07cd461bf3fce4f","modified":1521028711766},{"_id":"themes/next/layout/_third-party/comments/valine.swig","hash":"fcabbb241f894c9a6309c44e126cf3e8fea81fd4","modified":1521028711767},{"_id":"themes/next/layout/_third-party/comments/youyan.swig","hash":"8b6650f77fe0a824c8075b2659e0403e0c78a705","modified":1521028711767},{"_id":"themes/next/layout/_third-party/search/index.swig","hash":"c747fb5c6b1f500e8f0c583e44195878b66e4e29","modified":1521028711772},{"_id":"themes/next/layout/_third-party/search/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1521028711774},{"_id":"themes/next/layout/_third-party/search/localsearch.swig","hash":"385c066af96bee30be2459dbec8aae1f15d382f5","modified":1521028711773},{"_id":"themes/next/layout/_third-party/seo/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1521028711775},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1521028711848},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1521028711848},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1521028711849},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"034bc8113e0966fe2096ba5b56061bbf10ef0512","modified":1521028711848},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1521028711850},{"_id":"themes/next/source/js/src/motion.js","hash":"754b294394f102c8fd9423a1789ddb1201677898","modified":1521028711851},{"_id":"themes/next/source/js/src/post-details.js","hash":"a13f45f7aa8291cf7244ec5ba93907d119c5dbdd","modified":1521028711851},{"_id":"themes/next/source/js/src/scroll-cookie.js","hash":"09dc828cbf5f31158ff6250d2bf7c3cde6365c67","modified":1521028711852},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1521028711853},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1521028711860},{"_id":"themes/next/source/js/src/utils.js","hash":"9b1325801d27213083d1487a12b1a62b539ab6f8","modified":1521028711854},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1521028711866},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"cc40a9b11e52348e554c84e4a5c058056f6b7aeb","modified":1521028711867},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"2db21acfbd457452462f71cc4048a943ee61b8e0","modified":1521028711867},{"_id":"themes/next/source/lib/canvas-ribbon/canvas-ribbon.js","hash":"ff5915eb2596e890a2fc6697c864f861a1995ec0","modified":1521028711866},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1521028711877},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1521028711877},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1521028711878},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1521028711878},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1521028711880},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1521028711880},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1521028711881},{"_id":"themes/next/source/js/src/js.cookie.js","hash":"9b37973a90fd50e71ea91682265715e45ae82c75","modified":1521028711850},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1521028711881},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1521028711881},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1521028711902},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1521028711903},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1521028711903},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1521028711902},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1521028711903},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1521028711900},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1521028711904},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.css","hash":"3ef0020a1815ca6151ea4886cd0d37421ae3695c","modified":1521028711905},{"_id":"themes/next/source/lib/needsharebutton/needsharebutton.js","hash":"9885fd9bea5e7ebafc5b1de9d17be5e106248d96","modified":1521028711906},{"_id":"themes/next/source/lib/pace/pace-theme-barber-shop.min.css","hash":"ee0d51446cb4ffe1bb96bd7bc8c8e046dddfcf46","modified":1521028711906},{"_id":"themes/next/source/lib/needsharebutton/font-embedded.css","hash":"c39d37278c1e178838732af21bd26cd0baeddfe0","modified":1521028711905},{"_id":"themes/next/source/lib/pace/pace-theme-bounce.min.css","hash":"f6bdb9a785b7979dd8ec5c60e278af955ef1e585","modified":1521028711907},{"_id":"themes/next/source/lib/pace/pace-theme-big-counter.min.css","hash":"5b561dc328af4c4d512e20a76fe964d113a32ba8","modified":1521028711906},{"_id":"themes/next/source/lib/pace/pace-theme-center-atom.min.css","hash":"dcf79c24fe5350fb73d8038573a104e73639e9d3","modified":1521028711907},{"_id":"themes/next/source/lib/pace/pace-theme-center-circle.min.css","hash":"a4066769c78affbfbc5e30a600e2c7862cd532e0","modified":1521028711908},{"_id":"themes/next/source/lib/pace/pace-theme-center-radar.min.css","hash":"ab7cba998bf4c03b13df342bf43647fa4f419783","modified":1521028711908},{"_id":"themes/next/source/lib/pace/pace-theme-center-simple.min.css","hash":"67f44c947548bd4d77e7590d3f59e236cbf9e98a","modified":1521028711908},{"_id":"themes/next/source/lib/pace/pace-theme-corner-indicator.min.css","hash":"b3c64c973f31884e3d8145989476707333406b9a","modified":1521028711909},{"_id":"themes/next/source/lib/pace/pace-theme-fill-left.min.css","hash":"0bec1e235a4a2cccda3f993b205424e1441a44ae","modified":1521028711909},{"_id":"themes/next/source/lib/pace/pace-theme-flash.min.css","hash":"13ace22c40312d7bbd8d9c1e50eff897a7a497d8","modified":1521028711910},{"_id":"themes/next/source/lib/pace/pace-theme-loading-bar.min.css","hash":"7ee28875dfc1230d76c537f6605766e8d4011e9f","modified":1521028711910},{"_id":"themes/next/source/lib/pace/pace-theme-minimal.min.css","hash":"9cd783cceb8a191f3c8b5d81f7a430ecc3e489d3","modified":1521028711911},{"_id":"themes/next/source/lib/pace/pace-theme-mac-osx.min.css","hash":"9f2e7b51b084da407863826b25265b31150b3821","modified":1521028711910},{"_id":"themes/next/source/lib/pace/pace.min.js","hash":"9944dfb7814b911090e96446cea4d36e2b487234","modified":1521028711911},{"_id":"themes/next/source/lib/three/canvas_sphere.min.js","hash":"d8ea241a53c135a650f7335d2b6982b899fd58a9","modified":1521028711912},{"_id":"themes/next/source/lib/three/three-waves.min.js","hash":"d968cba6b3a50b3626a02d67b544f349d83b147c","modified":1521028711913},{"_id":"themes/next/source/lib/three/canvas_lines.min.js","hash":"dce4a3b65f8bf958f973690caa7ec4952f353b0c","modified":1521028711912},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1521028711919},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1521028711919},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1521028711922},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1521028711923},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1521028711923},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1521028711827},{"_id":"themes/next/source/css/_mixins/Gemini.styl","hash":"2aa5b7166a85a8aa34b17792ae4f58a5a96df6cc","modified":1521028711827},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"9ab65361ba0a12a986edd103e56492644c2db0b8","modified":1521028711828},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"82f9055955920ed88a2ab6a20ab02169abb2c634","modified":1521028711828},{"_id":"themes/next/source/css/_variables/Gemini.styl","hash":"99fbb4686ea9a3e03a4726ed7cf4d8f529034452","modified":1521028711837},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"f29165e36489a87ba32d17dddfd2720d84e3f3ec","modified":1521028711838},{"_id":"themes/next/source/css/_variables/base.styl","hash":"29c261fa6b4046322559074d75239c6b272fb8a3","modified":1521028711838},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"be087dcc060e8179f7e7f60ab4feb65817bd3d9f","modified":1521028711837},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1521028711901},{"_id":"themes/next/layout/_third-party/search/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1521028711772},{"_id":"themes/next/layout/_third-party/search/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1521028711772},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"8050a5b2683d1d77238c5762b6bd89c543daed6e","modified":1521028711852},{"_id":"themes/next/source/lib/Han/dist/han.css","hash":"bd40da3fba8735df5850956814e312bd7b3193d7","modified":1521028711858},{"_id":"themes/next/source/lib/Han/dist/han.min.css","hash":"a0c9e32549a8b8cf327ab9227b037f323cdb60ee","modified":1521028711859},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1521028711868},{"_id":"themes/next/source/lib/Han/dist/han.min.js","hash":"f559c68a25065a14f47da954a7617d87263e409d","modified":1521028711860},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1521028711869},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1521028711868},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1521028711870},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1521028711871},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1521028711870},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1521028711874},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1521028711875},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1521028711876},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1521028711879},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1521028711879},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1521028711882},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1521028711883},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1521028711884},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1521028711918},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1521028711918},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"4719ce717962663c5c33ef97b1119a0b3a4ecdc3","modified":1521028711794},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"31050fc7a25784805b4843550151c93bfa55c9c8","modified":1521028711794},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"7e509c7c28c59f905b847304dd3d14d94b6f3b8e","modified":1521028711795},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1521028711795},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"c5d48863f332ff8ce7c88dec2c893f709d7331d3","modified":1521028711802},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1521028711796},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1521028711811},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1521028711824},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"f7c44b0ee46cf2cf82a4c9455ba8d8b55299976f","modified":1521028711825},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1521028711825},{"_id":"themes/next/source/css/_common/scaffolding/mobile.styl","hash":"47a46583a1f3731157a3f53f80ed1ed5e2753e8e","modified":1521028711825},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1521028711826},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"a280a583b7615e939aaddbf778f5c108ef8a2a6c","modified":1521028711826},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1521028711826},{"_id":"themes/next/source/css/_schemes/Gemini/index.styl","hash":"18c3336ee3d09bd2da6a876e1336539f03d5a973","modified":1521028711829},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1521028711829},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1521028711829},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1521028711830},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1521028711830},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1521028711831},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1521028711832},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1521028711833},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1521028711833},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1521028711834},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1521028711834},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"4aac01962520d60b03b23022ab601ad4bd19c08c","modified":1521028711834},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1521028711835},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"5b93958239d3d2bf9aeaede44eced2434d784462","modified":1521028711835},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1521028711835},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1521028711836},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1521028711836},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"9d16fa3c14ed76b71229f022b63a02fd0f580958","modified":1521028711836},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"3b25edfa187d1bbbd0d38b50dd013cef54758abf","modified":1521028711831},{"_id":"source/_posts/go-pprof/web.jpeg","hash":"ecee427d8d23f67eaa33cb1d654d1523df293a30","modified":1532573263767},{"_id":"themes/next/source/lib/Han/dist/han.js","hash":"e345397e0585c9fed1449e614ec13e0224acf2ab","modified":1521028711859},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1521028711899},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1521028711900},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1521028711921},{"_id":"themes/next/source/lib/Han/dist/font/han-space.otf","hash":"07436f011b44051f61b8329c99de4bec64e86f4b","modified":1521028711855},{"_id":"themes/next/source/lib/Han/dist/font/han-space.woff","hash":"7a635062b10bf5662ae1d218ba0980171005d060","modified":1521028711856},{"_id":"themes/next/source/lib/Han/dist/font/han.otf","hash":"f1f6bb8f461f5672e000380195d3d2358a28494c","modified":1521028711856},{"_id":"themes/next/source/lib/Han/dist/font/han.woff","hash":"f38ff9b2eecaa17b50b66aa2dae87e9e7436d195","modified":1521028711857},{"_id":"themes/next/source/lib/Han/dist/font/han.woff2","hash":"623af3ed5423371ac136a4fe0e8cc7bb7396037a","modified":1521028711857},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1521028711871},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1521028711872},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1521028711871},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1521028711872},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1521028711873},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1521028711874},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1521028711889},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1521028711891},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1521028711898},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"7905a7f625702b45645d8be1268cb8af3f698c70","modified":1521028711797},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1521028711797},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1521028711798},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1521028711798},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1521028711798},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1521028711798},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1521028711800},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"f5aa2ba3bfffc15475e7e72a55b5c9d18609fdf5","modified":1521028711800},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1521028711801},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1521028711801},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1521028711801},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"25dc25f61a232f03ca72472b7852f882448ec185","modified":1521028711799},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1521028711799},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"e72a89e0f421444453e149ba32c77a64bd8e44e8","modified":1521028711802},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1521028711803},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"0f7f522cc6bfb3401d5afd62b0fcdf48bb2d604b","modified":1521028711802},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"535b3b4f8cb1eec2558e094320e7dfb01f94c0e7","modified":1521028711803},{"_id":"themes/next/source/css/_common/components/post/post-copyright.styl","hash":"f54367c0feda6986c030cc4d15a0ca6ceea14bcb","modified":1521028711803},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"aea21141015ca8c409d8b33e3e34ec505f464e93","modified":1521028711804},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1521028711804},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1521028711803},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"36332c8a91f089f545f3c3e8ea90d08aa4d6e60c","modified":1521028711804},{"_id":"themes/next/source/css/_common/components/post/post-rtl.styl","hash":"017074ef58166e2d69c53bb7590a0e7a8947a1ed","modified":1521028711805},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1521028711805},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"d5a4e4fc17f1f7e7c3a61b52d8e2e9677e139de7","modified":1521028711805},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"262debfd4442fa03d9919ceb88b948339df03fb0","modified":1521028711806},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1521028711806},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1521028711807},{"_id":"themes/next/source/css/_common/components/post/post-widgets.styl","hash":"e4055a0d2cd2b0ad9dc55928e2f3e7bd4e499da3","modified":1521028711806},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"89dd4f8b1f1cce3ad46cf2256038472712387d02","modified":1521028711807},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"0a6c0efffdf18bddbc1d1238feaed282b09cd0fe","modified":1521028711807},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"efa5e5022e205b52786ce495d4879f5e7b8f84b2","modified":1521028711808},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1521028711808},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1521028711808},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"12937cae17c96c74d5c58db6cb29de3b2dfa14a2","modified":1521028711809},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"f7784aba0c1cd20d824c918c120012d57a5eaa2a","modified":1521028711809},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"50305b6ad7d09d2ffa4854e39f41ec1f4fe984fd","modified":1521028711809},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1521028711810},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1521028711813},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"37e951e734a252fe8a81f452b963df2ba90bfe90","modified":1521028711814},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1521028711813},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1521028711814},{"_id":"themes/next/source/css/_common/components/tags/label.styl","hash":"4a457d265d62f287c63d48764ce45d9bcfc9ec5a","modified":1521028711815},{"_id":"themes/next/source/css/_common/components/tags/tabs.styl","hash":"4ab5deed8c3b0c338212380f678f8382672e1bcb","modified":1521028711816},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"32c9156bea5bac9e9ad0b4c08ffbca8b3d9aac4b","modified":1521028711816},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"ead0d0f2321dc71505788c7f689f92257cf14947","modified":1521028711817},{"_id":"themes/next/source/css/_common/components/tags/note-modern.styl","hash":"ee7528900578ef4753effe05b346381c40de5499","modified":1521028711815},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1521028711818},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1521028711819},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1521028711819},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1521028711818},{"_id":"themes/next/source/css/_common/components/third-party/gitment.styl","hash":"34935b40237c074be5f5e8818c14ccfd802b7439","modified":1521028711820},{"_id":"themes/next/source/css/_common/components/third-party/han.styl","hash":"cce6772e2cdb4db85d35486ae4c6c59367fbdd40","modified":1521028711821},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1521028711821},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1521028711800},{"_id":"themes/next/source/css/_common/components/third-party/needsharebutton.styl","hash":"a5e3e6b4b4b814a9fe40b34d784fed67d6d977fa","modified":1521028711822},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"1ccfbd4d0f5754b2dc2719a91245c95f547a7652","modified":1521028711823},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"d89c4b562b528e4746696b2ad8935764d133bdae","modified":1521028711821},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1521028711832},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1521028711832},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1521028711834},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1521028711865},{"_id":"themes/next/source/lib/three/three.min.js","hash":"73f4cdc17e51a72b9bf5b9291f65386d615c483b","modified":1521028711917},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1521028711894},{"_id":"source/_posts/.fannel.md.swp","hash":"b50427b6f516cdc18018cd4ab904da8b8eb35d14","modified":1564649064827}],"Category":[{"name":"技术","_id":"cjysf06cu0003nzc7ap5fg03i"}],"Data":[],"Page":[{"title":"分类","date":"2017-03-11T16:24:48.000Z","type":"categories","comments":0,"_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-03-12 00:24:48\ntype: \"categories\"\ncomments: false\n---\n","updated":"2017-03-11T16:26:03.000Z","path":"categories/index.html","layout":"page","_id":"cjysf06ch0000nzc7yxg2a6wc","content":"","excerpt":"","more":""},{"title":"标签","date":"2017-03-11T16:21:51.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-03-12 00:21:51\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-03-11T16:24:21.000Z","path":"tags/index.html","layout":"page","_id":"cjysf06jx001dnzc7zgkm0116","content":"","excerpt":"","more":""}],"Post":[{"title":"elasticsearch几个简单的查询","date":"2018-11-11T16:00:00.000Z","_content":"最近因为项目接触了下elasticsearch， 其实以前一直有所接触，PHP项目的时候有写过几个demo，现在转到go这边，又写了几个demo，比较认真的看了下es的文档。\n<!-- more -->\n\n##### 安装\n安装我都是通过docker-compose来安装，顺便也安装了一下kibana，es装了个集群，就是安装之后本机有点卡。以下是compose的配置\n\n```\nelasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:6.4.2\n    container_name: elasticsearch\n    environment:\n        - cluster.name=docker-cluster\n        - bootstrap.memory_lock=true\n        - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n    ulimits:\n        memlock:\n            soft: -1\n            hard: -1\n    volumes:\n        - esdata1:/usr/share/elasticsearch/data\n    ports:\n        - 9200:9200\n    networks:\n        - webnet\n\nelasticsearch2:\n    image: docker.elastic.co/elasticsearch/elasticsearch:6.4.2\n    container_name: elasticsearch2\n    environment:\n        - cluster.name=docker-cluster\n        - bootstrap.memory_lock=true\n        - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n        - \"discovery.zen.ping.unicast.hosts=elasticsearch\"\n    ulimits:\n        memlock:\n            soft: -1\n            hard: -1\n    volumes:\n        - esdata2:/usr/share/elasticsearch/data\n    networks:\n        - webnet\n\nkibana:\n    image: docker.elastic.co/kibana/kibana:6.2.4\n    volumes:\n        - ./kibana.yml:/usr/share/kibana/config/kibana.yml\n    ports:\n        - 5601:5601\n    depends_on:\n        - elasticsearch\n        - elasticsearch2\n    networks:\n        - webnet\n\n```\n\n\n##### 记录了几个curl查询的语句\n\n```\n- 查询所有\ncurl -H 'Content-Type: application/json' 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d '\n{\n    \"query\": {\n        \"match_all\": {}\n    }\n}'\n\n- match 匹配查询 全文搜索查询\ncurl -H 'Content-Type: application/json' 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d '\n{\n    \"query\": {\n        \"match\": {\n            \"message\": \"No.1\"\n        }\n    }\n}'\n\n- match 匹配查询 精确查询，针对的是保存的精确值的字段，如数字、日期、布尔或者一个 not_analyzed 字符串字段\ncurl -H 'Content-Type: application/json' 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d '\n{\n    \"query\": {\n        \"match\": {\n            \"retweets\": 0  \n        }\n    }\n}'\n\n- multi_match  多个字段进行匹配查询\ncurl -H 'Content-Type: application/json' 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d '\n{\n    \"query\": {\n        \"multi_match\": {\n            \"query\": \"No.1\",\n            \"fields\": [\"user\", \"message\"]\n        }\n    }\n}'\n\n- range查询  查询找出那些落在指定区间内的数字或者时间\n- gt   大于\n- gte  大于等于\n- lt   小于\n- lte  小于等于\ncurl -H 'Content-Type: application/json' 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d '\n{\n    \"query\": {\n        \"range\": {\n            \"retweets\": {\n                \"gte\": 0,\n                \"lt\": 1\n            }\n        }\n    }\n}'\n\n- term查询用于精确值匹配，这些精确值可能是数字、时间、布尔或者那些 not_analyzed 的字符串\n//格式一\ncurl -H 'Content-Type: application/json' 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d '\n{\n    \"query\": {\n        \"term\": {\n            \"message\": \"test123\"\n        }\n    }\n}'\n\n//格式二 这样也可以搜索   效果一样\ncurl -H 'Content-Type: application/json' 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d '\n{\n    \"query\": {\n        \"term\": {\n            \"message\": {\n                \"value\": \"test123\"\n            }\n        }\n    }\n}'\n\n//term对输入的文本不进行分析，而进行精确匹配   这里查询出来的结果为Null\ncurl -H 'Content-Type: application/json' 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d '\n{\n    \"query\": {\n        \"term\": {\n            \"message\": \"No.1\"\n        }\n    }\n}'\n\n//对比match  这里macth则可以进行文本分析 进行搜索出message 为\"To Be No.1\"的结果\ncurl -H 'Content-Type: application/json' 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d '\n{\n    \"query\": {\n        \"match\": {\n            \"message\": \"No.1\"\n        }\n    }\n}'\n\n- terms查询，它允许你指定多值进行匹配。如果这个字段包含了指定值中的任何一个值，那么这个文档满足条件\ncurl -H 'Content-Type: application/json' 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d '\n{\n    \"query\": {\n        \"terms\": {\n            \"message\": [\"test123\", \"test456\", \"To Be No.1\"]\n        }\n    }\n}'\n\n- exists查询  查询含有user字段的记录\ncurl -H 'Content-Type: application/json' 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d '\n{\n    \"query\": {\n        \"exists\": {\n            \"field\": \"user\"\n        }\n    }\n}'\n\n- 6.x没有missing查询  使用must_not 查询不含有user字段的记录\ncurl -H 'Content-Type: application/json' 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d '\n{\n    \"query\": {\n        \"bool\": {\n            \"must_not\": {\n                \"exists\": {\n                    \"field\": \"user\"\n                }\n            }\n        }\n    }\n}'\n\n- 写入一条消息\ncurl -H 'Content-Type: application/json' -XPOST 'http://localhost:9200/twitter/tweet?pretty=true' -d '\n{\n    \"message\": \"test789\"\n}'\n```\n\n##### 写了个demo，遇到一个问题\n\n在初始化es客户端的时候，如果是集群，可以使用elastic.SetSniff(true)进行所有可用es节点的嗅探，但是我本地却不行，原因是因为，我本地部署在docker的环境里，所有的es节点暴露的端口都是在docker的网络内，所以嗅探失败，导致es客户端连接不上。\n我们可以看下nodes对应的IP都是docker网络环境下的IP地址\n```\n curl 'http://localhost:9200/_cat/nodes?pretty=true'\n172.21.0.5 33 97 2 0.13 0.10 0.11 mdi * EYP6Nad\n172.21.0.8 34 97 2 0.13 0.10 0.11 mdi - sj-9rAe\n```\n\n##### 垃圾代码在这里\nhttps://github.com/JohnnyWei188/es-demo\n\n\n\n","source":"_posts/elasticsearch-1.md","raw":"---\ntitle: elasticsearch几个简单的查询 \ndate: 2018-11-12\ntags:\n  - Elasticsearch \n  - Go \ncategories:\n  - 技术\n---\n最近因为项目接触了下elasticsearch， 其实以前一直有所接触，PHP项目的时候有写过几个demo，现在转到go这边，又写了几个demo，比较认真的看了下es的文档。\n<!-- more -->\n\n##### 安装\n安装我都是通过docker-compose来安装，顺便也安装了一下kibana，es装了个集群，就是安装之后本机有点卡。以下是compose的配置\n\n```\nelasticsearch:\n    image: docker.elastic.co/elasticsearch/elasticsearch:6.4.2\n    container_name: elasticsearch\n    environment:\n        - cluster.name=docker-cluster\n        - bootstrap.memory_lock=true\n        - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n    ulimits:\n        memlock:\n            soft: -1\n            hard: -1\n    volumes:\n        - esdata1:/usr/share/elasticsearch/data\n    ports:\n        - 9200:9200\n    networks:\n        - webnet\n\nelasticsearch2:\n    image: docker.elastic.co/elasticsearch/elasticsearch:6.4.2\n    container_name: elasticsearch2\n    environment:\n        - cluster.name=docker-cluster\n        - bootstrap.memory_lock=true\n        - \"ES_JAVA_OPTS=-Xms512m -Xmx512m\"\n        - \"discovery.zen.ping.unicast.hosts=elasticsearch\"\n    ulimits:\n        memlock:\n            soft: -1\n            hard: -1\n    volumes:\n        - esdata2:/usr/share/elasticsearch/data\n    networks:\n        - webnet\n\nkibana:\n    image: docker.elastic.co/kibana/kibana:6.2.4\n    volumes:\n        - ./kibana.yml:/usr/share/kibana/config/kibana.yml\n    ports:\n        - 5601:5601\n    depends_on:\n        - elasticsearch\n        - elasticsearch2\n    networks:\n        - webnet\n\n```\n\n\n##### 记录了几个curl查询的语句\n\n```\n- 查询所有\ncurl -H 'Content-Type: application/json' 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d '\n{\n    \"query\": {\n        \"match_all\": {}\n    }\n}'\n\n- match 匹配查询 全文搜索查询\ncurl -H 'Content-Type: application/json' 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d '\n{\n    \"query\": {\n        \"match\": {\n            \"message\": \"No.1\"\n        }\n    }\n}'\n\n- match 匹配查询 精确查询，针对的是保存的精确值的字段，如数字、日期、布尔或者一个 not_analyzed 字符串字段\ncurl -H 'Content-Type: application/json' 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d '\n{\n    \"query\": {\n        \"match\": {\n            \"retweets\": 0  \n        }\n    }\n}'\n\n- multi_match  多个字段进行匹配查询\ncurl -H 'Content-Type: application/json' 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d '\n{\n    \"query\": {\n        \"multi_match\": {\n            \"query\": \"No.1\",\n            \"fields\": [\"user\", \"message\"]\n        }\n    }\n}'\n\n- range查询  查询找出那些落在指定区间内的数字或者时间\n- gt   大于\n- gte  大于等于\n- lt   小于\n- lte  小于等于\ncurl -H 'Content-Type: application/json' 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d '\n{\n    \"query\": {\n        \"range\": {\n            \"retweets\": {\n                \"gte\": 0,\n                \"lt\": 1\n            }\n        }\n    }\n}'\n\n- term查询用于精确值匹配，这些精确值可能是数字、时间、布尔或者那些 not_analyzed 的字符串\n//格式一\ncurl -H 'Content-Type: application/json' 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d '\n{\n    \"query\": {\n        \"term\": {\n            \"message\": \"test123\"\n        }\n    }\n}'\n\n//格式二 这样也可以搜索   效果一样\ncurl -H 'Content-Type: application/json' 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d '\n{\n    \"query\": {\n        \"term\": {\n            \"message\": {\n                \"value\": \"test123\"\n            }\n        }\n    }\n}'\n\n//term对输入的文本不进行分析，而进行精确匹配   这里查询出来的结果为Null\ncurl -H 'Content-Type: application/json' 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d '\n{\n    \"query\": {\n        \"term\": {\n            \"message\": \"No.1\"\n        }\n    }\n}'\n\n//对比match  这里macth则可以进行文本分析 进行搜索出message 为\"To Be No.1\"的结果\ncurl -H 'Content-Type: application/json' 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d '\n{\n    \"query\": {\n        \"match\": {\n            \"message\": \"No.1\"\n        }\n    }\n}'\n\n- terms查询，它允许你指定多值进行匹配。如果这个字段包含了指定值中的任何一个值，那么这个文档满足条件\ncurl -H 'Content-Type: application/json' 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d '\n{\n    \"query\": {\n        \"terms\": {\n            \"message\": [\"test123\", \"test456\", \"To Be No.1\"]\n        }\n    }\n}'\n\n- exists查询  查询含有user字段的记录\ncurl -H 'Content-Type: application/json' 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d '\n{\n    \"query\": {\n        \"exists\": {\n            \"field\": \"user\"\n        }\n    }\n}'\n\n- 6.x没有missing查询  使用must_not 查询不含有user字段的记录\ncurl -H 'Content-Type: application/json' 'http://localhost:9200/twitter/tweet/_search?pretty=true' -d '\n{\n    \"query\": {\n        \"bool\": {\n            \"must_not\": {\n                \"exists\": {\n                    \"field\": \"user\"\n                }\n            }\n        }\n    }\n}'\n\n- 写入一条消息\ncurl -H 'Content-Type: application/json' -XPOST 'http://localhost:9200/twitter/tweet?pretty=true' -d '\n{\n    \"message\": \"test789\"\n}'\n```\n\n##### 写了个demo，遇到一个问题\n\n在初始化es客户端的时候，如果是集群，可以使用elastic.SetSniff(true)进行所有可用es节点的嗅探，但是我本地却不行，原因是因为，我本地部署在docker的环境里，所有的es节点暴露的端口都是在docker的网络内，所以嗅探失败，导致es客户端连接不上。\n我们可以看下nodes对应的IP都是docker网络环境下的IP地址\n```\n curl 'http://localhost:9200/_cat/nodes?pretty=true'\n172.21.0.5 33 97 2 0.13 0.10 0.11 mdi * EYP6Nad\n172.21.0.8 34 97 2 0.13 0.10 0.11 mdi - sj-9rAe\n```\n\n##### 垃圾代码在这里\nhttps://github.com/JohnnyWei188/es-demo\n\n\n\n","slug":"elasticsearch-1","published":1,"updated":"2019-08-01T08:36:54.198Z","_id":"cjysf06ck0001nzc7bgvlm62v","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近因为项目接触了下elasticsearch， 其实以前一直有所接触，PHP项目的时候有写过几个demo，现在转到go这边，又写了几个demo，比较认真的看了下es的文档。<br><a id=\"more\"></a></p>\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><p>安装我都是通过docker-compose来安装，顺便也安装了一下kibana，es装了个集群，就是安装之后本机有点卡。以下是compose的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">elasticsearch:</div><div class=\"line\">    image: docker.elastic.co/elasticsearch/elasticsearch:6.4.2</div><div class=\"line\">    container_name: elasticsearch</div><div class=\"line\">    environment:</div><div class=\"line\">        - cluster.name=docker-cluster</div><div class=\"line\">        - bootstrap.memory_lock=true</div><div class=\"line\">        - &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</div><div class=\"line\">    ulimits:</div><div class=\"line\">        memlock:</div><div class=\"line\">            soft: -1</div><div class=\"line\">            hard: -1</div><div class=\"line\">    volumes:</div><div class=\"line\">        - esdata1:/usr/share/elasticsearch/data</div><div class=\"line\">    ports:</div><div class=\"line\">        - 9200:9200</div><div class=\"line\">    networks:</div><div class=\"line\">        - webnet</div><div class=\"line\"></div><div class=\"line\">elasticsearch2:</div><div class=\"line\">    image: docker.elastic.co/elasticsearch/elasticsearch:6.4.2</div><div class=\"line\">    container_name: elasticsearch2</div><div class=\"line\">    environment:</div><div class=\"line\">        - cluster.name=docker-cluster</div><div class=\"line\">        - bootstrap.memory_lock=true</div><div class=\"line\">        - &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</div><div class=\"line\">        - &quot;discovery.zen.ping.unicast.hosts=elasticsearch&quot;</div><div class=\"line\">    ulimits:</div><div class=\"line\">        memlock:</div><div class=\"line\">            soft: -1</div><div class=\"line\">            hard: -1</div><div class=\"line\">    volumes:</div><div class=\"line\">        - esdata2:/usr/share/elasticsearch/data</div><div class=\"line\">    networks:</div><div class=\"line\">        - webnet</div><div class=\"line\"></div><div class=\"line\">kibana:</div><div class=\"line\">    image: docker.elastic.co/kibana/kibana:6.2.4</div><div class=\"line\">    volumes:</div><div class=\"line\">        - ./kibana.yml:/usr/share/kibana/config/kibana.yml</div><div class=\"line\">    ports:</div><div class=\"line\">        - 5601:5601</div><div class=\"line\">    depends_on:</div><div class=\"line\">        - elasticsearch</div><div class=\"line\">        - elasticsearch2</div><div class=\"line\">    networks:</div><div class=\"line\">        - webnet</div></pre></td></tr></table></figure>\n<h5 id=\"记录了几个curl查询的语句\"><a href=\"#记录了几个curl查询的语句\" class=\"headerlink\" title=\"记录了几个curl查询的语句\"></a>记录了几个curl查询的语句</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div></pre></td><td class=\"code\"><pre><div class=\"line\">- 查询所有</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; &apos;http://localhost:9200/twitter/tweet/_search?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;query&quot;: &#123;</div><div class=\"line\">        &quot;match_all&quot;: &#123;&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">- match 匹配查询 全文搜索查询</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; &apos;http://localhost:9200/twitter/tweet/_search?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;query&quot;: &#123;</div><div class=\"line\">        &quot;match&quot;: &#123;</div><div class=\"line\">            &quot;message&quot;: &quot;No.1&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">- match 匹配查询 精确查询，针对的是保存的精确值的字段，如数字、日期、布尔或者一个 not_analyzed 字符串字段</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; &apos;http://localhost:9200/twitter/tweet/_search?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;query&quot;: &#123;</div><div class=\"line\">        &quot;match&quot;: &#123;</div><div class=\"line\">            &quot;retweets&quot;: 0  </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">- multi_match  多个字段进行匹配查询</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; &apos;http://localhost:9200/twitter/tweet/_search?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;query&quot;: &#123;</div><div class=\"line\">        &quot;multi_match&quot;: &#123;</div><div class=\"line\">            &quot;query&quot;: &quot;No.1&quot;,</div><div class=\"line\">            &quot;fields&quot;: [&quot;user&quot;, &quot;message&quot;]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">- range查询  查询找出那些落在指定区间内的数字或者时间</div><div class=\"line\">- gt   大于</div><div class=\"line\">- gte  大于等于</div><div class=\"line\">- lt   小于</div><div class=\"line\">- lte  小于等于</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; &apos;http://localhost:9200/twitter/tweet/_search?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;query&quot;: &#123;</div><div class=\"line\">        &quot;range&quot;: &#123;</div><div class=\"line\">            &quot;retweets&quot;: &#123;</div><div class=\"line\">                &quot;gte&quot;: 0,</div><div class=\"line\">                &quot;lt&quot;: 1</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">- term查询用于精确值匹配，这些精确值可能是数字、时间、布尔或者那些 not_analyzed 的字符串</div><div class=\"line\">//格式一</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; &apos;http://localhost:9200/twitter/tweet/_search?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;query&quot;: &#123;</div><div class=\"line\">        &quot;term&quot;: &#123;</div><div class=\"line\">            &quot;message&quot;: &quot;test123&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">//格式二 这样也可以搜索   效果一样</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; &apos;http://localhost:9200/twitter/tweet/_search?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;query&quot;: &#123;</div><div class=\"line\">        &quot;term&quot;: &#123;</div><div class=\"line\">            &quot;message&quot;: &#123;</div><div class=\"line\">                &quot;value&quot;: &quot;test123&quot;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">//term对输入的文本不进行分析，而进行精确匹配   这里查询出来的结果为Null</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; &apos;http://localhost:9200/twitter/tweet/_search?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;query&quot;: &#123;</div><div class=\"line\">        &quot;term&quot;: &#123;</div><div class=\"line\">            &quot;message&quot;: &quot;No.1&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">//对比match  这里macth则可以进行文本分析 进行搜索出message 为&quot;To Be No.1&quot;的结果</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; &apos;http://localhost:9200/twitter/tweet/_search?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;query&quot;: &#123;</div><div class=\"line\">        &quot;match&quot;: &#123;</div><div class=\"line\">            &quot;message&quot;: &quot;No.1&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">- terms查询，它允许你指定多值进行匹配。如果这个字段包含了指定值中的任何一个值，那么这个文档满足条件</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; &apos;http://localhost:9200/twitter/tweet/_search?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;query&quot;: &#123;</div><div class=\"line\">        &quot;terms&quot;: &#123;</div><div class=\"line\">            &quot;message&quot;: [&quot;test123&quot;, &quot;test456&quot;, &quot;To Be No.1&quot;]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">- exists查询  查询含有user字段的记录</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; &apos;http://localhost:9200/twitter/tweet/_search?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;query&quot;: &#123;</div><div class=\"line\">        &quot;exists&quot;: &#123;</div><div class=\"line\">            &quot;field&quot;: &quot;user&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">- 6.x没有missing查询  使用must_not 查询不含有user字段的记录</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; &apos;http://localhost:9200/twitter/tweet/_search?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;query&quot;: &#123;</div><div class=\"line\">        &quot;bool&quot;: &#123;</div><div class=\"line\">            &quot;must_not&quot;: &#123;</div><div class=\"line\">                &quot;exists&quot;: &#123;</div><div class=\"line\">                    &quot;field&quot;: &quot;user&quot;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">- 写入一条消息</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; -XPOST &apos;http://localhost:9200/twitter/tweet?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;message&quot;: &quot;test789&quot;</div><div class=\"line\">&#125;&apos;</div></pre></td></tr></table></figure>\n<h5 id=\"写了个demo，遇到一个问题\"><a href=\"#写了个demo，遇到一个问题\" class=\"headerlink\" title=\"写了个demo，遇到一个问题\"></a>写了个demo，遇到一个问题</h5><p>在初始化es客户端的时候，如果是集群，可以使用elastic.SetSniff(true)进行所有可用es节点的嗅探，但是我本地却不行，原因是因为，我本地部署在docker的环境里，所有的es节点暴露的端口都是在docker的网络内，所以嗅探失败，导致es客户端连接不上。<br>我们可以看下nodes对应的IP都是docker网络环境下的IP地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> curl &apos;http://localhost:9200/_cat/nodes?pretty=true&apos;</div><div class=\"line\">172.21.0.5 33 97 2 0.13 0.10 0.11 mdi * EYP6Nad</div><div class=\"line\">172.21.0.8 34 97 2 0.13 0.10 0.11 mdi - sj-9rAe</div></pre></td></tr></table></figure></p>\n<h5 id=\"垃圾代码在这里\"><a href=\"#垃圾代码在这里\" class=\"headerlink\" title=\"垃圾代码在这里\"></a>垃圾代码在这里</h5><p><a href=\"https://github.com/JohnnyWei188/es-demo\" target=\"_blank\" rel=\"external\">https://github.com/JohnnyWei188/es-demo</a></p>\n","excerpt":"<p>最近因为项目接触了下elasticsearch， 其实以前一直有所接触，PHP项目的时候有写过几个demo，现在转到go这边，又写了几个demo，比较认真的看了下es的文档。<br>","more":"</p>\n<h5 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h5><p>安装我都是通过docker-compose来安装，顺便也安装了一下kibana，es装了个集群，就是安装之后本机有点卡。以下是compose的配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div></pre></td><td class=\"code\"><pre><div class=\"line\">elasticsearch:</div><div class=\"line\">    image: docker.elastic.co/elasticsearch/elasticsearch:6.4.2</div><div class=\"line\">    container_name: elasticsearch</div><div class=\"line\">    environment:</div><div class=\"line\">        - cluster.name=docker-cluster</div><div class=\"line\">        - bootstrap.memory_lock=true</div><div class=\"line\">        - &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</div><div class=\"line\">    ulimits:</div><div class=\"line\">        memlock:</div><div class=\"line\">            soft: -1</div><div class=\"line\">            hard: -1</div><div class=\"line\">    volumes:</div><div class=\"line\">        - esdata1:/usr/share/elasticsearch/data</div><div class=\"line\">    ports:</div><div class=\"line\">        - 9200:9200</div><div class=\"line\">    networks:</div><div class=\"line\">        - webnet</div><div class=\"line\"></div><div class=\"line\">elasticsearch2:</div><div class=\"line\">    image: docker.elastic.co/elasticsearch/elasticsearch:6.4.2</div><div class=\"line\">    container_name: elasticsearch2</div><div class=\"line\">    environment:</div><div class=\"line\">        - cluster.name=docker-cluster</div><div class=\"line\">        - bootstrap.memory_lock=true</div><div class=\"line\">        - &quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</div><div class=\"line\">        - &quot;discovery.zen.ping.unicast.hosts=elasticsearch&quot;</div><div class=\"line\">    ulimits:</div><div class=\"line\">        memlock:</div><div class=\"line\">            soft: -1</div><div class=\"line\">            hard: -1</div><div class=\"line\">    volumes:</div><div class=\"line\">        - esdata2:/usr/share/elasticsearch/data</div><div class=\"line\">    networks:</div><div class=\"line\">        - webnet</div><div class=\"line\"></div><div class=\"line\">kibana:</div><div class=\"line\">    image: docker.elastic.co/kibana/kibana:6.2.4</div><div class=\"line\">    volumes:</div><div class=\"line\">        - ./kibana.yml:/usr/share/kibana/config/kibana.yml</div><div class=\"line\">    ports:</div><div class=\"line\">        - 5601:5601</div><div class=\"line\">    depends_on:</div><div class=\"line\">        - elasticsearch</div><div class=\"line\">        - elasticsearch2</div><div class=\"line\">    networks:</div><div class=\"line\">        - webnet</div></pre></td></tr></table></figure>\n<h5 id=\"记录了几个curl查询的语句\"><a href=\"#记录了几个curl查询的语句\" class=\"headerlink\" title=\"记录了几个curl查询的语句\"></a>记录了几个curl查询的语句</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div><div class=\"line\">72</div><div class=\"line\">73</div><div class=\"line\">74</div><div class=\"line\">75</div><div class=\"line\">76</div><div class=\"line\">77</div><div class=\"line\">78</div><div class=\"line\">79</div><div class=\"line\">80</div><div class=\"line\">81</div><div class=\"line\">82</div><div class=\"line\">83</div><div class=\"line\">84</div><div class=\"line\">85</div><div class=\"line\">86</div><div class=\"line\">87</div><div class=\"line\">88</div><div class=\"line\">89</div><div class=\"line\">90</div><div class=\"line\">91</div><div class=\"line\">92</div><div class=\"line\">93</div><div class=\"line\">94</div><div class=\"line\">95</div><div class=\"line\">96</div><div class=\"line\">97</div><div class=\"line\">98</div><div class=\"line\">99</div><div class=\"line\">100</div><div class=\"line\">101</div><div class=\"line\">102</div><div class=\"line\">103</div><div class=\"line\">104</div><div class=\"line\">105</div><div class=\"line\">106</div><div class=\"line\">107</div><div class=\"line\">108</div><div class=\"line\">109</div><div class=\"line\">110</div><div class=\"line\">111</div><div class=\"line\">112</div><div class=\"line\">113</div><div class=\"line\">114</div><div class=\"line\">115</div><div class=\"line\">116</div><div class=\"line\">117</div><div class=\"line\">118</div><div class=\"line\">119</div><div class=\"line\">120</div><div class=\"line\">121</div><div class=\"line\">122</div><div class=\"line\">123</div><div class=\"line\">124</div><div class=\"line\">125</div><div class=\"line\">126</div><div class=\"line\">127</div><div class=\"line\">128</div><div class=\"line\">129</div><div class=\"line\">130</div><div class=\"line\">131</div><div class=\"line\">132</div><div class=\"line\">133</div><div class=\"line\">134</div><div class=\"line\">135</div><div class=\"line\">136</div><div class=\"line\">137</div><div class=\"line\">138</div></pre></td><td class=\"code\"><pre><div class=\"line\">- 查询所有</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; &apos;http://localhost:9200/twitter/tweet/_search?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;query&quot;: &#123;</div><div class=\"line\">        &quot;match_all&quot;: &#123;&#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">- match 匹配查询 全文搜索查询</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; &apos;http://localhost:9200/twitter/tweet/_search?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;query&quot;: &#123;</div><div class=\"line\">        &quot;match&quot;: &#123;</div><div class=\"line\">            &quot;message&quot;: &quot;No.1&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">- match 匹配查询 精确查询，针对的是保存的精确值的字段，如数字、日期、布尔或者一个 not_analyzed 字符串字段</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; &apos;http://localhost:9200/twitter/tweet/_search?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;query&quot;: &#123;</div><div class=\"line\">        &quot;match&quot;: &#123;</div><div class=\"line\">            &quot;retweets&quot;: 0  </div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">- multi_match  多个字段进行匹配查询</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; &apos;http://localhost:9200/twitter/tweet/_search?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;query&quot;: &#123;</div><div class=\"line\">        &quot;multi_match&quot;: &#123;</div><div class=\"line\">            &quot;query&quot;: &quot;No.1&quot;,</div><div class=\"line\">            &quot;fields&quot;: [&quot;user&quot;, &quot;message&quot;]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">- range查询  查询找出那些落在指定区间内的数字或者时间</div><div class=\"line\">- gt   大于</div><div class=\"line\">- gte  大于等于</div><div class=\"line\">- lt   小于</div><div class=\"line\">- lte  小于等于</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; &apos;http://localhost:9200/twitter/tweet/_search?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;query&quot;: &#123;</div><div class=\"line\">        &quot;range&quot;: &#123;</div><div class=\"line\">            &quot;retweets&quot;: &#123;</div><div class=\"line\">                &quot;gte&quot;: 0,</div><div class=\"line\">                &quot;lt&quot;: 1</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">- term查询用于精确值匹配，这些精确值可能是数字、时间、布尔或者那些 not_analyzed 的字符串</div><div class=\"line\">//格式一</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; &apos;http://localhost:9200/twitter/tweet/_search?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;query&quot;: &#123;</div><div class=\"line\">        &quot;term&quot;: &#123;</div><div class=\"line\">            &quot;message&quot;: &quot;test123&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">//格式二 这样也可以搜索   效果一样</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; &apos;http://localhost:9200/twitter/tweet/_search?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;query&quot;: &#123;</div><div class=\"line\">        &quot;term&quot;: &#123;</div><div class=\"line\">            &quot;message&quot;: &#123;</div><div class=\"line\">                &quot;value&quot;: &quot;test123&quot;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">//term对输入的文本不进行分析，而进行精确匹配   这里查询出来的结果为Null</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; &apos;http://localhost:9200/twitter/tweet/_search?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;query&quot;: &#123;</div><div class=\"line\">        &quot;term&quot;: &#123;</div><div class=\"line\">            &quot;message&quot;: &quot;No.1&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">//对比match  这里macth则可以进行文本分析 进行搜索出message 为&quot;To Be No.1&quot;的结果</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; &apos;http://localhost:9200/twitter/tweet/_search?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;query&quot;: &#123;</div><div class=\"line\">        &quot;match&quot;: &#123;</div><div class=\"line\">            &quot;message&quot;: &quot;No.1&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">- terms查询，它允许你指定多值进行匹配。如果这个字段包含了指定值中的任何一个值，那么这个文档满足条件</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; &apos;http://localhost:9200/twitter/tweet/_search?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;query&quot;: &#123;</div><div class=\"line\">        &quot;terms&quot;: &#123;</div><div class=\"line\">            &quot;message&quot;: [&quot;test123&quot;, &quot;test456&quot;, &quot;To Be No.1&quot;]</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">- exists查询  查询含有user字段的记录</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; &apos;http://localhost:9200/twitter/tweet/_search?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;query&quot;: &#123;</div><div class=\"line\">        &quot;exists&quot;: &#123;</div><div class=\"line\">            &quot;field&quot;: &quot;user&quot;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">- 6.x没有missing查询  使用must_not 查询不含有user字段的记录</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; &apos;http://localhost:9200/twitter/tweet/_search?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;query&quot;: &#123;</div><div class=\"line\">        &quot;bool&quot;: &#123;</div><div class=\"line\">            &quot;must_not&quot;: &#123;</div><div class=\"line\">                &quot;exists&quot;: &#123;</div><div class=\"line\">                    &quot;field&quot;: &quot;user&quot;</div><div class=\"line\">                &#125;</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;&apos;</div><div class=\"line\"></div><div class=\"line\">- 写入一条消息</div><div class=\"line\">curl -H &apos;Content-Type: application/json&apos; -XPOST &apos;http://localhost:9200/twitter/tweet?pretty=true&apos; -d &apos;</div><div class=\"line\">&#123;</div><div class=\"line\">    &quot;message&quot;: &quot;test789&quot;</div><div class=\"line\">&#125;&apos;</div></pre></td></tr></table></figure>\n<h5 id=\"写了个demo，遇到一个问题\"><a href=\"#写了个demo，遇到一个问题\" class=\"headerlink\" title=\"写了个demo，遇到一个问题\"></a>写了个demo，遇到一个问题</h5><p>在初始化es客户端的时候，如果是集群，可以使用elastic.SetSniff(true)进行所有可用es节点的嗅探，但是我本地却不行，原因是因为，我本地部署在docker的环境里，所有的es节点暴露的端口都是在docker的网络内，所以嗅探失败，导致es客户端连接不上。<br>我们可以看下nodes对应的IP都是docker网络环境下的IP地址<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\"> curl &apos;http://localhost:9200/_cat/nodes?pretty=true&apos;</div><div class=\"line\">172.21.0.5 33 97 2 0.13 0.10 0.11 mdi * EYP6Nad</div><div class=\"line\">172.21.0.8 34 97 2 0.13 0.10 0.11 mdi - sj-9rAe</div></pre></td></tr></table></figure></p>\n<h5 id=\"垃圾代码在这里\"><a href=\"#垃圾代码在这里\" class=\"headerlink\" title=\"垃圾代码在这里\"></a>垃圾代码在这里</h5><p><a href=\"https://github.com/JohnnyWei188/es-demo\">https://github.com/JohnnyWei188/es-demo</a></p>"},{"title":"使用docker-compose来构建一个本地的lnmp开发环境","date":"2018-11-14T16:00:00.000Z","_content":"最近一直都在做微服务的开发，因为Docker容器技术的出现，为微服务架构提供了更为便利的条件，我们可以拆分我们的业务为一个一个小的单元进行部署，每个单元相互独立。微服务具有分布式系统的特性，比如横向伸缩性，服务发现，负载均衡，故障转移和高可用等。另外我们可能还有多版本支持，灰度发布，服务降级等。本文主要说的是怎么使用docker来构建一个本地的lnmp开发环境。\n\n<!-- more -->\n\n因为lnmp环境是需要我们部署多个服务，比如php, nginx, redis, mysql等，所以这里是通过使用docker官方下的一个项目叫Compose的工具来实现服务的快速编排。 `Compose是Docker官方的一个开源项目，主要负责是Docker容器集群的快速编排，官方文档说的是Compose可以定义和运行多个容器应用，通过docker-compose.yaml文件可以配置和定义你的服务。`\n\n#### docker-compose.yaml文件配置\n```\nversion: '3'\nservices: \n    nginx:\n        build: ./nginx \n        ports:\n            - \"80:80\"\n        volumes:\n            - \"./nginx/volume-nginx/project:/etc/nginx/project\"\n            - \"./nginx/volume-nginx/lualib:/etc/nginx/lualib\" \n            - \"./nginx/volume-nginx/nginx.conf:/etc/nginx/nginx.conf\"\n            - \"./nginx/volume-nginx/logs:/etc/nginx/logs\"\n            - \"./nginx/volume-nginx/vhosts:/etc/nginx/vhosts\"\n            - \"./nginx/volume-nginx/ssl:/etc/nginx/ssl\"\n            - \"~/wwwroot:/Users/Johnny/wwwroot\"\n        networks:\n            - webnet\n\n    php:\n        build: ./php \n        ports:\n            - \"9000:9000\"\n        volumes:\n            - \"~/wwwroot:/Users/Johnny/wwwroot\"\n            - \"./php/php-fpm.d:/usr/local/etc/php-fpm.d\"\n            - \"./php/logs:/usr/local/etc/logs\"\n        networks:\n            - webnet\n\n    etcd-browser:\n        build: ./etcd-browser \n        ports:\n            - \"8000:8000\"\n        environment:\n            ETCD_HOST: 10.10.134.33\n            ETCD_PORT: 2379\n        networks:\n            - webnet\n\n    mysql:\n        build: ./mysql \n        ports:\n            - \"3306:3306\"\n        volumes:\n            - \"./mysql-data:/var/lib/mysql\"\n        environment:\n            MYSQL_ROOT_PASSWORD: 123456\n        networks:\n            - webnet\n\n    adminer:\n        image: adminer\n        restart: always\n        ports:\n            - 8080:8080\n\n    redis:\n        build: ./redis \n        ports:\n            - \"6379:6379\"\n        networks:\n            - webnet\n\n    memcached:\n        build: ./memcached\n        ports:\n            - \"11211:11211\"\n        networks:\n            - webnet\n\nnetworks:\n    webnet:\n```\n###### docker-compose.yaml文件存在的意义和相关配置含义 \n我们通过docker-compose.yaml文件就可以直接为一个docker应用定义它的相关服务、网络、和容器卷，可以非常方便的就为我们搭建起多个容器的应用。所以，用docker-compose来构建我们的lnmp环境就在合适不过。配置的相关含义：\n```\nversion: '3'\nservices: \n    mysql:\n        build: ./mysql \n        ports:\n            - \"3306:3306\"\n        volumes:\n            - \"./mysql-data:/var/lib/mysql\"\n        environment:\n            MYSQL_ROOT_PASSWORD: 123456\n        networks:\n            - webnet\n```\n- version: 3  全局配置，表示的是当前yaml文件格式版本为3，你也可以指定为1，或者2，因为docker引擎在不断的升级，每一次发布机会都有新的特性和新的API，所以我们通过指定Yaml文件版本，可以指定当前配置适用于docker的版本\n- services:  是一个对象，用以定义服务列表，可以定义多个\n- mysql:  指定的服务名称，这个名称可以随便取\n- build: ./mysql 构建指定的服务，可以是一个对象，如果直接是一个字符串的话，则指定的是构建目录，目录可以是相对路径和绝对路径，相对路径是基于docker-compose.yaml文件的目录, 如果build定义的是一个对象的话，可以像这样：\n```\n mysql:\n    build:\n      context: ./mysql  //定义构建目录\n      dockerfile: Dockerfile-alternate   //可选的参数，用以指定另外的Dockerfile，默认是用context目录下的Dockerfile\n      args:  //可选的参数，设置构建参数\n        buildno: 1\n```\n- ports:  //指定端口映射关系80->80，可以指定多组的端口映射\n  - 80:80\n  - 9000:9000\n- volumes:  //本地目录./mysql-data挂载为docker容器中的/var/lib/mysql，可以挂载多组\n- networks: //指定加入的网络名称，多个容器可以共享一个网络, 还可以设置网络的别名，如下，在相同网络下的其他容器，可以使用其别名进行网络连接: 如下： \n    webnet:\n```\n- networks: \n    webnet:\n      aliases:\n       - databases\n\tlegacy:\n      aliases:\n       - mysql\n```\n- environment:  //设置容器启动的时候环境变量\n   MYSQL_ROOT_PASSWORD: 123456\n- 其他还有很多参数，可以参考文档，这里列举的只是几个基础的参数\n\n\n#### 这个是我使用docker构建lnmp的目录结构\n```\n├── docker-compose.yaml\n├── etcd-browser\n│   ├── Dockerfile\n│   ├── LICENSE\n│   ├── README.md\n│   ├── etcd-browser.service\n│   ├── frontend\n│   └── server.js\n├── memcached\n│   └── Dockerfile\n├── mysql\n│   └── Dockerfile\n├── mysql-data\n│   ├── auto.cnf\n│   ├── ca-key.pem\n│   ├── ca.pem\n│   ├── client-cert.pem\n│   ├── client-key.pem\n│   ├── ib_buffer_pool\n│   ├── ib_logfile0\n│   ├── ib_logfile1\n│   ├── ibdata1\n│   ├── ibtmp1\n│   ├── mysql\n│   ├── performance_schema\n│   ├── private_key.pem\n│   ├── public_key.pem\n│   ├── server-cert.pem\n│   ├── server-key.pem\n│   ├── sys\n│   ├── test\n│   └── xfile\n├── nginx\n│   ├── Dockerfile\n│   ├── start.sh\n│   └── volume-nginx\n├── php\n│   ├── Dockerfile\n│   ├── logs\n│   └── php-fpm.d\n└── redis\n    └── Dockerfile\n```\n#### docker-compose的一些常用命令 \n列出启动的服务\n```\n▶ docker-compose ps\n        Name                       Command               State            Ports\n-----------------------------------------------------------------------------------------\ndocker_adminer_1        entrypoint.sh docker-php-e ...   Up      0.0.0.0:8080->8080/tcp\ndocker_etcd-browser_1   nodejs server.js                 Up      0.0.0.0:8000->8000/tcp\ndocker_memcached_1      docker-entrypoint.sh memcached   Up      0.0.0.0:11211->11211/tcp\ndocker_mysql_1          docker-entrypoint.sh mysqld      Up      0.0.0.0:3306->3306/tcp\ndocker_nginx_1          nginx -g daemon off;             Up      0.0.0.0:80->80/tcp\ndocker_php_1            docker-php-entrypoint php-fpm    Up      0.0.0.0:9000->9000/tcp\ndocker_redis_1          docker-entrypoint.sh redis ...   Up      0.0.0.0:6379->6379/tcp\n```\n重新启动指定的某个服务\n```\n▶ docker-compose restart nginx\nRestarting docker_nginx_1 ... done\n```\n构建服务, 我这是都已经构建好了的，build默认使用的是当前目录下的docker-compose.yml或者是docker-compose.yaml，我们可以可以使用-f参数指定docker-compose的配置文件\n```\n▶ docker-compose build\nBuilding nginx\nStep 1/1 : FROM nginx:latest\n ---> 40960efd7b8f\nSuccessfully built 40960efd7b8f\nSuccessfully tagged docker_nginx:latest\nBuilding php\n…………\n………………\n………………………\n```\n进入到某个已经运行的docker容器里面,\n```\n▶ docker-compose exec nginx bash\nroot@daeafec686cf:/# ls -a\n.  ..  .dockerenv  Users  bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\n```\n打印容器运行的日志\n```\n▶ docker-compose logs -f nginx\nAttaching to docker_nginx_1\n```\n还有一些其他的命令，可以参考文档\n\n\n#### 参考文档\n- https://docs.docker.com/compose/compose-file/\n- https://github.com/JohnnyWei188/docker-compose-lnmp.git\n\n\n","source":"_posts/docker-compose-lnmp.md","raw":"---\ntitle: 使用docker-compose来构建一个本地的lnmp开发环境 \ndate: 2018-11-15\ntags:\n  - Docker \n  - Lnmp \ncategories:\n  - 技术\n---\n最近一直都在做微服务的开发，因为Docker容器技术的出现，为微服务架构提供了更为便利的条件，我们可以拆分我们的业务为一个一个小的单元进行部署，每个单元相互独立。微服务具有分布式系统的特性，比如横向伸缩性，服务发现，负载均衡，故障转移和高可用等。另外我们可能还有多版本支持，灰度发布，服务降级等。本文主要说的是怎么使用docker来构建一个本地的lnmp开发环境。\n\n<!-- more -->\n\n因为lnmp环境是需要我们部署多个服务，比如php, nginx, redis, mysql等，所以这里是通过使用docker官方下的一个项目叫Compose的工具来实现服务的快速编排。 `Compose是Docker官方的一个开源项目，主要负责是Docker容器集群的快速编排，官方文档说的是Compose可以定义和运行多个容器应用，通过docker-compose.yaml文件可以配置和定义你的服务。`\n\n#### docker-compose.yaml文件配置\n```\nversion: '3'\nservices: \n    nginx:\n        build: ./nginx \n        ports:\n            - \"80:80\"\n        volumes:\n            - \"./nginx/volume-nginx/project:/etc/nginx/project\"\n            - \"./nginx/volume-nginx/lualib:/etc/nginx/lualib\" \n            - \"./nginx/volume-nginx/nginx.conf:/etc/nginx/nginx.conf\"\n            - \"./nginx/volume-nginx/logs:/etc/nginx/logs\"\n            - \"./nginx/volume-nginx/vhosts:/etc/nginx/vhosts\"\n            - \"./nginx/volume-nginx/ssl:/etc/nginx/ssl\"\n            - \"~/wwwroot:/Users/Johnny/wwwroot\"\n        networks:\n            - webnet\n\n    php:\n        build: ./php \n        ports:\n            - \"9000:9000\"\n        volumes:\n            - \"~/wwwroot:/Users/Johnny/wwwroot\"\n            - \"./php/php-fpm.d:/usr/local/etc/php-fpm.d\"\n            - \"./php/logs:/usr/local/etc/logs\"\n        networks:\n            - webnet\n\n    etcd-browser:\n        build: ./etcd-browser \n        ports:\n            - \"8000:8000\"\n        environment:\n            ETCD_HOST: 10.10.134.33\n            ETCD_PORT: 2379\n        networks:\n            - webnet\n\n    mysql:\n        build: ./mysql \n        ports:\n            - \"3306:3306\"\n        volumes:\n            - \"./mysql-data:/var/lib/mysql\"\n        environment:\n            MYSQL_ROOT_PASSWORD: 123456\n        networks:\n            - webnet\n\n    adminer:\n        image: adminer\n        restart: always\n        ports:\n            - 8080:8080\n\n    redis:\n        build: ./redis \n        ports:\n            - \"6379:6379\"\n        networks:\n            - webnet\n\n    memcached:\n        build: ./memcached\n        ports:\n            - \"11211:11211\"\n        networks:\n            - webnet\n\nnetworks:\n    webnet:\n```\n###### docker-compose.yaml文件存在的意义和相关配置含义 \n我们通过docker-compose.yaml文件就可以直接为一个docker应用定义它的相关服务、网络、和容器卷，可以非常方便的就为我们搭建起多个容器的应用。所以，用docker-compose来构建我们的lnmp环境就在合适不过。配置的相关含义：\n```\nversion: '3'\nservices: \n    mysql:\n        build: ./mysql \n        ports:\n            - \"3306:3306\"\n        volumes:\n            - \"./mysql-data:/var/lib/mysql\"\n        environment:\n            MYSQL_ROOT_PASSWORD: 123456\n        networks:\n            - webnet\n```\n- version: 3  全局配置，表示的是当前yaml文件格式版本为3，你也可以指定为1，或者2，因为docker引擎在不断的升级，每一次发布机会都有新的特性和新的API，所以我们通过指定Yaml文件版本，可以指定当前配置适用于docker的版本\n- services:  是一个对象，用以定义服务列表，可以定义多个\n- mysql:  指定的服务名称，这个名称可以随便取\n- build: ./mysql 构建指定的服务，可以是一个对象，如果直接是一个字符串的话，则指定的是构建目录，目录可以是相对路径和绝对路径，相对路径是基于docker-compose.yaml文件的目录, 如果build定义的是一个对象的话，可以像这样：\n```\n mysql:\n    build:\n      context: ./mysql  //定义构建目录\n      dockerfile: Dockerfile-alternate   //可选的参数，用以指定另外的Dockerfile，默认是用context目录下的Dockerfile\n      args:  //可选的参数，设置构建参数\n        buildno: 1\n```\n- ports:  //指定端口映射关系80->80，可以指定多组的端口映射\n  - 80:80\n  - 9000:9000\n- volumes:  //本地目录./mysql-data挂载为docker容器中的/var/lib/mysql，可以挂载多组\n- networks: //指定加入的网络名称，多个容器可以共享一个网络, 还可以设置网络的别名，如下，在相同网络下的其他容器，可以使用其别名进行网络连接: 如下： \n    webnet:\n```\n- networks: \n    webnet:\n      aliases:\n       - databases\n\tlegacy:\n      aliases:\n       - mysql\n```\n- environment:  //设置容器启动的时候环境变量\n   MYSQL_ROOT_PASSWORD: 123456\n- 其他还有很多参数，可以参考文档，这里列举的只是几个基础的参数\n\n\n#### 这个是我使用docker构建lnmp的目录结构\n```\n├── docker-compose.yaml\n├── etcd-browser\n│   ├── Dockerfile\n│   ├── LICENSE\n│   ├── README.md\n│   ├── etcd-browser.service\n│   ├── frontend\n│   └── server.js\n├── memcached\n│   └── Dockerfile\n├── mysql\n│   └── Dockerfile\n├── mysql-data\n│   ├── auto.cnf\n│   ├── ca-key.pem\n│   ├── ca.pem\n│   ├── client-cert.pem\n│   ├── client-key.pem\n│   ├── ib_buffer_pool\n│   ├── ib_logfile0\n│   ├── ib_logfile1\n│   ├── ibdata1\n│   ├── ibtmp1\n│   ├── mysql\n│   ├── performance_schema\n│   ├── private_key.pem\n│   ├── public_key.pem\n│   ├── server-cert.pem\n│   ├── server-key.pem\n│   ├── sys\n│   ├── test\n│   └── xfile\n├── nginx\n│   ├── Dockerfile\n│   ├── start.sh\n│   └── volume-nginx\n├── php\n│   ├── Dockerfile\n│   ├── logs\n│   └── php-fpm.d\n└── redis\n    └── Dockerfile\n```\n#### docker-compose的一些常用命令 \n列出启动的服务\n```\n▶ docker-compose ps\n        Name                       Command               State            Ports\n-----------------------------------------------------------------------------------------\ndocker_adminer_1        entrypoint.sh docker-php-e ...   Up      0.0.0.0:8080->8080/tcp\ndocker_etcd-browser_1   nodejs server.js                 Up      0.0.0.0:8000->8000/tcp\ndocker_memcached_1      docker-entrypoint.sh memcached   Up      0.0.0.0:11211->11211/tcp\ndocker_mysql_1          docker-entrypoint.sh mysqld      Up      0.0.0.0:3306->3306/tcp\ndocker_nginx_1          nginx -g daemon off;             Up      0.0.0.0:80->80/tcp\ndocker_php_1            docker-php-entrypoint php-fpm    Up      0.0.0.0:9000->9000/tcp\ndocker_redis_1          docker-entrypoint.sh redis ...   Up      0.0.0.0:6379->6379/tcp\n```\n重新启动指定的某个服务\n```\n▶ docker-compose restart nginx\nRestarting docker_nginx_1 ... done\n```\n构建服务, 我这是都已经构建好了的，build默认使用的是当前目录下的docker-compose.yml或者是docker-compose.yaml，我们可以可以使用-f参数指定docker-compose的配置文件\n```\n▶ docker-compose build\nBuilding nginx\nStep 1/1 : FROM nginx:latest\n ---> 40960efd7b8f\nSuccessfully built 40960efd7b8f\nSuccessfully tagged docker_nginx:latest\nBuilding php\n…………\n………………\n………………………\n```\n进入到某个已经运行的docker容器里面,\n```\n▶ docker-compose exec nginx bash\nroot@daeafec686cf:/# ls -a\n.  ..  .dockerenv  Users  bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var\n```\n打印容器运行的日志\n```\n▶ docker-compose logs -f nginx\nAttaching to docker_nginx_1\n```\n还有一些其他的命令，可以参考文档\n\n\n#### 参考文档\n- https://docs.docker.com/compose/compose-file/\n- https://github.com/JohnnyWei188/docker-compose-lnmp.git\n\n\n","slug":"docker-compose-lnmp","published":1,"updated":"2019-08-01T08:41:21.036Z","_id":"cjysf06cs0002nzc78bkfed74","comments":1,"layout":"post","photos":[],"link":"","content":"<p>最近一直都在做微服务的开发，因为Docker容器技术的出现，为微服务架构提供了更为便利的条件，我们可以拆分我们的业务为一个一个小的单元进行部署，每个单元相互独立。微服务具有分布式系统的特性，比如横向伸缩性，服务发现，负载均衡，故障转移和高可用等。另外我们可能还有多版本支持，灰度发布，服务降级等。本文主要说的是怎么使用docker来构建一个本地的lnmp开发环境。</p>\n<a id=\"more\"></a>\n<p>因为lnmp环境是需要我们部署多个服务，比如php, nginx, redis, mysql等，所以这里是通过使用docker官方下的一个项目叫Compose的工具来实现服务的快速编排。 <code>Compose是Docker官方的一个开源项目，主要负责是Docker容器集群的快速编排，官方文档说的是Compose可以定义和运行多个容器应用，通过docker-compose.yaml文件可以配置和定义你的服务。</code></p>\n<h4 id=\"docker-compose-yaml文件配置\"><a href=\"#docker-compose-yaml文件配置\" class=\"headerlink\" title=\"docker-compose.yaml文件配置\"></a>docker-compose.yaml文件配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\">version: &apos;3&apos;</div><div class=\"line\">services: </div><div class=\"line\">    nginx:</div><div class=\"line\">        build: ./nginx </div><div class=\"line\">        ports:</div><div class=\"line\">            - &quot;80:80&quot;</div><div class=\"line\">        volumes:</div><div class=\"line\">            - &quot;./nginx/volume-nginx/project:/etc/nginx/project&quot;</div><div class=\"line\">            - &quot;./nginx/volume-nginx/lualib:/etc/nginx/lualib&quot; </div><div class=\"line\">            - &quot;./nginx/volume-nginx/nginx.conf:/etc/nginx/nginx.conf&quot;</div><div class=\"line\">            - &quot;./nginx/volume-nginx/logs:/etc/nginx/logs&quot;</div><div class=\"line\">            - &quot;./nginx/volume-nginx/vhosts:/etc/nginx/vhosts&quot;</div><div class=\"line\">            - &quot;./nginx/volume-nginx/ssl:/etc/nginx/ssl&quot;</div><div class=\"line\">            - &quot;~/wwwroot:/Users/Johnny/wwwroot&quot;</div><div class=\"line\">        networks:</div><div class=\"line\">            - webnet</div><div class=\"line\"></div><div class=\"line\">    php:</div><div class=\"line\">        build: ./php </div><div class=\"line\">        ports:</div><div class=\"line\">            - &quot;9000:9000&quot;</div><div class=\"line\">        volumes:</div><div class=\"line\">            - &quot;~/wwwroot:/Users/Johnny/wwwroot&quot;</div><div class=\"line\">            - &quot;./php/php-fpm.d:/usr/local/etc/php-fpm.d&quot;</div><div class=\"line\">            - &quot;./php/logs:/usr/local/etc/logs&quot;</div><div class=\"line\">        networks:</div><div class=\"line\">            - webnet</div><div class=\"line\"></div><div class=\"line\">    etcd-browser:</div><div class=\"line\">        build: ./etcd-browser </div><div class=\"line\">        ports:</div><div class=\"line\">            - &quot;8000:8000&quot;</div><div class=\"line\">        environment:</div><div class=\"line\">            ETCD_HOST: 10.10.134.33</div><div class=\"line\">            ETCD_PORT: 2379</div><div class=\"line\">        networks:</div><div class=\"line\">            - webnet</div><div class=\"line\"></div><div class=\"line\">    mysql:</div><div class=\"line\">        build: ./mysql </div><div class=\"line\">        ports:</div><div class=\"line\">            - &quot;3306:3306&quot;</div><div class=\"line\">        volumes:</div><div class=\"line\">            - &quot;./mysql-data:/var/lib/mysql&quot;</div><div class=\"line\">        environment:</div><div class=\"line\">            MYSQL_ROOT_PASSWORD: 123456</div><div class=\"line\">        networks:</div><div class=\"line\">            - webnet</div><div class=\"line\"></div><div class=\"line\">    adminer:</div><div class=\"line\">        image: adminer</div><div class=\"line\">        restart: always</div><div class=\"line\">        ports:</div><div class=\"line\">            - 8080:8080</div><div class=\"line\"></div><div class=\"line\">    redis:</div><div class=\"line\">        build: ./redis </div><div class=\"line\">        ports:</div><div class=\"line\">            - &quot;6379:6379&quot;</div><div class=\"line\">        networks:</div><div class=\"line\">            - webnet</div><div class=\"line\"></div><div class=\"line\">    memcached:</div><div class=\"line\">        build: ./memcached</div><div class=\"line\">        ports:</div><div class=\"line\">            - &quot;11211:11211&quot;</div><div class=\"line\">        networks:</div><div class=\"line\">            - webnet</div><div class=\"line\"></div><div class=\"line\">networks:</div><div class=\"line\">    webnet:</div></pre></td></tr></table></figure>\n<h6 id=\"docker-compose-yaml文件存在的意义和相关配置含义\"><a href=\"#docker-compose-yaml文件存在的意义和相关配置含义\" class=\"headerlink\" title=\"docker-compose.yaml文件存在的意义和相关配置含义\"></a>docker-compose.yaml文件存在的意义和相关配置含义</h6><p>我们通过docker-compose.yaml文件就可以直接为一个docker应用定义它的相关服务、网络、和容器卷，可以非常方便的就为我们搭建起多个容器的应用。所以，用docker-compose来构建我们的lnmp环境就在合适不过。配置的相关含义：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">version: &apos;3&apos;</div><div class=\"line\">services: </div><div class=\"line\">    mysql:</div><div class=\"line\">        build: ./mysql </div><div class=\"line\">        ports:</div><div class=\"line\">            - &quot;3306:3306&quot;</div><div class=\"line\">        volumes:</div><div class=\"line\">            - &quot;./mysql-data:/var/lib/mysql&quot;</div><div class=\"line\">        environment:</div><div class=\"line\">            MYSQL_ROOT_PASSWORD: 123456</div><div class=\"line\">        networks:</div><div class=\"line\">            - webnet</div></pre></td></tr></table></figure></p>\n<ul>\n<li>version: 3  全局配置，表示的是当前yaml文件格式版本为3，你也可以指定为1，或者2，因为docker引擎在不断的升级，每一次发布机会都有新的特性和新的API，所以我们通过指定Yaml文件版本，可以指定当前配置适用于docker的版本</li>\n<li>services:  是一个对象，用以定义服务列表，可以定义多个</li>\n<li>mysql:  指定的服务名称，这个名称可以随便取</li>\n<li><p>build: ./mysql 构建指定的服务，可以是一个对象，如果直接是一个字符串的话，则指定的是构建目录，目录可以是相对路径和绝对路径，相对路径是基于docker-compose.yaml文件的目录, 如果build定义的是一个对象的话，可以像这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql:</div><div class=\"line\">   build:</div><div class=\"line\">     context: ./mysql  //定义构建目录</div><div class=\"line\">     dockerfile: Dockerfile-alternate   //可选的参数，用以指定另外的Dockerfile，默认是用context目录下的Dockerfile</div><div class=\"line\">     args:  //可选的参数，设置构建参数</div><div class=\"line\">       buildno: 1</div></pre></td></tr></table></figure>\n</li>\n<li><p>ports:  //指定端口映射关系80-&gt;80，可以指定多组的端口映射</p>\n<ul>\n<li>80:80</li>\n<li>9000:9000</li>\n</ul>\n</li>\n<li>volumes:  //本地目录./mysql-data挂载为docker容器中的/var/lib/mysql，可以挂载多组</li>\n<li><p>networks: //指定加入的网络名称，多个容器可以共享一个网络, 还可以设置网络的别名，如下，在相同网络下的其他容器，可以使用其别名进行网络连接: 如下：<br>  webnet:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- networks: </div><div class=\"line\">    webnet:</div><div class=\"line\">      aliases:</div><div class=\"line\">       - databases</div><div class=\"line\">\tlegacy:</div><div class=\"line\">      aliases:</div><div class=\"line\">       - mysql</div></pre></td></tr></table></figure>\n</li>\n<li><p>environment:  //设置容器启动的时候环境变量<br> MYSQL_ROOT_PASSWORD: 123456</p>\n</li>\n<li>其他还有很多参数，可以参考文档，这里列举的只是几个基础的参数</li>\n</ul>\n<h4 id=\"这个是我使用docker构建lnmp的目录结构\"><a href=\"#这个是我使用docker构建lnmp的目录结构\" class=\"headerlink\" title=\"这个是我使用docker构建lnmp的目录结构\"></a>这个是我使用docker构建lnmp的目录结构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── docker-compose.yaml</div><div class=\"line\">├── etcd-browser</div><div class=\"line\">│   ├── Dockerfile</div><div class=\"line\">│   ├── LICENSE</div><div class=\"line\">│   ├── README.md</div><div class=\"line\">│   ├── etcd-browser.service</div><div class=\"line\">│   ├── frontend</div><div class=\"line\">│   └── server.js</div><div class=\"line\">├── memcached</div><div class=\"line\">│   └── Dockerfile</div><div class=\"line\">├── mysql</div><div class=\"line\">│   └── Dockerfile</div><div class=\"line\">├── mysql-data</div><div class=\"line\">│   ├── auto.cnf</div><div class=\"line\">│   ├── ca-key.pem</div><div class=\"line\">│   ├── ca.pem</div><div class=\"line\">│   ├── client-cert.pem</div><div class=\"line\">│   ├── client-key.pem</div><div class=\"line\">│   ├── ib_buffer_pool</div><div class=\"line\">│   ├── ib_logfile0</div><div class=\"line\">│   ├── ib_logfile1</div><div class=\"line\">│   ├── ibdata1</div><div class=\"line\">│   ├── ibtmp1</div><div class=\"line\">│   ├── mysql</div><div class=\"line\">│   ├── performance_schema</div><div class=\"line\">│   ├── private_key.pem</div><div class=\"line\">│   ├── public_key.pem</div><div class=\"line\">│   ├── server-cert.pem</div><div class=\"line\">│   ├── server-key.pem</div><div class=\"line\">│   ├── sys</div><div class=\"line\">│   ├── test</div><div class=\"line\">│   └── xfile</div><div class=\"line\">├── nginx</div><div class=\"line\">│   ├── Dockerfile</div><div class=\"line\">│   ├── start.sh</div><div class=\"line\">│   └── volume-nginx</div><div class=\"line\">├── php</div><div class=\"line\">│   ├── Dockerfile</div><div class=\"line\">│   ├── logs</div><div class=\"line\">│   └── php-fpm.d</div><div class=\"line\">└── redis</div><div class=\"line\">    └── Dockerfile</div></pre></td></tr></table></figure>\n<h4 id=\"docker-compose的一些常用命令\"><a href=\"#docker-compose的一些常用命令\" class=\"headerlink\" title=\"docker-compose的一些常用命令\"></a>docker-compose的一些常用命令</h4><p>列出启动的服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">▶ docker-compose ps</div><div class=\"line\">        Name                       Command               State            Ports</div><div class=\"line\">-----------------------------------------------------------------------------------------</div><div class=\"line\">docker_adminer_1        entrypoint.sh docker-php-e ...   Up      0.0.0.0:8080-&gt;8080/tcp</div><div class=\"line\">docker_etcd-browser_1   nodejs server.js                 Up      0.0.0.0:8000-&gt;8000/tcp</div><div class=\"line\">docker_memcached_1      docker-entrypoint.sh memcached   Up      0.0.0.0:11211-&gt;11211/tcp</div><div class=\"line\">docker_mysql_1          docker-entrypoint.sh mysqld      Up      0.0.0.0:3306-&gt;3306/tcp</div><div class=\"line\">docker_nginx_1          nginx -g daemon off;             Up      0.0.0.0:80-&gt;80/tcp</div><div class=\"line\">docker_php_1            docker-php-entrypoint php-fpm    Up      0.0.0.0:9000-&gt;9000/tcp</div><div class=\"line\">docker_redis_1          docker-entrypoint.sh redis ...   Up      0.0.0.0:6379-&gt;6379/tcp</div></pre></td></tr></table></figure></p>\n<p>重新启动指定的某个服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">▶ docker-compose restart nginx</div><div class=\"line\">Restarting docker_nginx_1 ... done</div></pre></td></tr></table></figure></p>\n<p>构建服务, 我这是都已经构建好了的，build默认使用的是当前目录下的docker-compose.yml或者是docker-compose.yaml，我们可以可以使用-f参数指定docker-compose的配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">▶ docker-compose build</div><div class=\"line\">Building nginx</div><div class=\"line\">Step 1/1 : FROM nginx:latest</div><div class=\"line\"> ---&gt; 40960efd7b8f</div><div class=\"line\">Successfully built 40960efd7b8f</div><div class=\"line\">Successfully tagged docker_nginx:latest</div><div class=\"line\">Building php</div><div class=\"line\">…………</div><div class=\"line\">………………</div><div class=\"line\">………………………</div></pre></td></tr></table></figure></p>\n<p>进入到某个已经运行的docker容器里面,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">▶ docker-compose exec nginx bash</div><div class=\"line\">root@daeafec686cf:/# ls -a</div><div class=\"line\">.  ..  .dockerenv  Users  bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</div></pre></td></tr></table></figure></p>\n<p>打印容器运行的日志<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">▶ docker-compose logs -f nginx</div><div class=\"line\">Attaching to docker_nginx_1</div></pre></td></tr></table></figure></p>\n<p>还有一些其他的命令，可以参考文档</p>\n<h4 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h4><ul>\n<li><a href=\"https://docs.docker.com/compose/compose-file/\" target=\"_blank\" rel=\"external\">https://docs.docker.com/compose/compose-file/</a></li>\n<li><a href=\"https://github.com/JohnnyWei188/docker-compose-lnmp.git\" target=\"_blank\" rel=\"external\">https://github.com/JohnnyWei188/docker-compose-lnmp.git</a></li>\n</ul>\n","excerpt":"<p>最近一直都在做微服务的开发，因为Docker容器技术的出现，为微服务架构提供了更为便利的条件，我们可以拆分我们的业务为一个一个小的单元进行部署，每个单元相互独立。微服务具有分布式系统的特性，比如横向伸缩性，服务发现，负载均衡，故障转移和高可用等。另外我们可能还有多版本支持，灰度发布，服务降级等。本文主要说的是怎么使用docker来构建一个本地的lnmp开发环境。</p>","more":"<p>因为lnmp环境是需要我们部署多个服务，比如php, nginx, redis, mysql等，所以这里是通过使用docker官方下的一个项目叫Compose的工具来实现服务的快速编排。 <code>Compose是Docker官方的一个开源项目，主要负责是Docker容器集群的快速编排，官方文档说的是Compose可以定义和运行多个容器应用，通过docker-compose.yaml文件可以配置和定义你的服务。</code></p>\n<h4 id=\"docker-compose-yaml文件配置\"><a href=\"#docker-compose-yaml文件配置\" class=\"headerlink\" title=\"docker-compose.yaml文件配置\"></a>docker-compose.yaml文件配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div><div class=\"line\">52</div><div class=\"line\">53</div><div class=\"line\">54</div><div class=\"line\">55</div><div class=\"line\">56</div><div class=\"line\">57</div><div class=\"line\">58</div><div class=\"line\">59</div><div class=\"line\">60</div><div class=\"line\">61</div><div class=\"line\">62</div><div class=\"line\">63</div><div class=\"line\">64</div><div class=\"line\">65</div><div class=\"line\">66</div><div class=\"line\">67</div><div class=\"line\">68</div><div class=\"line\">69</div><div class=\"line\">70</div><div class=\"line\">71</div></pre></td><td class=\"code\"><pre><div class=\"line\">version: &apos;3&apos;</div><div class=\"line\">services: </div><div class=\"line\">    nginx:</div><div class=\"line\">        build: ./nginx </div><div class=\"line\">        ports:</div><div class=\"line\">            - &quot;80:80&quot;</div><div class=\"line\">        volumes:</div><div class=\"line\">            - &quot;./nginx/volume-nginx/project:/etc/nginx/project&quot;</div><div class=\"line\">            - &quot;./nginx/volume-nginx/lualib:/etc/nginx/lualib&quot; </div><div class=\"line\">            - &quot;./nginx/volume-nginx/nginx.conf:/etc/nginx/nginx.conf&quot;</div><div class=\"line\">            - &quot;./nginx/volume-nginx/logs:/etc/nginx/logs&quot;</div><div class=\"line\">            - &quot;./nginx/volume-nginx/vhosts:/etc/nginx/vhosts&quot;</div><div class=\"line\">            - &quot;./nginx/volume-nginx/ssl:/etc/nginx/ssl&quot;</div><div class=\"line\">            - &quot;~/wwwroot:/Users/Johnny/wwwroot&quot;</div><div class=\"line\">        networks:</div><div class=\"line\">            - webnet</div><div class=\"line\"></div><div class=\"line\">    php:</div><div class=\"line\">        build: ./php </div><div class=\"line\">        ports:</div><div class=\"line\">            - &quot;9000:9000&quot;</div><div class=\"line\">        volumes:</div><div class=\"line\">            - &quot;~/wwwroot:/Users/Johnny/wwwroot&quot;</div><div class=\"line\">            - &quot;./php/php-fpm.d:/usr/local/etc/php-fpm.d&quot;</div><div class=\"line\">            - &quot;./php/logs:/usr/local/etc/logs&quot;</div><div class=\"line\">        networks:</div><div class=\"line\">            - webnet</div><div class=\"line\"></div><div class=\"line\">    etcd-browser:</div><div class=\"line\">        build: ./etcd-browser </div><div class=\"line\">        ports:</div><div class=\"line\">            - &quot;8000:8000&quot;</div><div class=\"line\">        environment:</div><div class=\"line\">            ETCD_HOST: 10.10.134.33</div><div class=\"line\">            ETCD_PORT: 2379</div><div class=\"line\">        networks:</div><div class=\"line\">            - webnet</div><div class=\"line\"></div><div class=\"line\">    mysql:</div><div class=\"line\">        build: ./mysql </div><div class=\"line\">        ports:</div><div class=\"line\">            - &quot;3306:3306&quot;</div><div class=\"line\">        volumes:</div><div class=\"line\">            - &quot;./mysql-data:/var/lib/mysql&quot;</div><div class=\"line\">        environment:</div><div class=\"line\">            MYSQL_ROOT_PASSWORD: 123456</div><div class=\"line\">        networks:</div><div class=\"line\">            - webnet</div><div class=\"line\"></div><div class=\"line\">    adminer:</div><div class=\"line\">        image: adminer</div><div class=\"line\">        restart: always</div><div class=\"line\">        ports:</div><div class=\"line\">            - 8080:8080</div><div class=\"line\"></div><div class=\"line\">    redis:</div><div class=\"line\">        build: ./redis </div><div class=\"line\">        ports:</div><div class=\"line\">            - &quot;6379:6379&quot;</div><div class=\"line\">        networks:</div><div class=\"line\">            - webnet</div><div class=\"line\"></div><div class=\"line\">    memcached:</div><div class=\"line\">        build: ./memcached</div><div class=\"line\">        ports:</div><div class=\"line\">            - &quot;11211:11211&quot;</div><div class=\"line\">        networks:</div><div class=\"line\">            - webnet</div><div class=\"line\"></div><div class=\"line\">networks:</div><div class=\"line\">    webnet:</div></pre></td></tr></table></figure>\n<h6 id=\"docker-compose-yaml文件存在的意义和相关配置含义\"><a href=\"#docker-compose-yaml文件存在的意义和相关配置含义\" class=\"headerlink\" title=\"docker-compose.yaml文件存在的意义和相关配置含义\"></a>docker-compose.yaml文件存在的意义和相关配置含义</h6><p>我们通过docker-compose.yaml文件就可以直接为一个docker应用定义它的相关服务、网络、和容器卷，可以非常方便的就为我们搭建起多个容器的应用。所以，用docker-compose来构建我们的lnmp环境就在合适不过。配置的相关含义：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">version: &apos;3&apos;</div><div class=\"line\">services: </div><div class=\"line\">    mysql:</div><div class=\"line\">        build: ./mysql </div><div class=\"line\">        ports:</div><div class=\"line\">            - &quot;3306:3306&quot;</div><div class=\"line\">        volumes:</div><div class=\"line\">            - &quot;./mysql-data:/var/lib/mysql&quot;</div><div class=\"line\">        environment:</div><div class=\"line\">            MYSQL_ROOT_PASSWORD: 123456</div><div class=\"line\">        networks:</div><div class=\"line\">            - webnet</div></pre></td></tr></table></figure></p>\n<ul>\n<li>version: 3  全局配置，表示的是当前yaml文件格式版本为3，你也可以指定为1，或者2，因为docker引擎在不断的升级，每一次发布机会都有新的特性和新的API，所以我们通过指定Yaml文件版本，可以指定当前配置适用于docker的版本</li>\n<li>services:  是一个对象，用以定义服务列表，可以定义多个</li>\n<li>mysql:  指定的服务名称，这个名称可以随便取</li>\n<li><p>build: ./mysql 构建指定的服务，可以是一个对象，如果直接是一个字符串的话，则指定的是构建目录，目录可以是相对路径和绝对路径，相对路径是基于docker-compose.yaml文件的目录, 如果build定义的是一个对象的话，可以像这样：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql:</div><div class=\"line\">   build:</div><div class=\"line\">     context: ./mysql  //定义构建目录</div><div class=\"line\">     dockerfile: Dockerfile-alternate   //可选的参数，用以指定另外的Dockerfile，默认是用context目录下的Dockerfile</div><div class=\"line\">     args:  //可选的参数，设置构建参数</div><div class=\"line\">       buildno: 1</div></pre></td></tr></table></figure>\n</li>\n<li><p>ports:  //指定端口映射关系80-&gt;80，可以指定多组的端口映射</p>\n<ul>\n<li>80:80</li>\n<li>9000:9000</li>\n</ul>\n</li>\n<li>volumes:  //本地目录./mysql-data挂载为docker容器中的/var/lib/mysql，可以挂载多组</li>\n<li><p>networks: //指定加入的网络名称，多个容器可以共享一个网络, 还可以设置网络的别名，如下，在相同网络下的其他容器，可以使用其别名进行网络连接: 如下：<br>  webnet:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">- networks: </div><div class=\"line\">    webnet:</div><div class=\"line\">      aliases:</div><div class=\"line\">       - databases</div><div class=\"line\">\tlegacy:</div><div class=\"line\">      aliases:</div><div class=\"line\">       - mysql</div></pre></td></tr></table></figure>\n</li>\n<li><p>environment:  //设置容器启动的时候环境变量<br> MYSQL_ROOT_PASSWORD: 123456</p>\n</li>\n<li>其他还有很多参数，可以参考文档，这里列举的只是几个基础的参数</li>\n</ul>\n<h4 id=\"这个是我使用docker构建lnmp的目录结构\"><a href=\"#这个是我使用docker构建lnmp的目录结构\" class=\"headerlink\" title=\"这个是我使用docker构建lnmp的目录结构\"></a>这个是我使用docker构建lnmp的目录结构</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div></pre></td><td class=\"code\"><pre><div class=\"line\">├── docker-compose.yaml</div><div class=\"line\">├── etcd-browser</div><div class=\"line\">│   ├── Dockerfile</div><div class=\"line\">│   ├── LICENSE</div><div class=\"line\">│   ├── README.md</div><div class=\"line\">│   ├── etcd-browser.service</div><div class=\"line\">│   ├── frontend</div><div class=\"line\">│   └── server.js</div><div class=\"line\">├── memcached</div><div class=\"line\">│   └── Dockerfile</div><div class=\"line\">├── mysql</div><div class=\"line\">│   └── Dockerfile</div><div class=\"line\">├── mysql-data</div><div class=\"line\">│   ├── auto.cnf</div><div class=\"line\">│   ├── ca-key.pem</div><div class=\"line\">│   ├── ca.pem</div><div class=\"line\">│   ├── client-cert.pem</div><div class=\"line\">│   ├── client-key.pem</div><div class=\"line\">│   ├── ib_buffer_pool</div><div class=\"line\">│   ├── ib_logfile0</div><div class=\"line\">│   ├── ib_logfile1</div><div class=\"line\">│   ├── ibdata1</div><div class=\"line\">│   ├── ibtmp1</div><div class=\"line\">│   ├── mysql</div><div class=\"line\">│   ├── performance_schema</div><div class=\"line\">│   ├── private_key.pem</div><div class=\"line\">│   ├── public_key.pem</div><div class=\"line\">│   ├── server-cert.pem</div><div class=\"line\">│   ├── server-key.pem</div><div class=\"line\">│   ├── sys</div><div class=\"line\">│   ├── test</div><div class=\"line\">│   └── xfile</div><div class=\"line\">├── nginx</div><div class=\"line\">│   ├── Dockerfile</div><div class=\"line\">│   ├── start.sh</div><div class=\"line\">│   └── volume-nginx</div><div class=\"line\">├── php</div><div class=\"line\">│   ├── Dockerfile</div><div class=\"line\">│   ├── logs</div><div class=\"line\">│   └── php-fpm.d</div><div class=\"line\">└── redis</div><div class=\"line\">    └── Dockerfile</div></pre></td></tr></table></figure>\n<h4 id=\"docker-compose的一些常用命令\"><a href=\"#docker-compose的一些常用命令\" class=\"headerlink\" title=\"docker-compose的一些常用命令\"></a>docker-compose的一些常用命令</h4><p>列出启动的服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">▶ docker-compose ps</div><div class=\"line\">        Name                       Command               State            Ports</div><div class=\"line\">-----------------------------------------------------------------------------------------</div><div class=\"line\">docker_adminer_1        entrypoint.sh docker-php-e ...   Up      0.0.0.0:8080-&gt;8080/tcp</div><div class=\"line\">docker_etcd-browser_1   nodejs server.js                 Up      0.0.0.0:8000-&gt;8000/tcp</div><div class=\"line\">docker_memcached_1      docker-entrypoint.sh memcached   Up      0.0.0.0:11211-&gt;11211/tcp</div><div class=\"line\">docker_mysql_1          docker-entrypoint.sh mysqld      Up      0.0.0.0:3306-&gt;3306/tcp</div><div class=\"line\">docker_nginx_1          nginx -g daemon off;             Up      0.0.0.0:80-&gt;80/tcp</div><div class=\"line\">docker_php_1            docker-php-entrypoint php-fpm    Up      0.0.0.0:9000-&gt;9000/tcp</div><div class=\"line\">docker_redis_1          docker-entrypoint.sh redis ...   Up      0.0.0.0:6379-&gt;6379/tcp</div></pre></td></tr></table></figure></p>\n<p>重新启动指定的某个服务<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">▶ docker-compose restart nginx</div><div class=\"line\">Restarting docker_nginx_1 ... done</div></pre></td></tr></table></figure></p>\n<p>构建服务, 我这是都已经构建好了的，build默认使用的是当前目录下的docker-compose.yml或者是docker-compose.yaml，我们可以可以使用-f参数指定docker-compose的配置文件<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">▶ docker-compose build</div><div class=\"line\">Building nginx</div><div class=\"line\">Step 1/1 : FROM nginx:latest</div><div class=\"line\"> ---&gt; 40960efd7b8f</div><div class=\"line\">Successfully built 40960efd7b8f</div><div class=\"line\">Successfully tagged docker_nginx:latest</div><div class=\"line\">Building php</div><div class=\"line\">…………</div><div class=\"line\">………………</div><div class=\"line\">………………………</div></pre></td></tr></table></figure></p>\n<p>进入到某个已经运行的docker容器里面,<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">▶ docker-compose exec nginx bash</div><div class=\"line\">root@daeafec686cf:/# ls -a</div><div class=\"line\">.  ..  .dockerenv  Users  bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</div></pre></td></tr></table></figure></p>\n<p>打印容器运行的日志<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">▶ docker-compose logs -f nginx</div><div class=\"line\">Attaching to docker_nginx_1</div></pre></td></tr></table></figure></p>\n<p>还有一些其他的命令，可以参考文档</p>\n<h4 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h4><ul>\n<li><a href=\"https://docs.docker.com/compose/compose-file/\">https://docs.docker.com/compose/compose-file/</a></li>\n<li><a href=\"https://github.com/JohnnyWei188/docker-compose-lnmp.git\">https://github.com/JohnnyWei188/docker-compose-lnmp.git</a></li>\n</ul>"},{"title":"Fannel相关介绍","date":"2018-08-27T16:21:18.000Z","_content":"\n##### Fannel是什么？ \nFannel是使用UDP实现的一种覆盖网络(Overlay)，即表示运行在一个网上的网。并不依靠IP地址来传递信息，而是采用一种映射机制，把IP地址和identifiers来做映射来资源定位。也就是将TCP数据包装在另一种网络包里面进行路由转发和通信。\n<!--more-->\n\n##### Fannel的运用场景是什么？\nFlannel是CoreOS团队针对Kubernetes设计的一个网络规划服务，它的功能就是让集群中不同节点主机创建的Docker容器都具有全局唯一的虚拟IP, 并且能让他们相互ping通。\n\n##### Fannel主要解决了什么问题？\n试想，默认的Docker，在每个物理机节点上的Docker服务都会分别负责所在节点容器的IP分配，那这样就会导致一个问题，就是不同节点上不同容器可能会获得相同的IP地址。\n例如：\n物理机w1和物理机w2中分别有容器r1和容器r2，那怎么通过容器r1去访问容器r2呢？它们之间是没办法互相访问的。 再者，w1和w2如果都是使用Docker的默认配置的话，那r1和r2的IP默认应该都是172.17.0.2，服务注册的话不都注册相同的IP吗？ 那r1访问r2的时候，会不会很疑惑的发现r2的IP地址和自己一样？\n\n##### Fannel实现 \nflannel 使用etcd存储配置数据和子网分配信息。flannel 启动之后，后台进程首先检索配置和正在使用的子网列表，然后选择一个可用的子网，然后尝试去注册它。\netcd也存储这个每个主机对应的ip。flannel 使用etcd的watch机制监视/coreos.com/network/subnets下面所有元素的变化信息，并且根据它来维护一个路由表。为了\n提高性能，flannel优化了Universal TAP/TUN设备，对TUN和UDP之间的ip分片做了代理。\n","source":"_posts/fannel.md","raw":"---\ntitle: Fannel相关介绍 \ndate: 2018-08-28 00:21:18\ntags:\n  - Go \n  - Fannel\n  - Kubernetes \ncategories:\n  - 技术\n---\n\n##### Fannel是什么？ \nFannel是使用UDP实现的一种覆盖网络(Overlay)，即表示运行在一个网上的网。并不依靠IP地址来传递信息，而是采用一种映射机制，把IP地址和identifiers来做映射来资源定位。也就是将TCP数据包装在另一种网络包里面进行路由转发和通信。\n<!--more-->\n\n##### Fannel的运用场景是什么？\nFlannel是CoreOS团队针对Kubernetes设计的一个网络规划服务，它的功能就是让集群中不同节点主机创建的Docker容器都具有全局唯一的虚拟IP, 并且能让他们相互ping通。\n\n##### Fannel主要解决了什么问题？\n试想，默认的Docker，在每个物理机节点上的Docker服务都会分别负责所在节点容器的IP分配，那这样就会导致一个问题，就是不同节点上不同容器可能会获得相同的IP地址。\n例如：\n物理机w1和物理机w2中分别有容器r1和容器r2，那怎么通过容器r1去访问容器r2呢？它们之间是没办法互相访问的。 再者，w1和w2如果都是使用Docker的默认配置的话，那r1和r2的IP默认应该都是172.17.0.2，服务注册的话不都注册相同的IP吗？ 那r1访问r2的时候，会不会很疑惑的发现r2的IP地址和自己一样？\n\n##### Fannel实现 \nflannel 使用etcd存储配置数据和子网分配信息。flannel 启动之后，后台进程首先检索配置和正在使用的子网列表，然后选择一个可用的子网，然后尝试去注册它。\netcd也存储这个每个主机对应的ip。flannel 使用etcd的watch机制监视/coreos.com/network/subnets下面所有元素的变化信息，并且根据它来维护一个路由表。为了\n提高性能，flannel优化了Universal TAP/TUN设备，对TUN和UDP之间的ip分片做了代理。\n","slug":"fannel","published":1,"updated":"2019-08-01T08:44:16.744Z","_id":"cjysf06cy0005nzc7bhqlz9id","comments":1,"layout":"post","photos":[],"link":"","content":"<h5 id=\"Fannel是什么？\"><a href=\"#Fannel是什么？\" class=\"headerlink\" title=\"Fannel是什么？\"></a>Fannel是什么？</h5><p>Fannel是使用UDP实现的一种覆盖网络(Overlay)，即表示运行在一个网上的网。并不依靠IP地址来传递信息，而是采用一种映射机制，把IP地址和identifiers来做映射来资源定位。也就是将TCP数据包装在另一种网络包里面进行路由转发和通信。<br><a id=\"more\"></a></p>\n<h5 id=\"Fannel的运用场景是什么？\"><a href=\"#Fannel的运用场景是什么？\" class=\"headerlink\" title=\"Fannel的运用场景是什么？\"></a>Fannel的运用场景是什么？</h5><p>Flannel是CoreOS团队针对Kubernetes设计的一个网络规划服务，它的功能就是让集群中不同节点主机创建的Docker容器都具有全局唯一的虚拟IP, 并且能让他们相互ping通。</p>\n<h5 id=\"Fannel主要解决了什么问题？\"><a href=\"#Fannel主要解决了什么问题？\" class=\"headerlink\" title=\"Fannel主要解决了什么问题？\"></a>Fannel主要解决了什么问题？</h5><p>试想，默认的Docker，在每个物理机节点上的Docker服务都会分别负责所在节点容器的IP分配，那这样就会导致一个问题，就是不同节点上不同容器可能会获得相同的IP地址。<br>例如：<br>物理机w1和物理机w2中分别有容器r1和容器r2，那怎么通过容器r1去访问容器r2呢？它们之间是没办法互相访问的。 再者，w1和w2如果都是使用Docker的默认配置的话，那r1和r2的IP默认应该都是172.17.0.2，服务注册的话不都注册相同的IP吗？ 那r1访问r2的时候，会不会很疑惑的发现r2的IP地址和自己一样？</p>\n<h5 id=\"Fannel实现\"><a href=\"#Fannel实现\" class=\"headerlink\" title=\"Fannel实现\"></a>Fannel实现</h5><p>flannel 使用etcd存储配置数据和子网分配信息。flannel 启动之后，后台进程首先检索配置和正在使用的子网列表，然后选择一个可用的子网，然后尝试去注册它。<br>etcd也存储这个每个主机对应的ip。flannel 使用etcd的watch机制监视/coreos.com/network/subnets下面所有元素的变化信息，并且根据它来维护一个路由表。为了<br>提高性能，flannel优化了Universal TAP/TUN设备，对TUN和UDP之间的ip分片做了代理。</p>\n","excerpt":"<h5 id=\"Fannel是什么？\"><a href=\"#Fannel是什么？\" class=\"headerlink\" title=\"Fannel是什么？\"></a>Fannel是什么？</h5><p>Fannel是使用UDP实现的一种覆盖网络(Overlay)，即表示运行在一个网上的网。并不依靠IP地址来传递信息，而是采用一种映射机制，把IP地址和identifiers来做映射来资源定位。也就是将TCP数据包装在另一种网络包里面进行路由转发和通信。<br>","more":"</p>\n<h5 id=\"Fannel的运用场景是什么？\"><a href=\"#Fannel的运用场景是什么？\" class=\"headerlink\" title=\"Fannel的运用场景是什么？\"></a>Fannel的运用场景是什么？</h5><p>Flannel是CoreOS团队针对Kubernetes设计的一个网络规划服务，它的功能就是让集群中不同节点主机创建的Docker容器都具有全局唯一的虚拟IP, 并且能让他们相互ping通。</p>\n<h5 id=\"Fannel主要解决了什么问题？\"><a href=\"#Fannel主要解决了什么问题？\" class=\"headerlink\" title=\"Fannel主要解决了什么问题？\"></a>Fannel主要解决了什么问题？</h5><p>试想，默认的Docker，在每个物理机节点上的Docker服务都会分别负责所在节点容器的IP分配，那这样就会导致一个问题，就是不同节点上不同容器可能会获得相同的IP地址。<br>例如：<br>物理机w1和物理机w2中分别有容器r1和容器r2，那怎么通过容器r1去访问容器r2呢？它们之间是没办法互相访问的。 再者，w1和w2如果都是使用Docker的默认配置的话，那r1和r2的IP默认应该都是172.17.0.2，服务注册的话不都注册相同的IP吗？ 那r1访问r2的时候，会不会很疑惑的发现r2的IP地址和自己一样？</p>\n<h5 id=\"Fannel实现\"><a href=\"#Fannel实现\" class=\"headerlink\" title=\"Fannel实现\"></a>Fannel实现</h5><p>flannel 使用etcd存储配置数据和子网分配信息。flannel 启动之后，后台进程首先检索配置和正在使用的子网列表，然后选择一个可用的子网，然后尝试去注册它。<br>etcd也存储这个每个主机对应的ip。flannel 使用etcd的watch机制监视/coreos.com/network/subnets下面所有元素的变化信息，并且根据它来维护一个路由表。为了<br>提高性能，flannel优化了Universal TAP/TUN设备，对TUN和UDP之间的ip分片做了代理。</p>"},{"title":"etcd的简介","date":"2018-08-12T16:00:00.000Z","_content":"\n##### etcd是什么？ \netcd是使用go语言开发的一个高可用的分布式key-value数据库, etcd可在分布式系统中共享配置和服务发现，起内部采用Raft协议实现的分布式一致算法。\n<!-- more -->\n\n##### etcd有哪些特性？\n- 简单：基于HTTP+JSON的API\n- 安全：可选的SSL客户认证机制\n- 快读：每个实例支持每秒一千次的操作\n- 可信：使用Raft算法实现了分布式的强一致性\n\n##### etcd有哪些使用场景\n- 配置管理,消息的发布以及订阅\n- 服务注册以及发现\n- 选主\n- 应用调度\n- 分布式队列\n- 分布式锁\n\n> ###### 配置管理，消息的发布以及订阅\n当前我们项目中etcd就是用来做配置管理，我们应用启动的时候会主动的从etcd获取一次配置信息，同时在etcd节点上注册一个watcher并进行等待或者设置回调函数，以后配置如果有更新，etcd都会实时的通知/回调到应用，以此达到获取最新配置信息的目的。\n\n> ###### 服务注册和服务发现\n比如我们可以在etcd中注册以该服务为名称的目录，目录下存储服务可用的IP列表，并且对每一个IP设置TTL，可用的服务列表需要设置心跳，定时的保持在目录中的IP，那我们需要使用服务的时候，只需要去etcd下获取可用的服务节点就行了。\n这种场景下，我们还可以通过watcher对应服务的目录，当目录有变动(节点消失/增加)的时候通知到用户，那么我们其实也就实现了服务集群的监控和健康检查。\n\n> ###### 选主\n主要使用ectd的CAS机制去同时新建同一个节点，创建成功的机器就可以成为leader，其他的为follower\n\n> ###### 应用调度\netcd监控集群的状态，负责维护一份可用的集群列表，通过负载均衡策略或者轮询把请求地址发给应用\n\n> ###### 分布式队列\n\n> ###### 分布式锁\n也是使用etcd的CAS机制，让多个节点同时去创建同一个目录，创建成功的用户可以被认为是获得了锁，另外其他想要获得锁的节点也会被执行，etcd会为每个想要获得锁的节点返回一个当前目录下的最大值，最终，这个目录下会有一份键值列表，这个值的顺序就是整个客户端的时序。\n","source":"_posts/etcd.md","raw":"---\ntitle: etcd的简介\ndate: 2018-08-13\ntags:\n  - Go \n  - golang\n  - etcd \ncategories:\n  - 技术\n---\n\n##### etcd是什么？ \netcd是使用go语言开发的一个高可用的分布式key-value数据库, etcd可在分布式系统中共享配置和服务发现，起内部采用Raft协议实现的分布式一致算法。\n<!-- more -->\n\n##### etcd有哪些特性？\n- 简单：基于HTTP+JSON的API\n- 安全：可选的SSL客户认证机制\n- 快读：每个实例支持每秒一千次的操作\n- 可信：使用Raft算法实现了分布式的强一致性\n\n##### etcd有哪些使用场景\n- 配置管理,消息的发布以及订阅\n- 服务注册以及发现\n- 选主\n- 应用调度\n- 分布式队列\n- 分布式锁\n\n> ###### 配置管理，消息的发布以及订阅\n当前我们项目中etcd就是用来做配置管理，我们应用启动的时候会主动的从etcd获取一次配置信息，同时在etcd节点上注册一个watcher并进行等待或者设置回调函数，以后配置如果有更新，etcd都会实时的通知/回调到应用，以此达到获取最新配置信息的目的。\n\n> ###### 服务注册和服务发现\n比如我们可以在etcd中注册以该服务为名称的目录，目录下存储服务可用的IP列表，并且对每一个IP设置TTL，可用的服务列表需要设置心跳，定时的保持在目录中的IP，那我们需要使用服务的时候，只需要去etcd下获取可用的服务节点就行了。\n这种场景下，我们还可以通过watcher对应服务的目录，当目录有变动(节点消失/增加)的时候通知到用户，那么我们其实也就实现了服务集群的监控和健康检查。\n\n> ###### 选主\n主要使用ectd的CAS机制去同时新建同一个节点，创建成功的机器就可以成为leader，其他的为follower\n\n> ###### 应用调度\netcd监控集群的状态，负责维护一份可用的集群列表，通过负载均衡策略或者轮询把请求地址发给应用\n\n> ###### 分布式队列\n\n> ###### 分布式锁\n也是使用etcd的CAS机制，让多个节点同时去创建同一个目录，创建成功的用户可以被认为是获得了锁，另外其他想要获得锁的节点也会被执行，etcd会为每个想要获得锁的节点返回一个当前目录下的最大值，最终，这个目录下会有一份键值列表，这个值的顺序就是整个客户端的时序。\n","slug":"etcd","published":1,"updated":"2019-08-01T08:41:25.716Z","_id":"cjysf06d40006nzc7udwx54gz","comments":1,"layout":"post","photos":[],"link":"","content":"<h5 id=\"etcd是什么？\"><a href=\"#etcd是什么？\" class=\"headerlink\" title=\"etcd是什么？\"></a>etcd是什么？</h5><p>etcd是使用go语言开发的一个高可用的分布式key-value数据库, etcd可在分布式系统中共享配置和服务发现，起内部采用Raft协议实现的分布式一致算法。<br><a id=\"more\"></a></p>\n<h5 id=\"etcd有哪些特性？\"><a href=\"#etcd有哪些特性？\" class=\"headerlink\" title=\"etcd有哪些特性？\"></a>etcd有哪些特性？</h5><ul>\n<li>简单：基于HTTP+JSON的API</li>\n<li>安全：可选的SSL客户认证机制</li>\n<li>快读：每个实例支持每秒一千次的操作</li>\n<li>可信：使用Raft算法实现了分布式的强一致性</li>\n</ul>\n<h5 id=\"etcd有哪些使用场景\"><a href=\"#etcd有哪些使用场景\" class=\"headerlink\" title=\"etcd有哪些使用场景\"></a>etcd有哪些使用场景</h5><ul>\n<li>配置管理,消息的发布以及订阅</li>\n<li>服务注册以及发现</li>\n<li>选主</li>\n<li>应用调度</li>\n<li>分布式队列</li>\n<li>分布式锁</li>\n</ul>\n<blockquote>\n<h6 id=\"配置管理，消息的发布以及订阅\"><a href=\"#配置管理，消息的发布以及订阅\" class=\"headerlink\" title=\"配置管理，消息的发布以及订阅\"></a>配置管理，消息的发布以及订阅</h6><p>当前我们项目中etcd就是用来做配置管理，我们应用启动的时候会主动的从etcd获取一次配置信息，同时在etcd节点上注册一个watcher并进行等待或者设置回调函数，以后配置如果有更新，etcd都会实时的通知/回调到应用，以此达到获取最新配置信息的目的。</p>\n<h6 id=\"服务注册和服务发现\"><a href=\"#服务注册和服务发现\" class=\"headerlink\" title=\"服务注册和服务发现\"></a>服务注册和服务发现</h6><p>比如我们可以在etcd中注册以该服务为名称的目录，目录下存储服务可用的IP列表，并且对每一个IP设置TTL，可用的服务列表需要设置心跳，定时的保持在目录中的IP，那我们需要使用服务的时候，只需要去etcd下获取可用的服务节点就行了。<br>这种场景下，我们还可以通过watcher对应服务的目录，当目录有变动(节点消失/增加)的时候通知到用户，那么我们其实也就实现了服务集群的监控和健康检查。</p>\n<h6 id=\"选主\"><a href=\"#选主\" class=\"headerlink\" title=\"选主\"></a>选主</h6><p>主要使用ectd的CAS机制去同时新建同一个节点，创建成功的机器就可以成为leader，其他的为follower</p>\n<h6 id=\"应用调度\"><a href=\"#应用调度\" class=\"headerlink\" title=\"应用调度\"></a>应用调度</h6><p>etcd监控集群的状态，负责维护一份可用的集群列表，通过负载均衡策略或者轮询把请求地址发给应用</p>\n<h6 id=\"分布式队列\"><a href=\"#分布式队列\" class=\"headerlink\" title=\"分布式队列\"></a>分布式队列</h6><h6 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h6><p>也是使用etcd的CAS机制，让多个节点同时去创建同一个目录，创建成功的用户可以被认为是获得了锁，另外其他想要获得锁的节点也会被执行，etcd会为每个想要获得锁的节点返回一个当前目录下的最大值，最终，这个目录下会有一份键值列表，这个值的顺序就是整个客户端的时序。</p>\n</blockquote>\n","excerpt":"<h5 id=\"etcd是什么？\"><a href=\"#etcd是什么？\" class=\"headerlink\" title=\"etcd是什么？\"></a>etcd是什么？</h5><p>etcd是使用go语言开发的一个高可用的分布式key-value数据库, etcd可在分布式系统中共享配置和服务发现，起内部采用Raft协议实现的分布式一致算法。<br>","more":"</p>\n<h5 id=\"etcd有哪些特性？\"><a href=\"#etcd有哪些特性？\" class=\"headerlink\" title=\"etcd有哪些特性？\"></a>etcd有哪些特性？</h5><ul>\n<li>简单：基于HTTP+JSON的API</li>\n<li>安全：可选的SSL客户认证机制</li>\n<li>快读：每个实例支持每秒一千次的操作</li>\n<li>可信：使用Raft算法实现了分布式的强一致性</li>\n</ul>\n<h5 id=\"etcd有哪些使用场景\"><a href=\"#etcd有哪些使用场景\" class=\"headerlink\" title=\"etcd有哪些使用场景\"></a>etcd有哪些使用场景</h5><ul>\n<li>配置管理,消息的发布以及订阅</li>\n<li>服务注册以及发现</li>\n<li>选主</li>\n<li>应用调度</li>\n<li>分布式队列</li>\n<li>分布式锁</li>\n</ul>\n<blockquote>\n<h6 id=\"配置管理，消息的发布以及订阅\"><a href=\"#配置管理，消息的发布以及订阅\" class=\"headerlink\" title=\"配置管理，消息的发布以及订阅\"></a>配置管理，消息的发布以及订阅</h6><p>当前我们项目中etcd就是用来做配置管理，我们应用启动的时候会主动的从etcd获取一次配置信息，同时在etcd节点上注册一个watcher并进行等待或者设置回调函数，以后配置如果有更新，etcd都会实时的通知/回调到应用，以此达到获取最新配置信息的目的。</p>\n<h6 id=\"服务注册和服务发现\"><a href=\"#服务注册和服务发现\" class=\"headerlink\" title=\"服务注册和服务发现\"></a>服务注册和服务发现</h6><p>比如我们可以在etcd中注册以该服务为名称的目录，目录下存储服务可用的IP列表，并且对每一个IP设置TTL，可用的服务列表需要设置心跳，定时的保持在目录中的IP，那我们需要使用服务的时候，只需要去etcd下获取可用的服务节点就行了。<br>这种场景下，我们还可以通过watcher对应服务的目录，当目录有变动(节点消失/增加)的时候通知到用户，那么我们其实也就实现了服务集群的监控和健康检查。</p>\n<h6 id=\"选主\"><a href=\"#选主\" class=\"headerlink\" title=\"选主\"></a>选主</h6><p>主要使用ectd的CAS机制去同时新建同一个节点，创建成功的机器就可以成为leader，其他的为follower</p>\n<h6 id=\"应用调度\"><a href=\"#应用调度\" class=\"headerlink\" title=\"应用调度\"></a>应用调度</h6><p>etcd监控集群的状态，负责维护一份可用的集群列表，通过负载均衡策略或者轮询把请求地址发给应用</p>\n<h6 id=\"分布式队列\"><a href=\"#分布式队列\" class=\"headerlink\" title=\"分布式队列\"></a>分布式队列</h6><h6 id=\"分布式锁\"><a href=\"#分布式锁\" class=\"headerlink\" title=\"分布式锁\"></a>分布式锁</h6><p>也是使用etcd的CAS机制，让多个节点同时去创建同一个目录，创建成功的用户可以被认为是获得了锁，另外其他想要获得锁的节点也会被执行，etcd会为每个想要获得锁的节点返回一个当前目录下的最大值，最终，这个目录下会有一份键值列表，这个值的顺序就是整个客户端的时序。</p>\n</blockquote>"},{"title":"golang控制goroutine","date":"2019-02-01T16:00:00.000Z","_content":"golang中的goroutine启动之后，因为不像其他的语言启动线程之后有个句柄可以对线程进行关闭或者其他的操作，所以很不好控制，最近就遇到需要gotoutine关闭重新加载配置的这一项操作。记录下goroutine重启的方案。\n<!-- more -->\n\n##### 如何把当前已经启动的goroutine退出，退出后再另外拉起新的goroutine\n需要说明的是，我这个应用是一个服务型的应用，goroutine拉起之后以一个常驻的线程在服务端, 代码如下：\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nvar (\n    control, close = make(chan int, 1), make(chan int, 1)\n    config         = map[string]string{\n        \"a\": \"a\",\n    }\n)\n\nfunc main() {\n    fmt.Println(\"start...\")\n    dosomething(config)\n    <-close\n}\n\nfunc dosomething(config map[string]string) {\n    go gorou(config)\n}\n\nfunc gorou(config map[string]string) {\n    fmt.Println(\"config...\", config)\n    i := 0\n    for {\n        select {\n        case <-control:\n            fmt.Println(\"restart...\")\n            return\n        default:\n            time.Sleep(1 * time.Second)\n            i++\n            fmt.Println(i)\n            if i >= 3 {\n                control <- 1\n                //update config or do other things\n                args := map[string]string{\n                    \"restart\": \"restart...map\",\n                    \"time\":    time.Now().String(),\n                }\n                dosomething(args)\n            }\n        }\n    }\n}\n```\n\n##### 总结\n在实现这个功能的时候有遇到问题，就是在初始化control的时候`control = make(chan int)`, 这样初始化其实没有问题的，但是在执行到control<-1却挂了，提示：\n```\nstart...\nconfig... map[a:a]\n1\n2\n3\nfatal error: all goroutines are asleep - deadlock!\n\ngoroutine 1 [chan receive]:\nmain.main()\n        /Users/Johnny/go/src/github.com/JohnnyWei188/learn/goroutine_exit3.go:18 +0x94\n\ngoroutine 5 [chan send]:\nmain.gorou(0xc420072180)\n        /Users/Johnny/go/src/github.com/JohnnyWei188/learn/goroutine_exit3.go:38 +0x18d\ncreated by main.dosomething\n        /Users/Johnny/go/src/github.com/JohnnyWei188/learn/goroutine_exit3.go:22 +0x3f\nexit status 2\n```\n原因是因为，初始化control如果没有指定chan的capacity，那么control就是一个无缓冲的阻塞的channel，那么在执行到i=3的时候，写入一个无缓冲的channe后，然后阻塞在这当前这个线程形成死锁，所以，线程在等一个永远不会来的数据，那整个程序就永远等下去了。 这显然是没有结果的，所以主程序就自己杀掉自己，报告出来。\n\n在我们把`control=make(chan int, 1)`之后，问题得到解决，这是因为我们在`control<-1`写入数据的时候，channel因为是有buffer缓冲的，不会操作程序的阻塞，说程序继续往下执行后，在dosomething里面由重新拉起了goroutine，使我们的程序得以继续。那如果后面的代码不能再拉起一个goroutine，那程序是不是一样又会进入死锁呢？\n\n我们可以把\n```\n//args := map[string]string{\n//    \"restart\": \"restart...map\",\n//    \"time\":    time.Now().String(),\n//}\n//dosomething(args)\n```\n这几行代码注释掉进行验证，注释掉后我们在执行程序，发现果然报错了，\n```\nstart...\nconfig... map[a:a]\n1\n2\n3\nrestart...\nfatal error: all goroutines are asleep - deadlock!\n\ngoroutine 1 [chan receive]:\nmain.main()\n        /Users/Johnny/go/src/github.com/JohnnyWei188/learn/goroutine_exit3.go:18 +0x94\nexit status 2\n```\n原因是因为，在return之后，我们的goroutinue就结束了，那main的goroutine认为自己也是在等一个没有结果的channel，所以也主动把自己给close掉了。\n\n","source":"_posts/go-goroutine.md","raw":"---\ntitle: golang控制goroutine\ndate: 2019-02-02\ntags:\n  - Go \n  - golang\ncategories:\n  - 技术\n---\ngolang中的goroutine启动之后，因为不像其他的语言启动线程之后有个句柄可以对线程进行关闭或者其他的操作，所以很不好控制，最近就遇到需要gotoutine关闭重新加载配置的这一项操作。记录下goroutine重启的方案。\n<!-- more -->\n\n##### 如何把当前已经启动的goroutine退出，退出后再另外拉起新的goroutine\n需要说明的是，我这个应用是一个服务型的应用，goroutine拉起之后以一个常驻的线程在服务端, 代码如下：\n```\npackage main\n\nimport (\n    \"fmt\"\n    \"time\"\n)\n\nvar (\n    control, close = make(chan int, 1), make(chan int, 1)\n    config         = map[string]string{\n        \"a\": \"a\",\n    }\n)\n\nfunc main() {\n    fmt.Println(\"start...\")\n    dosomething(config)\n    <-close\n}\n\nfunc dosomething(config map[string]string) {\n    go gorou(config)\n}\n\nfunc gorou(config map[string]string) {\n    fmt.Println(\"config...\", config)\n    i := 0\n    for {\n        select {\n        case <-control:\n            fmt.Println(\"restart...\")\n            return\n        default:\n            time.Sleep(1 * time.Second)\n            i++\n            fmt.Println(i)\n            if i >= 3 {\n                control <- 1\n                //update config or do other things\n                args := map[string]string{\n                    \"restart\": \"restart...map\",\n                    \"time\":    time.Now().String(),\n                }\n                dosomething(args)\n            }\n        }\n    }\n}\n```\n\n##### 总结\n在实现这个功能的时候有遇到问题，就是在初始化control的时候`control = make(chan int)`, 这样初始化其实没有问题的，但是在执行到control<-1却挂了，提示：\n```\nstart...\nconfig... map[a:a]\n1\n2\n3\nfatal error: all goroutines are asleep - deadlock!\n\ngoroutine 1 [chan receive]:\nmain.main()\n        /Users/Johnny/go/src/github.com/JohnnyWei188/learn/goroutine_exit3.go:18 +0x94\n\ngoroutine 5 [chan send]:\nmain.gorou(0xc420072180)\n        /Users/Johnny/go/src/github.com/JohnnyWei188/learn/goroutine_exit3.go:38 +0x18d\ncreated by main.dosomething\n        /Users/Johnny/go/src/github.com/JohnnyWei188/learn/goroutine_exit3.go:22 +0x3f\nexit status 2\n```\n原因是因为，初始化control如果没有指定chan的capacity，那么control就是一个无缓冲的阻塞的channel，那么在执行到i=3的时候，写入一个无缓冲的channe后，然后阻塞在这当前这个线程形成死锁，所以，线程在等一个永远不会来的数据，那整个程序就永远等下去了。 这显然是没有结果的，所以主程序就自己杀掉自己，报告出来。\n\n在我们把`control=make(chan int, 1)`之后，问题得到解决，这是因为我们在`control<-1`写入数据的时候，channel因为是有buffer缓冲的，不会操作程序的阻塞，说程序继续往下执行后，在dosomething里面由重新拉起了goroutine，使我们的程序得以继续。那如果后面的代码不能再拉起一个goroutine，那程序是不是一样又会进入死锁呢？\n\n我们可以把\n```\n//args := map[string]string{\n//    \"restart\": \"restart...map\",\n//    \"time\":    time.Now().String(),\n//}\n//dosomething(args)\n```\n这几行代码注释掉进行验证，注释掉后我们在执行程序，发现果然报错了，\n```\nstart...\nconfig... map[a:a]\n1\n2\n3\nrestart...\nfatal error: all goroutines are asleep - deadlock!\n\ngoroutine 1 [chan receive]:\nmain.main()\n        /Users/Johnny/go/src/github.com/JohnnyWei188/learn/goroutine_exit3.go:18 +0x94\nexit status 2\n```\n原因是因为，在return之后，我们的goroutinue就结束了，那main的goroutine认为自己也是在等一个没有结果的channel，所以也主动把自己给close掉了。\n\n","slug":"go-goroutine","published":1,"updated":"2019-08-01T08:42:06.077Z","_id":"cjysf06d60007nzc7ydrej0zj","comments":1,"layout":"post","photos":[],"link":"","content":"<p>golang中的goroutine启动之后，因为不像其他的语言启动线程之后有个句柄可以对线程进行关闭或者其他的操作，所以很不好控制，最近就遇到需要gotoutine关闭重新加载配置的这一项操作。记录下goroutine重启的方案。<br><a id=\"more\"></a></p>\n<h5 id=\"如何把当前已经启动的goroutine退出，退出后再另外拉起新的goroutine\"><a href=\"#如何把当前已经启动的goroutine退出，退出后再另外拉起新的goroutine\" class=\"headerlink\" title=\"如何把当前已经启动的goroutine退出，退出后再另外拉起新的goroutine\"></a>如何把当前已经启动的goroutine退出，退出后再另外拉起新的goroutine</h5><p>需要说明的是，我这个应用是一个服务型的应用，goroutine拉起之后以一个常驻的线程在服务端, 代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">package main</div><div class=\"line\"></div><div class=\"line\">import (</div><div class=\"line\">    &quot;fmt&quot;</div><div class=\"line\">    &quot;time&quot;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">var (</div><div class=\"line\">    control, close = make(chan int, 1), make(chan int, 1)</div><div class=\"line\">    config         = map[string]string&#123;</div><div class=\"line\">        &quot;a&quot;: &quot;a&quot;,</div><div class=\"line\">    &#125;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">func main() &#123;</div><div class=\"line\">    fmt.Println(&quot;start...&quot;)</div><div class=\"line\">    dosomething(config)</div><div class=\"line\">    &lt;-close</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">func dosomething(config map[string]string) &#123;</div><div class=\"line\">    go gorou(config)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">func gorou(config map[string]string) &#123;</div><div class=\"line\">    fmt.Println(&quot;config...&quot;, config)</div><div class=\"line\">    i := 0</div><div class=\"line\">    for &#123;</div><div class=\"line\">        select &#123;</div><div class=\"line\">        case &lt;-control:</div><div class=\"line\">            fmt.Println(&quot;restart...&quot;)</div><div class=\"line\">            return</div><div class=\"line\">        default:</div><div class=\"line\">            time.Sleep(1 * time.Second)</div><div class=\"line\">            i++</div><div class=\"line\">            fmt.Println(i)</div><div class=\"line\">            if i &gt;= 3 &#123;</div><div class=\"line\">                control &lt;- 1</div><div class=\"line\">                //update config or do other things</div><div class=\"line\">                args := map[string]string&#123;</div><div class=\"line\">                    &quot;restart&quot;: &quot;restart...map&quot;,</div><div class=\"line\">                    &quot;time&quot;:    time.Now().String(),</div><div class=\"line\">                &#125;</div><div class=\"line\">                dosomething(args)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>在实现这个功能的时候有遇到问题，就是在初始化control的时候<code>control = make(chan int)</code>, 这样初始化其实没有问题的，但是在执行到control&lt;-1却挂了，提示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">start...</div><div class=\"line\">config... map[a:a]</div><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">fatal error: all goroutines are asleep - deadlock!</div><div class=\"line\"></div><div class=\"line\">goroutine 1 [chan receive]:</div><div class=\"line\">main.main()</div><div class=\"line\">        /Users/Johnny/go/src/github.com/JohnnyWei188/learn/goroutine_exit3.go:18 +0x94</div><div class=\"line\"></div><div class=\"line\">goroutine 5 [chan send]:</div><div class=\"line\">main.gorou(0xc420072180)</div><div class=\"line\">        /Users/Johnny/go/src/github.com/JohnnyWei188/learn/goroutine_exit3.go:38 +0x18d</div><div class=\"line\">created by main.dosomething</div><div class=\"line\">        /Users/Johnny/go/src/github.com/JohnnyWei188/learn/goroutine_exit3.go:22 +0x3f</div><div class=\"line\">exit status 2</div></pre></td></tr></table></figure></p>\n<p>原因是因为，初始化control如果没有指定chan的capacity，那么control就是一个无缓冲的阻塞的channel，那么在执行到i=3的时候，写入一个无缓冲的channe后，然后阻塞在这当前这个线程形成死锁，所以，线程在等一个永远不会来的数据，那整个程序就永远等下去了。 这显然是没有结果的，所以主程序就自己杀掉自己，报告出来。</p>\n<p>在我们把<code>control=make(chan int, 1)</code>之后，问题得到解决，这是因为我们在<code>control&lt;-1</code>写入数据的时候，channel因为是有buffer缓冲的，不会操作程序的阻塞，说程序继续往下执行后，在dosomething里面由重新拉起了goroutine，使我们的程序得以继续。那如果后面的代码不能再拉起一个goroutine，那程序是不是一样又会进入死锁呢？</p>\n<p>我们可以把<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//args := map[string]string&#123;</div><div class=\"line\">//    &quot;restart&quot;: &quot;restart...map&quot;,</div><div class=\"line\">//    &quot;time&quot;:    time.Now().String(),</div><div class=\"line\">//&#125;</div><div class=\"line\">//dosomething(args)</div></pre></td></tr></table></figure></p>\n<p>这几行代码注释掉进行验证，注释掉后我们在执行程序，发现果然报错了，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">start...</div><div class=\"line\">config... map[a:a]</div><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">restart...</div><div class=\"line\">fatal error: all goroutines are asleep - deadlock!</div><div class=\"line\"></div><div class=\"line\">goroutine 1 [chan receive]:</div><div class=\"line\">main.main()</div><div class=\"line\">        /Users/Johnny/go/src/github.com/JohnnyWei188/learn/goroutine_exit3.go:18 +0x94</div><div class=\"line\">exit status 2</div></pre></td></tr></table></figure></p>\n<p>原因是因为，在return之后，我们的goroutinue就结束了，那main的goroutine认为自己也是在等一个没有结果的channel，所以也主动把自己给close掉了。</p>\n","excerpt":"<p>golang中的goroutine启动之后，因为不像其他的语言启动线程之后有个句柄可以对线程进行关闭或者其他的操作，所以很不好控制，最近就遇到需要gotoutine关闭重新加载配置的这一项操作。记录下goroutine重启的方案。<br>","more":"</p>\n<h5 id=\"如何把当前已经启动的goroutine退出，退出后再另外拉起新的goroutine\"><a href=\"#如何把当前已经启动的goroutine退出，退出后再另外拉起新的goroutine\" class=\"headerlink\" title=\"如何把当前已经启动的goroutine退出，退出后再另外拉起新的goroutine\"></a>如何把当前已经启动的goroutine退出，退出后再另外拉起新的goroutine</h5><p>需要说明的是，我这个应用是一个服务型的应用，goroutine拉起之后以一个常驻的线程在服务端, 代码如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div></pre></td><td class=\"code\"><pre><div class=\"line\">package main</div><div class=\"line\"></div><div class=\"line\">import (</div><div class=\"line\">    &quot;fmt&quot;</div><div class=\"line\">    &quot;time&quot;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">var (</div><div class=\"line\">    control, close = make(chan int, 1), make(chan int, 1)</div><div class=\"line\">    config         = map[string]string&#123;</div><div class=\"line\">        &quot;a&quot;: &quot;a&quot;,</div><div class=\"line\">    &#125;</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">func main() &#123;</div><div class=\"line\">    fmt.Println(&quot;start...&quot;)</div><div class=\"line\">    dosomething(config)</div><div class=\"line\">    &lt;-close</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">func dosomething(config map[string]string) &#123;</div><div class=\"line\">    go gorou(config)</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">func gorou(config map[string]string) &#123;</div><div class=\"line\">    fmt.Println(&quot;config...&quot;, config)</div><div class=\"line\">    i := 0</div><div class=\"line\">    for &#123;</div><div class=\"line\">        select &#123;</div><div class=\"line\">        case &lt;-control:</div><div class=\"line\">            fmt.Println(&quot;restart...&quot;)</div><div class=\"line\">            return</div><div class=\"line\">        default:</div><div class=\"line\">            time.Sleep(1 * time.Second)</div><div class=\"line\">            i++</div><div class=\"line\">            fmt.Println(i)</div><div class=\"line\">            if i &gt;= 3 &#123;</div><div class=\"line\">                control &lt;- 1</div><div class=\"line\">                //update config or do other things</div><div class=\"line\">                args := map[string]string&#123;</div><div class=\"line\">                    &quot;restart&quot;: &quot;restart...map&quot;,</div><div class=\"line\">                    &quot;time&quot;:    time.Now().String(),</div><div class=\"line\">                &#125;</div><div class=\"line\">                dosomething(args)</div><div class=\"line\">            &#125;</div><div class=\"line\">        &#125;</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<h5 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h5><p>在实现这个功能的时候有遇到问题，就是在初始化control的时候<code>control = make(chan int)</code>, 这样初始化其实没有问题的，但是在执行到control&lt;-1却挂了，提示：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div></pre></td><td class=\"code\"><pre><div class=\"line\">start...</div><div class=\"line\">config... map[a:a]</div><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">fatal error: all goroutines are asleep - deadlock!</div><div class=\"line\"></div><div class=\"line\">goroutine 1 [chan receive]:</div><div class=\"line\">main.main()</div><div class=\"line\">        /Users/Johnny/go/src/github.com/JohnnyWei188/learn/goroutine_exit3.go:18 +0x94</div><div class=\"line\"></div><div class=\"line\">goroutine 5 [chan send]:</div><div class=\"line\">main.gorou(0xc420072180)</div><div class=\"line\">        /Users/Johnny/go/src/github.com/JohnnyWei188/learn/goroutine_exit3.go:38 +0x18d</div><div class=\"line\">created by main.dosomething</div><div class=\"line\">        /Users/Johnny/go/src/github.com/JohnnyWei188/learn/goroutine_exit3.go:22 +0x3f</div><div class=\"line\">exit status 2</div></pre></td></tr></table></figure></p>\n<p>原因是因为，初始化control如果没有指定chan的capacity，那么control就是一个无缓冲的阻塞的channel，那么在执行到i=3的时候，写入一个无缓冲的channe后，然后阻塞在这当前这个线程形成死锁，所以，线程在等一个永远不会来的数据，那整个程序就永远等下去了。 这显然是没有结果的，所以主程序就自己杀掉自己，报告出来。</p>\n<p>在我们把<code>control=make(chan int, 1)</code>之后，问题得到解决，这是因为我们在<code>control&lt;-1</code>写入数据的时候，channel因为是有buffer缓冲的，不会操作程序的阻塞，说程序继续往下执行后，在dosomething里面由重新拉起了goroutine，使我们的程序得以继续。那如果后面的代码不能再拉起一个goroutine，那程序是不是一样又会进入死锁呢？</p>\n<p>我们可以把<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">//args := map[string]string&#123;</div><div class=\"line\">//    &quot;restart&quot;: &quot;restart...map&quot;,</div><div class=\"line\">//    &quot;time&quot;:    time.Now().String(),</div><div class=\"line\">//&#125;</div><div class=\"line\">//dosomething(args)</div></pre></td></tr></table></figure></p>\n<p>这几行代码注释掉进行验证，注释掉后我们在执行程序，发现果然报错了，<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div></pre></td><td class=\"code\"><pre><div class=\"line\">start...</div><div class=\"line\">config... map[a:a]</div><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">restart...</div><div class=\"line\">fatal error: all goroutines are asleep - deadlock!</div><div class=\"line\"></div><div class=\"line\">goroutine 1 [chan receive]:</div><div class=\"line\">main.main()</div><div class=\"line\">        /Users/Johnny/go/src/github.com/JohnnyWei188/learn/goroutine_exit3.go:18 +0x94</div><div class=\"line\">exit status 2</div></pre></td></tr></table></figure></p>\n<p>原因是因为，在return之后，我们的goroutinue就结束了，那main的goroutine认为自己也是在等一个没有结果的channel，所以也主动把自己给close掉了。</p>"},{"title":"使用go pprof对程序进行性能分析","date":"2019-03-14T16:00:00.000Z","_content":"写了个一个go的基础组件给团队使用,主要功能是watch到kubernetes中集群中service的状态，针对service对应的pods的变化为对应的pod授权访问到MySQL服务，服务上线后没几天发现出现了CPU使用非常高的情况，所以使用了pprof对整个程序进行了分析。\n<!--more-->\n\n贴个图片看下,从图中我们可以看到这个程序占用的CPU非常的高，通过strace跟踪进程也没发现异常，进程是处于wait的状态.\n{% asset_img cpu.png cpu profile %}\n所以这里通过Go pprof分析下到底是在哪里比较耗时。\n\n在分析之前，对于一个go程序而已，我们比较关注的是哪些性能数据呢？我想无非有下面这些\n- CPU profile, 报告程序的 CPU 使用情况，按照一定频率去采集应用程序在 CPU 和寄存器上面的数据\n- Memory Profile（Heap Profile）：报告程序的内存使用情况\n- Block Profiling：报告 goroutines 不在运行状态的情况，可以用来分析和查找死锁等性能瓶颈\n- Goroutine Profiling：报告 goroutines 的使用情况，有哪些 goroutine，它们的调用关系是怎样的 \n\n#### pprof是什么\npprof其实存在与go语言的2个包中，`net/http/pprof`和`runtime/pprof`。\n其中:\n- `net/http/pprof`是通过提供了一个http的server在应用运行时收集应用画像数据的一个可视化工具。\n- `runtime/pprof`则是在运行时直接收集应用画像数据的一个可视化工具。\n\n所以，如果你的应用程序是一个常驻的服务的话，需要使用`net/http/pprof`包，而如果你的应用程序是一个工具型的应用的话，则可以使用`runtime/pprof`包。\n\n#### 服务型程序pprof的使用\n首先在我们程序里引入\n```\nimport _ \"net/http/pprof\"\n```\n然后再main函数里加入\n```\ngo func() {\n    log.Println(http.ListenAndServe(\"localhost:6060\", nil))\n}()\n```\n这时候，我们就可以使用`http://localhost:6060/debug/pprof`来浏览我们的一些性能数据，如下:\n```\n/debug/pprof/\n\nprofiles:\n0    block\n31   goroutine\n53   heap\n0    mutex\n10   threadcreate\n\nfull goroutine stack dump\n```\n通过这个页面，我们可以点击上面的子连接，进入到以下的一些子页面\n- /debug/pprof/profile：访问这个链接会自动进行 CPU profiling，持续 30s，并生成一个文件供下载\n- /debug/pprof/heap： Memory Profiling 的路径，访问这个链接会得到一个内存 Profiling 结果的文件\n- /debug/pprof/block：block Profiling 的路径\n- /debug/pprof/goroutines：运行的 goroutines 列表，以及调用关系\n\n#### 应用型程序pprof的使用\n首先在程序里引入\n```\nimport \"runtime/pprof\"\n```\n然后在main函数中加入\n```\nvar cpuprofile = flag.String(\"cpuprofile\", \"\", \"write cpu profile to `file`\")\nvar memprofile = flag.String(\"memprofile\", \"\", \"write memory profile to `file`\")\n\nfunc main() {\n    flag.Parse()\n    if *cpuprofile != \"\" {\n        f, err := os.Create(*cpuprofile)\n        if err != nil {\n            log.Fatal(\"could not create CPU profile: \", err)\n        }\n        if err := pprof.StartCPUProfile(f); err != nil {\n            log.Fatal(\"could not start CPU profile: \", err)\n        }\n        defer pprof.StopCPUProfile()\n    }\n\n    // ... rest of the program ...\n\n    if *memprofile != \"\" {\n        f, err := os.Create(*memprofile)\n        if err != nil {\n            log.Fatal(\"could not create memory profile: \", err)\n        }\n        runtime.GC() // get up-to-date statistics\n        if err := pprof.WriteHeapProfile(f); err != nil {\n            log.Fatal(\"could not write memory profile: \", err)\n        }\n        f.Close()\n    }\n}\n```\n其实是runtime中的pprof已经为我们提供了收集CPU数据和内存数据的接口，我们只是需要在程序运行的时候，把数据写入到文件中就可以\n\n#### go tool pprof命令\n上面说的收集到的数据写入到文件中，我们可以使用go pprof tool来查看文件里面的数据。\n\n###### 在服务型应用中，我们可以使用\n```\ngo tool pprof http://localhost:6060/debug/pprof/profile\n```\n来获取CPU的性能数据，或者\n```\ngo tool pprof http://localhost:6060/debug/pprof/profile\n```\n来或者内存的性能数据。当然还有其他，可以参考文档，这里我们以profile CPU数据为例。\n```\ngo tool pprof http://localhost:6060/debug/pprof/profile\nFetching profile over HTTP from http://localhost:6060/debug/pprof/profile\nSaved profile in /Users/Johnny/pprof/pprof.samples.cpu.003.pb.gz\nType: cpu\nTime: Jul 25, 2018 at 3:09pm (CST)\nDuration: 30.11s, Total samples = 48.32s (160.49%)\nEntering interactive mode (type \"help\" for commands, \"o\" for options)\n(pprof) top10\n      flat  flat%   sum%        cum   cum%\n    8300ms 17.18% 17.18%     8300ms 17.18%  runtime.mach_semaphore_signal /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s\n    8000ms 16.56% 33.73%     8000ms 16.56%  runtime.mach_semaphore_wait /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s\n    7860ms 16.27% 50.00%     7860ms 16.27%  runtime.mach_semaphore_timedwait /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s\n    7850ms 16.25% 66.25%     7850ms 16.25%  runtime.kevent /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s\n    2850ms  5.90% 72.14%     4970ms 10.29%  runtime.scanobject /usr/local/Cellar/go/1.9.2/libexec/src/runtime/mgcmark.go\n    1610ms  3.33% 75.48%     1610ms  3.33%  runtime.memmove /usr/local/Cellar/go/1.9.2/libexec/src/runtime/memmove_amd64.s\n     910ms  1.88% 77.36%      910ms  1.88%  runtime.usleep /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s\n     810ms  1.68% 79.04%      910ms  1.88%  runtime.heapBitsForObject /usr/local/Cellar/go/1.9.2/libexec/src/runtime/mbitmap.go\n     720ms  1.49% 80.53%      810ms  1.68%  runtime.heapBitsSetType /usr/local/Cellar/go/1.9.2/libexec/src/runtime/mbitmap.go\n     590ms  1.22% 81.75%      590ms  1.22%  runtime.memclrNoHeapPointers /usr/local/Cellar/go/1.9.2/libexec/src/runtime/memclr_amd64.s\n```\n使用`topN`命令，我们可以列出前面N条比较耗费CPU的数据，上面我们看到是直接通过http的接口实时的访问数据，也可以通过下载保存好的文件查看里面的数据，比如：\n```\ngo tool pprof ./main ~Johnny/pprof/pprof.samples.cpu.003.pb.gz\nFile: main\nType: cpu\nTime: Jul 25, 2018 at 3:09pm (CST)\nDuration: 30.11s, Total samples = 48.32s (160.49%)\nEntering interactive mode (type \"help\" for commands, \"o\" for options)\n(pprof) top10\n      flat  flat%   sum%        cum   cum%\n    8300ms 17.18% 17.18%     8300ms 17.18%  runtime.mach_semaphore_signal /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s\n    8000ms 16.56% 33.73%     8000ms 16.56%  runtime.mach_semaphore_wait /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s\n    7860ms 16.27% 50.00%     7860ms 16.27%  runtime.mach_semaphore_timedwait /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s\n    7850ms 16.25% 66.25%     7850ms 16.25%  runtime.kevent /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s\n    2850ms  5.90% 72.14%     4970ms 10.29%  runtime.scanobject /usr/local/Cellar/go/1.9.2/libexec/src/runtime/mgcmark.go\n    1610ms  3.33% 75.48%     1610ms  3.33%  runtime.memmove /usr/local/Cellar/go/1.9.2/libexec/src/runtime/memmove_amd64.s\n     910ms  1.88% 77.36%      910ms  1.88%  runtime.usleep /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s\n     810ms  1.68% 79.04%      910ms  1.88%  runtime.heapBitsForObject /usr/local/Cellar/go/1.9.2/libexec/src/runtime/mbitmap.go\n     720ms  1.49% 80.53%      810ms  1.68%  runtime.heapBitsSetType /usr/local/Cellar/go/1.9.2/libexec/src/runtime/mbitmap.go\n     590ms  1.22% 81.75%      590ms  1.22%  runtime.memclrNoHeapPointers /usr/local/Cellar/go/1.9.2/libexec/src/runtime/memclr_amd64.s\n```\n命令格式是：\n```\ngo tool pprof [binary] [source]\n```\nbinary 是应用的二进制文件，用来解析各种符号；source 表示 profile 数据的来源，可以是本地的文件，也可以是 http 地址\n另外，我们可以使用web命令，来生成一个各个方法的调用\n```\n(pprof) web\n```\n生成的图片如下：\n{% asset_img web.jpeg web %}\n\n还可以使用`list`命令，通过正则的方式，查看某个方法的具体调用。\n```\n(pprof) list\ncommand list requires an argument\n(pprof) list .WatchPodsBySelector\nTotal: 48.32s\n     240ms     15.68s (flat, cum) 32.45% of Total\n         .          .    210:   watchPods, err := handler.clientset.CoreV1().Pods(namespace).Watch(metav1.ListOptions{LabelSelector: selector})\n         .          .    211:   if err != nil {\n         .          .    212:           xLog.Errorf(\"WatchPodsBySelector watch error: %+v\", err)\n         .          .    213:           return\n         .          .    214:   }\n      10ms       10ms    215:   for {\n         .          .    216:           select {\n      40ms      280ms    217:           case wPods := <-watchPods.ResultChan():\n      90ms      2.69s    218:                   t, err := json.Marshal(wPods.Object)\n      10ms       10ms    219:                   if err != nil {\n         .          .    220:                           xLog.Errorf(\"WatchPodsBySelector Marshal wPods.Object error: %+v\", err)\n         .          .    221:                           return\n         .          .    222:                   }\n      10ms      7.59s    223:                   var p v1.Pod\n      60ms      5.08s    224:                   err = json.Unmarshal(t, &p)\n         .          .    225:                   if err != nil {\n         .          .    226:                           xLog.Errorf(\"WatchPodsBySelector Unmarshal wPods.Object error: %+v\", err)\n         .          .    227:                           return\n         .          .    228:                   }\n         .          .    229:                   switch wPods.Type {\n```\n\n#### 结束\n到这里，回到最初的CPU占用过高的问题，发现在watchPodsBySelector中耗时，一直在占用CPU，导致CPU过高，原因是watchPods可能会因为服务器主动的断开导致chan的close。\n\n#### 参考文档\n- https://blog.golang.org/profiling-go-programs\n- https://golang.org/pkg/net/http/pprof/\n- https://golang.org/pkg/runtime/pprof/\n\n","source":"_posts/go-pprof.md","raw":"---\ntitle: 使用go pprof对程序进行性能分析 \ndate : 2019-03-15\ntags:\n  - Docker \n  - Go \ncategories:\n  - 技术\n---\n写了个一个go的基础组件给团队使用,主要功能是watch到kubernetes中集群中service的状态，针对service对应的pods的变化为对应的pod授权访问到MySQL服务，服务上线后没几天发现出现了CPU使用非常高的情况，所以使用了pprof对整个程序进行了分析。\n<!--more-->\n\n贴个图片看下,从图中我们可以看到这个程序占用的CPU非常的高，通过strace跟踪进程也没发现异常，进程是处于wait的状态.\n{% asset_img cpu.png cpu profile %}\n所以这里通过Go pprof分析下到底是在哪里比较耗时。\n\n在分析之前，对于一个go程序而已，我们比较关注的是哪些性能数据呢？我想无非有下面这些\n- CPU profile, 报告程序的 CPU 使用情况，按照一定频率去采集应用程序在 CPU 和寄存器上面的数据\n- Memory Profile（Heap Profile）：报告程序的内存使用情况\n- Block Profiling：报告 goroutines 不在运行状态的情况，可以用来分析和查找死锁等性能瓶颈\n- Goroutine Profiling：报告 goroutines 的使用情况，有哪些 goroutine，它们的调用关系是怎样的 \n\n#### pprof是什么\npprof其实存在与go语言的2个包中，`net/http/pprof`和`runtime/pprof`。\n其中:\n- `net/http/pprof`是通过提供了一个http的server在应用运行时收集应用画像数据的一个可视化工具。\n- `runtime/pprof`则是在运行时直接收集应用画像数据的一个可视化工具。\n\n所以，如果你的应用程序是一个常驻的服务的话，需要使用`net/http/pprof`包，而如果你的应用程序是一个工具型的应用的话，则可以使用`runtime/pprof`包。\n\n#### 服务型程序pprof的使用\n首先在我们程序里引入\n```\nimport _ \"net/http/pprof\"\n```\n然后再main函数里加入\n```\ngo func() {\n    log.Println(http.ListenAndServe(\"localhost:6060\", nil))\n}()\n```\n这时候，我们就可以使用`http://localhost:6060/debug/pprof`来浏览我们的一些性能数据，如下:\n```\n/debug/pprof/\n\nprofiles:\n0    block\n31   goroutine\n53   heap\n0    mutex\n10   threadcreate\n\nfull goroutine stack dump\n```\n通过这个页面，我们可以点击上面的子连接，进入到以下的一些子页面\n- /debug/pprof/profile：访问这个链接会自动进行 CPU profiling，持续 30s，并生成一个文件供下载\n- /debug/pprof/heap： Memory Profiling 的路径，访问这个链接会得到一个内存 Profiling 结果的文件\n- /debug/pprof/block：block Profiling 的路径\n- /debug/pprof/goroutines：运行的 goroutines 列表，以及调用关系\n\n#### 应用型程序pprof的使用\n首先在程序里引入\n```\nimport \"runtime/pprof\"\n```\n然后在main函数中加入\n```\nvar cpuprofile = flag.String(\"cpuprofile\", \"\", \"write cpu profile to `file`\")\nvar memprofile = flag.String(\"memprofile\", \"\", \"write memory profile to `file`\")\n\nfunc main() {\n    flag.Parse()\n    if *cpuprofile != \"\" {\n        f, err := os.Create(*cpuprofile)\n        if err != nil {\n            log.Fatal(\"could not create CPU profile: \", err)\n        }\n        if err := pprof.StartCPUProfile(f); err != nil {\n            log.Fatal(\"could not start CPU profile: \", err)\n        }\n        defer pprof.StopCPUProfile()\n    }\n\n    // ... rest of the program ...\n\n    if *memprofile != \"\" {\n        f, err := os.Create(*memprofile)\n        if err != nil {\n            log.Fatal(\"could not create memory profile: \", err)\n        }\n        runtime.GC() // get up-to-date statistics\n        if err := pprof.WriteHeapProfile(f); err != nil {\n            log.Fatal(\"could not write memory profile: \", err)\n        }\n        f.Close()\n    }\n}\n```\n其实是runtime中的pprof已经为我们提供了收集CPU数据和内存数据的接口，我们只是需要在程序运行的时候，把数据写入到文件中就可以\n\n#### go tool pprof命令\n上面说的收集到的数据写入到文件中，我们可以使用go pprof tool来查看文件里面的数据。\n\n###### 在服务型应用中，我们可以使用\n```\ngo tool pprof http://localhost:6060/debug/pprof/profile\n```\n来获取CPU的性能数据，或者\n```\ngo tool pprof http://localhost:6060/debug/pprof/profile\n```\n来或者内存的性能数据。当然还有其他，可以参考文档，这里我们以profile CPU数据为例。\n```\ngo tool pprof http://localhost:6060/debug/pprof/profile\nFetching profile over HTTP from http://localhost:6060/debug/pprof/profile\nSaved profile in /Users/Johnny/pprof/pprof.samples.cpu.003.pb.gz\nType: cpu\nTime: Jul 25, 2018 at 3:09pm (CST)\nDuration: 30.11s, Total samples = 48.32s (160.49%)\nEntering interactive mode (type \"help\" for commands, \"o\" for options)\n(pprof) top10\n      flat  flat%   sum%        cum   cum%\n    8300ms 17.18% 17.18%     8300ms 17.18%  runtime.mach_semaphore_signal /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s\n    8000ms 16.56% 33.73%     8000ms 16.56%  runtime.mach_semaphore_wait /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s\n    7860ms 16.27% 50.00%     7860ms 16.27%  runtime.mach_semaphore_timedwait /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s\n    7850ms 16.25% 66.25%     7850ms 16.25%  runtime.kevent /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s\n    2850ms  5.90% 72.14%     4970ms 10.29%  runtime.scanobject /usr/local/Cellar/go/1.9.2/libexec/src/runtime/mgcmark.go\n    1610ms  3.33% 75.48%     1610ms  3.33%  runtime.memmove /usr/local/Cellar/go/1.9.2/libexec/src/runtime/memmove_amd64.s\n     910ms  1.88% 77.36%      910ms  1.88%  runtime.usleep /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s\n     810ms  1.68% 79.04%      910ms  1.88%  runtime.heapBitsForObject /usr/local/Cellar/go/1.9.2/libexec/src/runtime/mbitmap.go\n     720ms  1.49% 80.53%      810ms  1.68%  runtime.heapBitsSetType /usr/local/Cellar/go/1.9.2/libexec/src/runtime/mbitmap.go\n     590ms  1.22% 81.75%      590ms  1.22%  runtime.memclrNoHeapPointers /usr/local/Cellar/go/1.9.2/libexec/src/runtime/memclr_amd64.s\n```\n使用`topN`命令，我们可以列出前面N条比较耗费CPU的数据，上面我们看到是直接通过http的接口实时的访问数据，也可以通过下载保存好的文件查看里面的数据，比如：\n```\ngo tool pprof ./main ~Johnny/pprof/pprof.samples.cpu.003.pb.gz\nFile: main\nType: cpu\nTime: Jul 25, 2018 at 3:09pm (CST)\nDuration: 30.11s, Total samples = 48.32s (160.49%)\nEntering interactive mode (type \"help\" for commands, \"o\" for options)\n(pprof) top10\n      flat  flat%   sum%        cum   cum%\n    8300ms 17.18% 17.18%     8300ms 17.18%  runtime.mach_semaphore_signal /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s\n    8000ms 16.56% 33.73%     8000ms 16.56%  runtime.mach_semaphore_wait /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s\n    7860ms 16.27% 50.00%     7860ms 16.27%  runtime.mach_semaphore_timedwait /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s\n    7850ms 16.25% 66.25%     7850ms 16.25%  runtime.kevent /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s\n    2850ms  5.90% 72.14%     4970ms 10.29%  runtime.scanobject /usr/local/Cellar/go/1.9.2/libexec/src/runtime/mgcmark.go\n    1610ms  3.33% 75.48%     1610ms  3.33%  runtime.memmove /usr/local/Cellar/go/1.9.2/libexec/src/runtime/memmove_amd64.s\n     910ms  1.88% 77.36%      910ms  1.88%  runtime.usleep /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s\n     810ms  1.68% 79.04%      910ms  1.88%  runtime.heapBitsForObject /usr/local/Cellar/go/1.9.2/libexec/src/runtime/mbitmap.go\n     720ms  1.49% 80.53%      810ms  1.68%  runtime.heapBitsSetType /usr/local/Cellar/go/1.9.2/libexec/src/runtime/mbitmap.go\n     590ms  1.22% 81.75%      590ms  1.22%  runtime.memclrNoHeapPointers /usr/local/Cellar/go/1.9.2/libexec/src/runtime/memclr_amd64.s\n```\n命令格式是：\n```\ngo tool pprof [binary] [source]\n```\nbinary 是应用的二进制文件，用来解析各种符号；source 表示 profile 数据的来源，可以是本地的文件，也可以是 http 地址\n另外，我们可以使用web命令，来生成一个各个方法的调用\n```\n(pprof) web\n```\n生成的图片如下：\n{% asset_img web.jpeg web %}\n\n还可以使用`list`命令，通过正则的方式，查看某个方法的具体调用。\n```\n(pprof) list\ncommand list requires an argument\n(pprof) list .WatchPodsBySelector\nTotal: 48.32s\n     240ms     15.68s (flat, cum) 32.45% of Total\n         .          .    210:   watchPods, err := handler.clientset.CoreV1().Pods(namespace).Watch(metav1.ListOptions{LabelSelector: selector})\n         .          .    211:   if err != nil {\n         .          .    212:           xLog.Errorf(\"WatchPodsBySelector watch error: %+v\", err)\n         .          .    213:           return\n         .          .    214:   }\n      10ms       10ms    215:   for {\n         .          .    216:           select {\n      40ms      280ms    217:           case wPods := <-watchPods.ResultChan():\n      90ms      2.69s    218:                   t, err := json.Marshal(wPods.Object)\n      10ms       10ms    219:                   if err != nil {\n         .          .    220:                           xLog.Errorf(\"WatchPodsBySelector Marshal wPods.Object error: %+v\", err)\n         .          .    221:                           return\n         .          .    222:                   }\n      10ms      7.59s    223:                   var p v1.Pod\n      60ms      5.08s    224:                   err = json.Unmarshal(t, &p)\n         .          .    225:                   if err != nil {\n         .          .    226:                           xLog.Errorf(\"WatchPodsBySelector Unmarshal wPods.Object error: %+v\", err)\n         .          .    227:                           return\n         .          .    228:                   }\n         .          .    229:                   switch wPods.Type {\n```\n\n#### 结束\n到这里，回到最初的CPU占用过高的问题，发现在watchPodsBySelector中耗时，一直在占用CPU，导致CPU过高，原因是watchPods可能会因为服务器主动的断开导致chan的close。\n\n#### 参考文档\n- https://blog.golang.org/profiling-go-programs\n- https://golang.org/pkg/net/http/pprof/\n- https://golang.org/pkg/runtime/pprof/\n\n","slug":"go-pprof","published":1,"updated":"2019-08-01T08:59:58.583Z","_id":"cjysf06da000anzc7pqldk6px","comments":1,"layout":"post","photos":[],"link":"","content":"<p>写了个一个go的基础组件给团队使用,主要功能是watch到kubernetes中集群中service的状态，针对service对应的pods的变化为对应的pod授权访问到MySQL服务，服务上线后没几天发现出现了CPU使用非常高的情况，所以使用了pprof对整个程序进行了分析。<br><a id=\"more\"></a></p>\n<p>贴个图片看下,从图中我们可以看到这个程序占用的CPU非常的高，通过strace跟踪进程也没发现异常，进程是处于wait的状态.<br><img src=\"/2019/03/15/go-pprof/cpu.png\" alt=\"cpu profile\" title=\"cpu profile\"><br>所以这里通过Go pprof分析下到底是在哪里比较耗时。</p>\n<p>在分析之前，对于一个go程序而已，我们比较关注的是哪些性能数据呢？我想无非有下面这些</p>\n<ul>\n<li>CPU profile, 报告程序的 CPU 使用情况，按照一定频率去采集应用程序在 CPU 和寄存器上面的数据</li>\n<li>Memory Profile（Heap Profile）：报告程序的内存使用情况</li>\n<li>Block Profiling：报告 goroutines 不在运行状态的情况，可以用来分析和查找死锁等性能瓶颈</li>\n<li>Goroutine Profiling：报告 goroutines 的使用情况，有哪些 goroutine，它们的调用关系是怎样的 </li>\n</ul>\n<h4 id=\"pprof是什么\"><a href=\"#pprof是什么\" class=\"headerlink\" title=\"pprof是什么\"></a>pprof是什么</h4><p>pprof其实存在与go语言的2个包中，<code>net/http/pprof</code>和<code>runtime/pprof</code>。<br>其中:</p>\n<ul>\n<li><code>net/http/pprof</code>是通过提供了一个http的server在应用运行时收集应用画像数据的一个可视化工具。</li>\n<li><code>runtime/pprof</code>则是在运行时直接收集应用画像数据的一个可视化工具。</li>\n</ul>\n<p>所以，如果你的应用程序是一个常驻的服务的话，需要使用<code>net/http/pprof</code>包，而如果你的应用程序是一个工具型的应用的话，则可以使用<code>runtime/pprof</code>包。</p>\n<h4 id=\"服务型程序pprof的使用\"><a href=\"#服务型程序pprof的使用\" class=\"headerlink\" title=\"服务型程序pprof的使用\"></a>服务型程序pprof的使用</h4><p>首先在我们程序里引入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">import _ &quot;net/http/pprof&quot;</div></pre></td></tr></table></figure></p>\n<p>然后再main函数里加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">go func() &#123;</div><div class=\"line\">    log.Println(http.ListenAndServe(&quot;localhost:6060&quot;, nil))</div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure></p>\n<p>这时候，我们就可以使用<code>http://localhost:6060/debug/pprof</code>来浏览我们的一些性能数据，如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">/debug/pprof/</div><div class=\"line\"></div><div class=\"line\">profiles:</div><div class=\"line\">0    block</div><div class=\"line\">31   goroutine</div><div class=\"line\">53   heap</div><div class=\"line\">0    mutex</div><div class=\"line\">10   threadcreate</div><div class=\"line\"></div><div class=\"line\">full goroutine stack dump</div></pre></td></tr></table></figure></p>\n<p>通过这个页面，我们可以点击上面的子连接，进入到以下的一些子页面</p>\n<ul>\n<li>/debug/pprof/profile：访问这个链接会自动进行 CPU profiling，持续 30s，并生成一个文件供下载</li>\n<li>/debug/pprof/heap： Memory Profiling 的路径，访问这个链接会得到一个内存 Profiling 结果的文件</li>\n<li>/debug/pprof/block：block Profiling 的路径</li>\n<li>/debug/pprof/goroutines：运行的 goroutines 列表，以及调用关系</li>\n</ul>\n<h4 id=\"应用型程序pprof的使用\"><a href=\"#应用型程序pprof的使用\" class=\"headerlink\" title=\"应用型程序pprof的使用\"></a>应用型程序pprof的使用</h4><p>首先在程序里引入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &quot;runtime/pprof&quot;</div></pre></td></tr></table></figure></p>\n<p>然后在main函数中加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">var cpuprofile = flag.String(&quot;cpuprofile&quot;, &quot;&quot;, &quot;write cpu profile to `file`&quot;)</div><div class=\"line\">var memprofile = flag.String(&quot;memprofile&quot;, &quot;&quot;, &quot;write memory profile to `file`&quot;)</div><div class=\"line\"></div><div class=\"line\">func main() &#123;</div><div class=\"line\">    flag.Parse()</div><div class=\"line\">    if *cpuprofile != &quot;&quot; &#123;</div><div class=\"line\">        f, err := os.Create(*cpuprofile)</div><div class=\"line\">        if err != nil &#123;</div><div class=\"line\">            log.Fatal(&quot;could not create CPU profile: &quot;, err)</div><div class=\"line\">        &#125;</div><div class=\"line\">        if err := pprof.StartCPUProfile(f); err != nil &#123;</div><div class=\"line\">            log.Fatal(&quot;could not start CPU profile: &quot;, err)</div><div class=\"line\">        &#125;</div><div class=\"line\">        defer pprof.StopCPUProfile()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // ... rest of the program ...</div><div class=\"line\"></div><div class=\"line\">    if *memprofile != &quot;&quot; &#123;</div><div class=\"line\">        f, err := os.Create(*memprofile)</div><div class=\"line\">        if err != nil &#123;</div><div class=\"line\">            log.Fatal(&quot;could not create memory profile: &quot;, err)</div><div class=\"line\">        &#125;</div><div class=\"line\">        runtime.GC() // get up-to-date statistics</div><div class=\"line\">        if err := pprof.WriteHeapProfile(f); err != nil &#123;</div><div class=\"line\">            log.Fatal(&quot;could not write memory profile: &quot;, err)</div><div class=\"line\">        &#125;</div><div class=\"line\">        f.Close()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其实是runtime中的pprof已经为我们提供了收集CPU数据和内存数据的接口，我们只是需要在程序运行的时候，把数据写入到文件中就可以</p>\n<h4 id=\"go-tool-pprof命令\"><a href=\"#go-tool-pprof命令\" class=\"headerlink\" title=\"go tool pprof命令\"></a>go tool pprof命令</h4><p>上面说的收集到的数据写入到文件中，我们可以使用go pprof tool来查看文件里面的数据。</p>\n<h6 id=\"在服务型应用中，我们可以使用\"><a href=\"#在服务型应用中，我们可以使用\" class=\"headerlink\" title=\"在服务型应用中，我们可以使用\"></a>在服务型应用中，我们可以使用</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">go tool pprof http://localhost:6060/debug/pprof/profile</div></pre></td></tr></table></figure>\n<p>来获取CPU的性能数据，或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">go tool pprof http://localhost:6060/debug/pprof/profile</div></pre></td></tr></table></figure></p>\n<p>来或者内存的性能数据。当然还有其他，可以参考文档，这里我们以profile CPU数据为例。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">go tool pprof http://localhost:6060/debug/pprof/profile</div><div class=\"line\">Fetching profile over HTTP from http://localhost:6060/debug/pprof/profile</div><div class=\"line\">Saved profile in /Users/Johnny/pprof/pprof.samples.cpu.003.pb.gz</div><div class=\"line\">Type: cpu</div><div class=\"line\">Time: Jul 25, 2018 at 3:09pm (CST)</div><div class=\"line\">Duration: 30.11s, Total samples = 48.32s (160.49%)</div><div class=\"line\">Entering interactive mode (type &quot;help&quot; for commands, &quot;o&quot; for options)</div><div class=\"line\">(pprof) top10</div><div class=\"line\">      flat  flat%   sum%        cum   cum%</div><div class=\"line\">    8300ms 17.18% 17.18%     8300ms 17.18%  runtime.mach_semaphore_signal /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s</div><div class=\"line\">    8000ms 16.56% 33.73%     8000ms 16.56%  runtime.mach_semaphore_wait /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s</div><div class=\"line\">    7860ms 16.27% 50.00%     7860ms 16.27%  runtime.mach_semaphore_timedwait /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s</div><div class=\"line\">    7850ms 16.25% 66.25%     7850ms 16.25%  runtime.kevent /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s</div><div class=\"line\">    2850ms  5.90% 72.14%     4970ms 10.29%  runtime.scanobject /usr/local/Cellar/go/1.9.2/libexec/src/runtime/mgcmark.go</div><div class=\"line\">    1610ms  3.33% 75.48%     1610ms  3.33%  runtime.memmove /usr/local/Cellar/go/1.9.2/libexec/src/runtime/memmove_amd64.s</div><div class=\"line\">     910ms  1.88% 77.36%      910ms  1.88%  runtime.usleep /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s</div><div class=\"line\">     810ms  1.68% 79.04%      910ms  1.88%  runtime.heapBitsForObject /usr/local/Cellar/go/1.9.2/libexec/src/runtime/mbitmap.go</div><div class=\"line\">     720ms  1.49% 80.53%      810ms  1.68%  runtime.heapBitsSetType /usr/local/Cellar/go/1.9.2/libexec/src/runtime/mbitmap.go</div><div class=\"line\">     590ms  1.22% 81.75%      590ms  1.22%  runtime.memclrNoHeapPointers /usr/local/Cellar/go/1.9.2/libexec/src/runtime/memclr_amd64.s</div></pre></td></tr></table></figure></p>\n<p>使用<code>topN</code>命令，我们可以列出前面N条比较耗费CPU的数据，上面我们看到是直接通过http的接口实时的访问数据，也可以通过下载保存好的文件查看里面的数据，比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">go tool pprof ./main ~Johnny/pprof/pprof.samples.cpu.003.pb.gz</div><div class=\"line\">File: main</div><div class=\"line\">Type: cpu</div><div class=\"line\">Time: Jul 25, 2018 at 3:09pm (CST)</div><div class=\"line\">Duration: 30.11s, Total samples = 48.32s (160.49%)</div><div class=\"line\">Entering interactive mode (type &quot;help&quot; for commands, &quot;o&quot; for options)</div><div class=\"line\">(pprof) top10</div><div class=\"line\">      flat  flat%   sum%        cum   cum%</div><div class=\"line\">    8300ms 17.18% 17.18%     8300ms 17.18%  runtime.mach_semaphore_signal /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s</div><div class=\"line\">    8000ms 16.56% 33.73%     8000ms 16.56%  runtime.mach_semaphore_wait /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s</div><div class=\"line\">    7860ms 16.27% 50.00%     7860ms 16.27%  runtime.mach_semaphore_timedwait /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s</div><div class=\"line\">    7850ms 16.25% 66.25%     7850ms 16.25%  runtime.kevent /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s</div><div class=\"line\">    2850ms  5.90% 72.14%     4970ms 10.29%  runtime.scanobject /usr/local/Cellar/go/1.9.2/libexec/src/runtime/mgcmark.go</div><div class=\"line\">    1610ms  3.33% 75.48%     1610ms  3.33%  runtime.memmove /usr/local/Cellar/go/1.9.2/libexec/src/runtime/memmove_amd64.s</div><div class=\"line\">     910ms  1.88% 77.36%      910ms  1.88%  runtime.usleep /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s</div><div class=\"line\">     810ms  1.68% 79.04%      910ms  1.88%  runtime.heapBitsForObject /usr/local/Cellar/go/1.9.2/libexec/src/runtime/mbitmap.go</div><div class=\"line\">     720ms  1.49% 80.53%      810ms  1.68%  runtime.heapBitsSetType /usr/local/Cellar/go/1.9.2/libexec/src/runtime/mbitmap.go</div><div class=\"line\">     590ms  1.22% 81.75%      590ms  1.22%  runtime.memclrNoHeapPointers /usr/local/Cellar/go/1.9.2/libexec/src/runtime/memclr_amd64.s</div></pre></td></tr></table></figure></p>\n<p>命令格式是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">go tool pprof [binary] [source]</div></pre></td></tr></table></figure></p>\n<p>binary 是应用的二进制文件，用来解析各种符号；source 表示 profile 数据的来源，可以是本地的文件，也可以是 http 地址<br>另外，我们可以使用web命令，来生成一个各个方法的调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(pprof) web</div></pre></td></tr></table></figure></p>\n<p>生成的图片如下：<br><img src=\"/2019/03/15/go-pprof/web.jpeg\" alt=\"web\" title=\"web\"></p>\n<p>还可以使用<code>list</code>命令，通过正则的方式，查看某个方法的具体调用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">(pprof) list</div><div class=\"line\">command list requires an argument</div><div class=\"line\">(pprof) list .WatchPodsBySelector</div><div class=\"line\">Total: 48.32s</div><div class=\"line\">     240ms     15.68s (flat, cum) 32.45% of Total</div><div class=\"line\">         .          .    210:   watchPods, err := handler.clientset.CoreV1().Pods(namespace).Watch(metav1.ListOptions&#123;LabelSelector: selector&#125;)</div><div class=\"line\">         .          .    211:   if err != nil &#123;</div><div class=\"line\">         .          .    212:           xLog.Errorf(&quot;WatchPodsBySelector watch error: %+v&quot;, err)</div><div class=\"line\">         .          .    213:           return</div><div class=\"line\">         .          .    214:   &#125;</div><div class=\"line\">      10ms       10ms    215:   for &#123;</div><div class=\"line\">         .          .    216:           select &#123;</div><div class=\"line\">      40ms      280ms    217:           case wPods := &lt;-watchPods.ResultChan():</div><div class=\"line\">      90ms      2.69s    218:                   t, err := json.Marshal(wPods.Object)</div><div class=\"line\">      10ms       10ms    219:                   if err != nil &#123;</div><div class=\"line\">         .          .    220:                           xLog.Errorf(&quot;WatchPodsBySelector Marshal wPods.Object error: %+v&quot;, err)</div><div class=\"line\">         .          .    221:                           return</div><div class=\"line\">         .          .    222:                   &#125;</div><div class=\"line\">      10ms      7.59s    223:                   var p v1.Pod</div><div class=\"line\">      60ms      5.08s    224:                   err = json.Unmarshal(t, &amp;p)</div><div class=\"line\">         .          .    225:                   if err != nil &#123;</div><div class=\"line\">         .          .    226:                           xLog.Errorf(&quot;WatchPodsBySelector Unmarshal wPods.Object error: %+v&quot;, err)</div><div class=\"line\">         .          .    227:                           return</div><div class=\"line\">         .          .    228:                   &#125;</div><div class=\"line\">         .          .    229:                   switch wPods.Type &#123;</div></pre></td></tr></table></figure></p>\n<h4 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h4><p>到这里，回到最初的CPU占用过高的问题，发现在watchPodsBySelector中耗时，一直在占用CPU，导致CPU过高，原因是watchPods可能会因为服务器主动的断开导致chan的close。</p>\n<h4 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h4><ul>\n<li><a href=\"https://blog.golang.org/profiling-go-programs\" target=\"_blank\" rel=\"external\">https://blog.golang.org/profiling-go-programs</a></li>\n<li><a href=\"https://golang.org/pkg/net/http/pprof/\" target=\"_blank\" rel=\"external\">https://golang.org/pkg/net/http/pprof/</a></li>\n<li><a href=\"https://golang.org/pkg/runtime/pprof/\" target=\"_blank\" rel=\"external\">https://golang.org/pkg/runtime/pprof/</a></li>\n</ul>\n","excerpt":"<p>写了个一个go的基础组件给团队使用,主要功能是watch到kubernetes中集群中service的状态，针对service对应的pods的变化为对应的pod授权访问到MySQL服务，服务上线后没几天发现出现了CPU使用非常高的情况，所以使用了pprof对整个程序进行了分析。<br>","more":"</p>\n<p>贴个图片看下,从图中我们可以看到这个程序占用的CPU非常的高，通过strace跟踪进程也没发现异常，进程是处于wait的状态.<br><img src=\"/2019/03/15/go-pprof/cpu.png\" alt=\"cpu profile\" title=\"cpu profile\"><br>所以这里通过Go pprof分析下到底是在哪里比较耗时。</p>\n<p>在分析之前，对于一个go程序而已，我们比较关注的是哪些性能数据呢？我想无非有下面这些</p>\n<ul>\n<li>CPU profile, 报告程序的 CPU 使用情况，按照一定频率去采集应用程序在 CPU 和寄存器上面的数据</li>\n<li>Memory Profile（Heap Profile）：报告程序的内存使用情况</li>\n<li>Block Profiling：报告 goroutines 不在运行状态的情况，可以用来分析和查找死锁等性能瓶颈</li>\n<li>Goroutine Profiling：报告 goroutines 的使用情况，有哪些 goroutine，它们的调用关系是怎样的 </li>\n</ul>\n<h4 id=\"pprof是什么\"><a href=\"#pprof是什么\" class=\"headerlink\" title=\"pprof是什么\"></a>pprof是什么</h4><p>pprof其实存在与go语言的2个包中，<code>net/http/pprof</code>和<code>runtime/pprof</code>。<br>其中:</p>\n<ul>\n<li><code>net/http/pprof</code>是通过提供了一个http的server在应用运行时收集应用画像数据的一个可视化工具。</li>\n<li><code>runtime/pprof</code>则是在运行时直接收集应用画像数据的一个可视化工具。</li>\n</ul>\n<p>所以，如果你的应用程序是一个常驻的服务的话，需要使用<code>net/http/pprof</code>包，而如果你的应用程序是一个工具型的应用的话，则可以使用<code>runtime/pprof</code>包。</p>\n<h4 id=\"服务型程序pprof的使用\"><a href=\"#服务型程序pprof的使用\" class=\"headerlink\" title=\"服务型程序pprof的使用\"></a>服务型程序pprof的使用</h4><p>首先在我们程序里引入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">import _ &quot;net/http/pprof&quot;</div></pre></td></tr></table></figure></p>\n<p>然后再main函数里加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">go func() &#123;</div><div class=\"line\">    log.Println(http.ListenAndServe(&quot;localhost:6060&quot;, nil))</div><div class=\"line\">&#125;()</div></pre></td></tr></table></figure></p>\n<p>这时候，我们就可以使用<code>http://localhost:6060/debug/pprof</code>来浏览我们的一些性能数据，如下:<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div></pre></td><td class=\"code\"><pre><div class=\"line\">/debug/pprof/</div><div class=\"line\"></div><div class=\"line\">profiles:</div><div class=\"line\">0    block</div><div class=\"line\">31   goroutine</div><div class=\"line\">53   heap</div><div class=\"line\">0    mutex</div><div class=\"line\">10   threadcreate</div><div class=\"line\"></div><div class=\"line\">full goroutine stack dump</div></pre></td></tr></table></figure></p>\n<p>通过这个页面，我们可以点击上面的子连接，进入到以下的一些子页面</p>\n<ul>\n<li>/debug/pprof/profile：访问这个链接会自动进行 CPU profiling，持续 30s，并生成一个文件供下载</li>\n<li>/debug/pprof/heap： Memory Profiling 的路径，访问这个链接会得到一个内存 Profiling 结果的文件</li>\n<li>/debug/pprof/block：block Profiling 的路径</li>\n<li>/debug/pprof/goroutines：运行的 goroutines 列表，以及调用关系</li>\n</ul>\n<h4 id=\"应用型程序pprof的使用\"><a href=\"#应用型程序pprof的使用\" class=\"headerlink\" title=\"应用型程序pprof的使用\"></a>应用型程序pprof的使用</h4><p>首先在程序里引入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">import &quot;runtime/pprof&quot;</div></pre></td></tr></table></figure></p>\n<p>然后在main函数中加入<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div></pre></td><td class=\"code\"><pre><div class=\"line\">var cpuprofile = flag.String(&quot;cpuprofile&quot;, &quot;&quot;, &quot;write cpu profile to `file`&quot;)</div><div class=\"line\">var memprofile = flag.String(&quot;memprofile&quot;, &quot;&quot;, &quot;write memory profile to `file`&quot;)</div><div class=\"line\"></div><div class=\"line\">func main() &#123;</div><div class=\"line\">    flag.Parse()</div><div class=\"line\">    if *cpuprofile != &quot;&quot; &#123;</div><div class=\"line\">        f, err := os.Create(*cpuprofile)</div><div class=\"line\">        if err != nil &#123;</div><div class=\"line\">            log.Fatal(&quot;could not create CPU profile: &quot;, err)</div><div class=\"line\">        &#125;</div><div class=\"line\">        if err := pprof.StartCPUProfile(f); err != nil &#123;</div><div class=\"line\">            log.Fatal(&quot;could not start CPU profile: &quot;, err)</div><div class=\"line\">        &#125;</div><div class=\"line\">        defer pprof.StopCPUProfile()</div><div class=\"line\">    &#125;</div><div class=\"line\"></div><div class=\"line\">    // ... rest of the program ...</div><div class=\"line\"></div><div class=\"line\">    if *memprofile != &quot;&quot; &#123;</div><div class=\"line\">        f, err := os.Create(*memprofile)</div><div class=\"line\">        if err != nil &#123;</div><div class=\"line\">            log.Fatal(&quot;could not create memory profile: &quot;, err)</div><div class=\"line\">        &#125;</div><div class=\"line\">        runtime.GC() // get up-to-date statistics</div><div class=\"line\">        if err := pprof.WriteHeapProfile(f); err != nil &#123;</div><div class=\"line\">            log.Fatal(&quot;could not write memory profile: &quot;, err)</div><div class=\"line\">        &#125;</div><div class=\"line\">        f.Close()</div><div class=\"line\">    &#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>其实是runtime中的pprof已经为我们提供了收集CPU数据和内存数据的接口，我们只是需要在程序运行的时候，把数据写入到文件中就可以</p>\n<h4 id=\"go-tool-pprof命令\"><a href=\"#go-tool-pprof命令\" class=\"headerlink\" title=\"go tool pprof命令\"></a>go tool pprof命令</h4><p>上面说的收集到的数据写入到文件中，我们可以使用go pprof tool来查看文件里面的数据。</p>\n<h6 id=\"在服务型应用中，我们可以使用\"><a href=\"#在服务型应用中，我们可以使用\" class=\"headerlink\" title=\"在服务型应用中，我们可以使用\"></a>在服务型应用中，我们可以使用</h6><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">go tool pprof http://localhost:6060/debug/pprof/profile</div></pre></td></tr></table></figure>\n<p>来获取CPU的性能数据，或者<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">go tool pprof http://localhost:6060/debug/pprof/profile</div></pre></td></tr></table></figure></p>\n<p>来或者内存的性能数据。当然还有其他，可以参考文档，这里我们以profile CPU数据为例。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div></pre></td><td class=\"code\"><pre><div class=\"line\">go tool pprof http://localhost:6060/debug/pprof/profile</div><div class=\"line\">Fetching profile over HTTP from http://localhost:6060/debug/pprof/profile</div><div class=\"line\">Saved profile in /Users/Johnny/pprof/pprof.samples.cpu.003.pb.gz</div><div class=\"line\">Type: cpu</div><div class=\"line\">Time: Jul 25, 2018 at 3:09pm (CST)</div><div class=\"line\">Duration: 30.11s, Total samples = 48.32s (160.49%)</div><div class=\"line\">Entering interactive mode (type &quot;help&quot; for commands, &quot;o&quot; for options)</div><div class=\"line\">(pprof) top10</div><div class=\"line\">      flat  flat%   sum%        cum   cum%</div><div class=\"line\">    8300ms 17.18% 17.18%     8300ms 17.18%  runtime.mach_semaphore_signal /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s</div><div class=\"line\">    8000ms 16.56% 33.73%     8000ms 16.56%  runtime.mach_semaphore_wait /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s</div><div class=\"line\">    7860ms 16.27% 50.00%     7860ms 16.27%  runtime.mach_semaphore_timedwait /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s</div><div class=\"line\">    7850ms 16.25% 66.25%     7850ms 16.25%  runtime.kevent /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s</div><div class=\"line\">    2850ms  5.90% 72.14%     4970ms 10.29%  runtime.scanobject /usr/local/Cellar/go/1.9.2/libexec/src/runtime/mgcmark.go</div><div class=\"line\">    1610ms  3.33% 75.48%     1610ms  3.33%  runtime.memmove /usr/local/Cellar/go/1.9.2/libexec/src/runtime/memmove_amd64.s</div><div class=\"line\">     910ms  1.88% 77.36%      910ms  1.88%  runtime.usleep /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s</div><div class=\"line\">     810ms  1.68% 79.04%      910ms  1.88%  runtime.heapBitsForObject /usr/local/Cellar/go/1.9.2/libexec/src/runtime/mbitmap.go</div><div class=\"line\">     720ms  1.49% 80.53%      810ms  1.68%  runtime.heapBitsSetType /usr/local/Cellar/go/1.9.2/libexec/src/runtime/mbitmap.go</div><div class=\"line\">     590ms  1.22% 81.75%      590ms  1.22%  runtime.memclrNoHeapPointers /usr/local/Cellar/go/1.9.2/libexec/src/runtime/memclr_amd64.s</div></pre></td></tr></table></figure></p>\n<p>使用<code>topN</code>命令，我们可以列出前面N条比较耗费CPU的数据，上面我们看到是直接通过http的接口实时的访问数据，也可以通过下载保存好的文件查看里面的数据，比如：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">go tool pprof ./main ~Johnny/pprof/pprof.samples.cpu.003.pb.gz</div><div class=\"line\">File: main</div><div class=\"line\">Type: cpu</div><div class=\"line\">Time: Jul 25, 2018 at 3:09pm (CST)</div><div class=\"line\">Duration: 30.11s, Total samples = 48.32s (160.49%)</div><div class=\"line\">Entering interactive mode (type &quot;help&quot; for commands, &quot;o&quot; for options)</div><div class=\"line\">(pprof) top10</div><div class=\"line\">      flat  flat%   sum%        cum   cum%</div><div class=\"line\">    8300ms 17.18% 17.18%     8300ms 17.18%  runtime.mach_semaphore_signal /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s</div><div class=\"line\">    8000ms 16.56% 33.73%     8000ms 16.56%  runtime.mach_semaphore_wait /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s</div><div class=\"line\">    7860ms 16.27% 50.00%     7860ms 16.27%  runtime.mach_semaphore_timedwait /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s</div><div class=\"line\">    7850ms 16.25% 66.25%     7850ms 16.25%  runtime.kevent /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s</div><div class=\"line\">    2850ms  5.90% 72.14%     4970ms 10.29%  runtime.scanobject /usr/local/Cellar/go/1.9.2/libexec/src/runtime/mgcmark.go</div><div class=\"line\">    1610ms  3.33% 75.48%     1610ms  3.33%  runtime.memmove /usr/local/Cellar/go/1.9.2/libexec/src/runtime/memmove_amd64.s</div><div class=\"line\">     910ms  1.88% 77.36%      910ms  1.88%  runtime.usleep /usr/local/Cellar/go/1.9.2/libexec/src/runtime/sys_darwin_amd64.s</div><div class=\"line\">     810ms  1.68% 79.04%      910ms  1.88%  runtime.heapBitsForObject /usr/local/Cellar/go/1.9.2/libexec/src/runtime/mbitmap.go</div><div class=\"line\">     720ms  1.49% 80.53%      810ms  1.68%  runtime.heapBitsSetType /usr/local/Cellar/go/1.9.2/libexec/src/runtime/mbitmap.go</div><div class=\"line\">     590ms  1.22% 81.75%      590ms  1.22%  runtime.memclrNoHeapPointers /usr/local/Cellar/go/1.9.2/libexec/src/runtime/memclr_amd64.s</div></pre></td></tr></table></figure></p>\n<p>命令格式是：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">go tool pprof [binary] [source]</div></pre></td></tr></table></figure></p>\n<p>binary 是应用的二进制文件，用来解析各种符号；source 表示 profile 数据的来源，可以是本地的文件，也可以是 http 地址<br>另外，我们可以使用web命令，来生成一个各个方法的调用<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">(pprof) web</div></pre></td></tr></table></figure></p>\n<p>生成的图片如下：<br><img src=\"/2019/03/15/go-pprof/web.jpeg\" alt=\"web\" title=\"web\"></p>\n<p>还可以使用<code>list</code>命令，通过正则的方式，查看某个方法的具体调用。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\">(pprof) list</div><div class=\"line\">command list requires an argument</div><div class=\"line\">(pprof) list .WatchPodsBySelector</div><div class=\"line\">Total: 48.32s</div><div class=\"line\">     240ms     15.68s (flat, cum) 32.45% of Total</div><div class=\"line\">         .          .    210:   watchPods, err := handler.clientset.CoreV1().Pods(namespace).Watch(metav1.ListOptions&#123;LabelSelector: selector&#125;)</div><div class=\"line\">         .          .    211:   if err != nil &#123;</div><div class=\"line\">         .          .    212:           xLog.Errorf(&quot;WatchPodsBySelector watch error: %+v&quot;, err)</div><div class=\"line\">         .          .    213:           return</div><div class=\"line\">         .          .    214:   &#125;</div><div class=\"line\">      10ms       10ms    215:   for &#123;</div><div class=\"line\">         .          .    216:           select &#123;</div><div class=\"line\">      40ms      280ms    217:           case wPods := &lt;-watchPods.ResultChan():</div><div class=\"line\">      90ms      2.69s    218:                   t, err := json.Marshal(wPods.Object)</div><div class=\"line\">      10ms       10ms    219:                   if err != nil &#123;</div><div class=\"line\">         .          .    220:                           xLog.Errorf(&quot;WatchPodsBySelector Marshal wPods.Object error: %+v&quot;, err)</div><div class=\"line\">         .          .    221:                           return</div><div class=\"line\">         .          .    222:                   &#125;</div><div class=\"line\">      10ms      7.59s    223:                   var p v1.Pod</div><div class=\"line\">      60ms      5.08s    224:                   err = json.Unmarshal(t, &amp;p)</div><div class=\"line\">         .          .    225:                   if err != nil &#123;</div><div class=\"line\">         .          .    226:                           xLog.Errorf(&quot;WatchPodsBySelector Unmarshal wPods.Object error: %+v&quot;, err)</div><div class=\"line\">         .          .    227:                           return</div><div class=\"line\">         .          .    228:                   &#125;</div><div class=\"line\">         .          .    229:                   switch wPods.Type &#123;</div></pre></td></tr></table></figure></p>\n<h4 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h4><p>到这里，回到最初的CPU占用过高的问题，发现在watchPodsBySelector中耗时，一直在占用CPU，导致CPU过高，原因是watchPods可能会因为服务器主动的断开导致chan的close。</p>\n<h4 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h4><ul>\n<li><a href=\"https://blog.golang.org/profiling-go-programs\">https://blog.golang.org/profiling-go-programs</a></li>\n<li><a href=\"https://golang.org/pkg/net/http/pprof/\">https://golang.org/pkg/net/http/pprof/</a></li>\n<li><a href=\"https://golang.org/pkg/runtime/pprof/\">https://golang.org/pkg/runtime/pprof/</a></li>\n</ul>"},{"title":"记录一次解决nginx跨域的问题","date":"2019-01-14T16:00:00.000Z","_content":"\n##### CROS是什么？ \nCROS,全称是跨域资源共享 (Cross-origin resource sharing)，它的提出就是为了解决跨域请求的。\n<!--more-->\n\n#### nginx中的一些配置\n```\nadd_header 'Access-Control-Allow-Origin' 'http://demo.csrf.com';\nadd_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS';\nadd_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';\nadd_header 'Access-Control-Expose-Headers' 'X-Custom-Header';\n\nif ($request_method = 'OPTIONS') {\n    return 204;\n}\n```\n\n#### 遇到的一些问题\n- 设置Access-Control-Allow-Origin的时候, 仅仅只写了demo.csrf.com，没有带上http，所有，域名设置有问题\n- 因为客户端请求的时候，有带入一些自定义的头，X-Custom-Header，如果nginx里面如果没有配置Access-Control-Expose-Headers这个参数的话，客户端请求的时候也会报错\n- 其他需要注意的就是Methods，必须包含OPTIONS。为什么呢？ 因为，浏览器在发送请求的时候，有分2种情况: \n- - 第一种: 简单请求。简单请求必须满足2个条件：1) 请求方法只能是HEAD、GET、POST中的一种 2) http header中不能超出一下几种字段: Accept、Accept-language、Content-Language、Last-Event-ID、Content-Type只能包含3种值application/x-www-form-urlencoded、multipart/form-data、text/plain\n- - 第二种: 复杂的请求。就是不满足上面简单请求条件的, 比如，有自定义的http头，或者Content-Type为 json/application的这种，当浏览器发现，这个请求为一个复杂请求的时候，就会发送一个OPTIONS的http method进行探测, 所以，这就解释了为什么必须包含OPTIONS这个方法。在探测的时候，如果服务返回了对应的Access-Control-Expose-Headers、Access-Control-Allow-Origin等，与客户端请求的能够匹配得上，则浏览器判定为整个是一个安全的请求，进行进行真实的POST等请求\n","source":"_posts/nginx-cros.md","raw":"---\ntitle: 记录一次解决nginx跨域的问题 \ndate: 2019-01-15\ntags:\n  - nginx \ncategories:\n  - 技术\n---\n\n##### CROS是什么？ \nCROS,全称是跨域资源共享 (Cross-origin resource sharing)，它的提出就是为了解决跨域请求的。\n<!--more-->\n\n#### nginx中的一些配置\n```\nadd_header 'Access-Control-Allow-Origin' 'http://demo.csrf.com';\nadd_header 'Access-Control-Allow-Methods' 'GET,POST,OPTIONS';\nadd_header 'Access-Control-Allow-Headers' 'DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization';\nadd_header 'Access-Control-Expose-Headers' 'X-Custom-Header';\n\nif ($request_method = 'OPTIONS') {\n    return 204;\n}\n```\n\n#### 遇到的一些问题\n- 设置Access-Control-Allow-Origin的时候, 仅仅只写了demo.csrf.com，没有带上http，所有，域名设置有问题\n- 因为客户端请求的时候，有带入一些自定义的头，X-Custom-Header，如果nginx里面如果没有配置Access-Control-Expose-Headers这个参数的话，客户端请求的时候也会报错\n- 其他需要注意的就是Methods，必须包含OPTIONS。为什么呢？ 因为，浏览器在发送请求的时候，有分2种情况: \n- - 第一种: 简单请求。简单请求必须满足2个条件：1) 请求方法只能是HEAD、GET、POST中的一种 2) http header中不能超出一下几种字段: Accept、Accept-language、Content-Language、Last-Event-ID、Content-Type只能包含3种值application/x-www-form-urlencoded、multipart/form-data、text/plain\n- - 第二种: 复杂的请求。就是不满足上面简单请求条件的, 比如，有自定义的http头，或者Content-Type为 json/application的这种，当浏览器发现，这个请求为一个复杂请求的时候，就会发送一个OPTIONS的http method进行探测, 所以，这就解释了为什么必须包含OPTIONS这个方法。在探测的时候，如果服务返回了对应的Access-Control-Expose-Headers、Access-Control-Allow-Origin等，与客户端请求的能够匹配得上，则浏览器判定为整个是一个安全的请求，进行进行真实的POST等请求\n","slug":"nginx-cros","published":1,"updated":"2019-08-01T08:47:06.382Z","_id":"cjysf06dd000cnzc7xr9xl6jz","comments":1,"layout":"post","photos":[],"link":"","content":"<h5 id=\"CROS是什么？\"><a href=\"#CROS是什么？\" class=\"headerlink\" title=\"CROS是什么？\"></a>CROS是什么？</h5><p>CROS,全称是跨域资源共享 (Cross-origin resource sharing)，它的提出就是为了解决跨域请求的。<br><a id=\"more\"></a></p>\n<h4 id=\"nginx中的一些配置\"><a href=\"#nginx中的一些配置\" class=\"headerlink\" title=\"nginx中的一些配置\"></a>nginx中的一些配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">add_header &apos;Access-Control-Allow-Origin&apos; &apos;http://demo.csrf.com&apos;;</div><div class=\"line\">add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET,POST,OPTIONS&apos;;</div><div class=\"line\">add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&apos;;</div><div class=\"line\">add_header &apos;Access-Control-Expose-Headers&apos; &apos;X-Custom-Header&apos;;</div><div class=\"line\"></div><div class=\"line\">if ($request_method = &apos;OPTIONS&apos;) &#123;</div><div class=\"line\">    return 204;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"遇到的一些问题\"><a href=\"#遇到的一些问题\" class=\"headerlink\" title=\"遇到的一些问题\"></a>遇到的一些问题</h4><ul>\n<li>设置Access-Control-Allow-Origin的时候, 仅仅只写了demo.csrf.com，没有带上http，所有，域名设置有问题</li>\n<li>因为客户端请求的时候，有带入一些自定义的头，X-Custom-Header，如果nginx里面如果没有配置Access-Control-Expose-Headers这个参数的话，客户端请求的时候也会报错</li>\n<li>其他需要注意的就是Methods，必须包含OPTIONS。为什么呢？ 因为，浏览器在发送请求的时候，有分2种情况: </li>\n<li><ul>\n<li>第一种: 简单请求。简单请求必须满足2个条件：1) 请求方法只能是HEAD、GET、POST中的一种 2) http header中不能超出一下几种字段: Accept、Accept-language、Content-Language、Last-Event-ID、Content-Type只能包含3种值application/x-www-form-urlencoded、multipart/form-data、text/plain</li>\n</ul>\n</li>\n<li><ul>\n<li>第二种: 复杂的请求。就是不满足上面简单请求条件的, 比如，有自定义的http头，或者Content-Type为 json/application的这种，当浏览器发现，这个请求为一个复杂请求的时候，就会发送一个OPTIONS的http method进行探测, 所以，这就解释了为什么必须包含OPTIONS这个方法。在探测的时候，如果服务返回了对应的Access-Control-Expose-Headers、Access-Control-Allow-Origin等，与客户端请求的能够匹配得上，则浏览器判定为整个是一个安全的请求，进行进行真实的POST等请求</li>\n</ul>\n</li>\n</ul>\n","excerpt":"<h5 id=\"CROS是什么？\"><a href=\"#CROS是什么？\" class=\"headerlink\" title=\"CROS是什么？\"></a>CROS是什么？</h5><p>CROS,全称是跨域资源共享 (Cross-origin resource sharing)，它的提出就是为了解决跨域请求的。<br>","more":"</p>\n<h4 id=\"nginx中的一些配置\"><a href=\"#nginx中的一些配置\" class=\"headerlink\" title=\"nginx中的一些配置\"></a>nginx中的一些配置</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">add_header &apos;Access-Control-Allow-Origin&apos; &apos;http://demo.csrf.com&apos;;</div><div class=\"line\">add_header &apos;Access-Control-Allow-Methods&apos; &apos;GET,POST,OPTIONS&apos;;</div><div class=\"line\">add_header &apos;Access-Control-Allow-Headers&apos; &apos;DNT,X-Mx-ReqToken,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization&apos;;</div><div class=\"line\">add_header &apos;Access-Control-Expose-Headers&apos; &apos;X-Custom-Header&apos;;</div><div class=\"line\"></div><div class=\"line\">if ($request_method = &apos;OPTIONS&apos;) &#123;</div><div class=\"line\">    return 204;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<h4 id=\"遇到的一些问题\"><a href=\"#遇到的一些问题\" class=\"headerlink\" title=\"遇到的一些问题\"></a>遇到的一些问题</h4><ul>\n<li>设置Access-Control-Allow-Origin的时候, 仅仅只写了demo.csrf.com，没有带上http，所有，域名设置有问题</li>\n<li>因为客户端请求的时候，有带入一些自定义的头，X-Custom-Header，如果nginx里面如果没有配置Access-Control-Expose-Headers这个参数的话，客户端请求的时候也会报错</li>\n<li>其他需要注意的就是Methods，必须包含OPTIONS。为什么呢？ 因为，浏览器在发送请求的时候，有分2种情况: </li>\n<li><ul>\n<li>第一种: 简单请求。简单请求必须满足2个条件：1) 请求方法只能是HEAD、GET、POST中的一种 2) http header中不能超出一下几种字段: Accept、Accept-language、Content-Language、Last-Event-ID、Content-Type只能包含3种值application/x-www-form-urlencoded、multipart/form-data、text/plain</li>\n</ul>\n</li>\n<li><ul>\n<li>第二种: 复杂的请求。就是不满足上面简单请求条件的, 比如，有自定义的http头，或者Content-Type为 json/application的这种，当浏览器发现，这个请求为一个复杂请求的时候，就会发送一个OPTIONS的http method进行探测, 所以，这就解释了为什么必须包含OPTIONS这个方法。在探测的时候，如果服务返回了对应的Access-Control-Expose-Headers、Access-Control-Allow-Origin等，与客户端请求的能够匹配得上，则浏览器判定为整个是一个安全的请求，进行进行真实的POST等请求</li>\n</ul>\n</li>\n</ul>"},{"title":"Hello World","_content":"Welcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","source":"_posts/hello-world.md","raw":"---\ntitle: Hello World\n---\nWelcome to [Hexo](https://hexo.io/)! This is your very first post. Check [documentation](https://hexo.io/docs/) for more info. If you get any problems when using Hexo, you can find the answer in [troubleshooting](https://hexo.io/docs/troubleshooting.html) or you can ask me on [GitHub](https://github.com/hexojs/hexo/issues).\n\n## Quick Start\n\n### Create a new post\n\n``` bash\n$ hexo new \"My New Post\"\n```\n\nMore info: [Writing](https://hexo.io/docs/writing.html)\n\n### Run server\n\n``` bash\n$ hexo server\n```\n\nMore info: [Server](https://hexo.io/docs/server.html)\n\n### Generate static files\n\n``` bash\n$ hexo generate\n```\n\nMore info: [Generating](https://hexo.io/docs/generating.html)\n\n### Deploy to remote sites\n\n``` bash\n$ hexo deploy\n```\n\nMore info: [Deployment](https://hexo.io/docs/deployment.html)\n","slug":"hello-world","published":1,"date":"2018-03-14T02:11:52.268Z","updated":"2018-03-14T02:11:52.268Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjysf06dg000gnzc7h7h5pmzk","content":"<p>Welcome to <a href=\"https://hexo.io/\" target=\"_blank\" rel=\"external\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\" target=\"_blank\" rel=\"external\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\" target=\"_blank\" rel=\"external\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\" target=\"_blank\" rel=\"external\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\" target=\"_blank\" rel=\"external\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\" target=\"_blank\" rel=\"external\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\" target=\"_blank\" rel=\"external\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\" target=\"_blank\" rel=\"external\">Deployment</a></p>\n","excerpt":"","more":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo new <span class=\"string\">\"My New Post\"</span></div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo server</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo generate</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">$ hexo deploy</div></pre></td></tr></table></figure>\n<p>More info: <a href=\"https://hexo.io/docs/deployment.html\">Deployment</a></p>\n"},{"title":"hexo基于travis自动构建发布到github和coding的实现方案","date":"2017-03-11T16:00:00.000Z","_content":"现在的静态博客是越来越火了，hexo就是其中的一个，我们有很多人都在用，原因无非是全静态的我们可以部署在github上，不需要自己购买主机托管，而且还可以时不时提交。但是全静态的Blog有个问题，就是我们需要在自己的机器上面部署个构建环境，如果换了台没有环境的机器，我们是没办法写。所以，这里主要讲的是如何使用travis-ci自动构建并且提交到我们的github上。这里假设你已经有了一个hexo博客，并且对travis-ci有一定的了解。\n<!--more-->\n\n### 安装hexo\n安装好后，提交到github。这些都一一省略，最主要的是如何在travis里面实现构建完成后自动发布到github和coding\n\n### 使用github的账号授权登陆CI\n访问 [travis-ci](https://travis-ci.org)，使用github登陆到travis-ci，登录后你会发现你github里面的项目都被同步到travis里面来了，然后你可以指定你的某个项目需要开启CI\n\n### 本地安装Travis的命令行工具\n可以百度Travis CI Command Line Client的安装方法\n\n### 本地命令行登录Travis\n在我们本地的travis CI里登陆我们的travis账户，其实也就是你的github账户\n\n```\nxxxdeMacBook-Pro:~ Johnny$ travis login \n\nWe need your GitHub login to identify you.\nThis information will not be sent to Travis CI, only to api.github.com.\nThe password will not be displayed.\n\nTry running with --github-token or --auto if you don't want to enter your password anyway.\n\nUsername: xxx@gmail.com\nPassword for xxx@gmail.com: **********\nSuccessfully logged in as xxx!\n```\n\n查看我们登陆的信息\n\n```\nxxxdeMacBook-Pro:~ Johnny$ travis whoami\nOutdated CLI version, run `gem install travis`.\nYou are JohnnyWei188\n```\n\n### 加密私钥\n使用Travis命令行工具加密我们的私钥\n\n```\nxxxdeMacBook-Pro:.travis Johnny$ travis encrypt-file id_rsa \nOutdated CLI version, run `gem install travis`.\nDetected repository as xxx/xxx.github.io, is this correct? |yes| yes\nencrypting id_rsa for xxx/xxx.github.io\nstoring result as id_rsa.enc\nstoring secure env variables for decryption\n\nPlease add the following to your build script (before_install stage in your .travis.yml, for instance):\n\n    openssl aes-256-cbc -K $encrypted_ffdfc123d95c_key -iv $encrypted_ffdfc123d95c_iv -in id_rsa.enc -out id_rsa -d\n\nPro Tip: You can add it automatically by running with --add.\n\nMake sure to add id_rsa.enc to the git repository.\nMake sure not to add id_rsa to the git repository.\nCommit all changes to your .travis.yml.\n\n```\n注意，我们加密好的文件应该放在你的hexo的根目录下的.travis目录里面，另外，刚刚我们加密了本机的私钥，所以，我们也需要将我们本地的公钥添加到github和coding里面\n\n### 添加到.travis.yml配置文件 \n我们加密了我们的私钥之后，命令行工具上会有一条openssl的解密命令，它生成了2个环境变量`$encrypted_ffdfc123d95c`和`encrypted_ffdfc123d95c_iv`，这2个环境变量在你登陆到travis-ci后，在你的项目设置里也可以看到，它们就是用来在你的CI环境里面解密你的私钥的。接着我们copy刚刚openssl这条信息到我们的.travis.yml文件中，放在before_script这个stage里面，如下\n\n```\nbefore_script:\n  - openssl aes-256-cbc -K $encrypted_ffdfc123d95c_key -iv $encrypted_ffdfc123d95c_iv -in .travis/id_rsa.enc -out ~/.ssh/id_rsa -d\n  - chmod 600 ~/.ssh/id_rsa\n  - eval $(ssh-agent)\n  - ssh-add ~/.ssh/id_rsa\n  - cp .travis/ssh_config ~/.ssh/config\n  - git config --global user.name 'xxx'\n  - git config --global user.email xxx@gmail.com\n```\n### 修改我们的hexo的站点配置\n在我们的站点配置文件_config.yml总，在我们的deploy这一项stage里，添加发布到githup和coding的git路径\n\n```\ndeploy:\n  type: git\n  name: xxx\n  email: xxx@gmail.com\n  repo: \n    github: git@github.com:xxx/xxx.github.io.git,master\n    coding: git@git.coding.net:xxx/xxx.git,master\n\n```\n\n### 结束\n这时候在Travis-CI使用hexo d -g 的话就可以免密码的自动提交到github或者coding里面了\n\n整个流程其实就是：\n\n* 提交你的文件到github\n* Travis-CI检测到你有提交，然后把你的github上的代码拉下来进行一些操作，比如构建，打包，执行一些命令\n* 构建完成之后再扔给github或者coding\n\n这篇文章主要讲的就是，在Travis-CI里面如何提交还给github，因为CI里它仅仅只是一个docker环境。总不能直接在_config.yml里写上你的github或者coding的账户密码吧。\n\n### 写在最后\n这应该算是真正意义上的第一篇博客，我大多数都是写云笔记里面自己看，对外可能看起来有点语无伦次，见谅。\n\n\n参考资料：\n\nhttps://blog.travis-ci.com/2013-01-14-new-client/\nhttp://www.huangyijie.com/2016/09/20/blog-with-github-travis-ci-and-coding-net-1/\nhttp://www.huangyijie.com/2016/10/05/blog-with-github-travis-ci-and-coding-net-2/\n","source":"_posts/hexo-travis-ci.md","raw":"---\ntitle: hexo基于travis自动构建发布到github和coding的实现方案\ndate: 2017-03-12\ntags:\n  - hexo\n  - Travis-CI\ncategories:\n  - 技术\n---\n现在的静态博客是越来越火了，hexo就是其中的一个，我们有很多人都在用，原因无非是全静态的我们可以部署在github上，不需要自己购买主机托管，而且还可以时不时提交。但是全静态的Blog有个问题，就是我们需要在自己的机器上面部署个构建环境，如果换了台没有环境的机器，我们是没办法写。所以，这里主要讲的是如何使用travis-ci自动构建并且提交到我们的github上。这里假设你已经有了一个hexo博客，并且对travis-ci有一定的了解。\n<!--more-->\n\n### 安装hexo\n安装好后，提交到github。这些都一一省略，最主要的是如何在travis里面实现构建完成后自动发布到github和coding\n\n### 使用github的账号授权登陆CI\n访问 [travis-ci](https://travis-ci.org)，使用github登陆到travis-ci，登录后你会发现你github里面的项目都被同步到travis里面来了，然后你可以指定你的某个项目需要开启CI\n\n### 本地安装Travis的命令行工具\n可以百度Travis CI Command Line Client的安装方法\n\n### 本地命令行登录Travis\n在我们本地的travis CI里登陆我们的travis账户，其实也就是你的github账户\n\n```\nxxxdeMacBook-Pro:~ Johnny$ travis login \n\nWe need your GitHub login to identify you.\nThis information will not be sent to Travis CI, only to api.github.com.\nThe password will not be displayed.\n\nTry running with --github-token or --auto if you don't want to enter your password anyway.\n\nUsername: xxx@gmail.com\nPassword for xxx@gmail.com: **********\nSuccessfully logged in as xxx!\n```\n\n查看我们登陆的信息\n\n```\nxxxdeMacBook-Pro:~ Johnny$ travis whoami\nOutdated CLI version, run `gem install travis`.\nYou are JohnnyWei188\n```\n\n### 加密私钥\n使用Travis命令行工具加密我们的私钥\n\n```\nxxxdeMacBook-Pro:.travis Johnny$ travis encrypt-file id_rsa \nOutdated CLI version, run `gem install travis`.\nDetected repository as xxx/xxx.github.io, is this correct? |yes| yes\nencrypting id_rsa for xxx/xxx.github.io\nstoring result as id_rsa.enc\nstoring secure env variables for decryption\n\nPlease add the following to your build script (before_install stage in your .travis.yml, for instance):\n\n    openssl aes-256-cbc -K $encrypted_ffdfc123d95c_key -iv $encrypted_ffdfc123d95c_iv -in id_rsa.enc -out id_rsa -d\n\nPro Tip: You can add it automatically by running with --add.\n\nMake sure to add id_rsa.enc to the git repository.\nMake sure not to add id_rsa to the git repository.\nCommit all changes to your .travis.yml.\n\n```\n注意，我们加密好的文件应该放在你的hexo的根目录下的.travis目录里面，另外，刚刚我们加密了本机的私钥，所以，我们也需要将我们本地的公钥添加到github和coding里面\n\n### 添加到.travis.yml配置文件 \n我们加密了我们的私钥之后，命令行工具上会有一条openssl的解密命令，它生成了2个环境变量`$encrypted_ffdfc123d95c`和`encrypted_ffdfc123d95c_iv`，这2个环境变量在你登陆到travis-ci后，在你的项目设置里也可以看到，它们就是用来在你的CI环境里面解密你的私钥的。接着我们copy刚刚openssl这条信息到我们的.travis.yml文件中，放在before_script这个stage里面，如下\n\n```\nbefore_script:\n  - openssl aes-256-cbc -K $encrypted_ffdfc123d95c_key -iv $encrypted_ffdfc123d95c_iv -in .travis/id_rsa.enc -out ~/.ssh/id_rsa -d\n  - chmod 600 ~/.ssh/id_rsa\n  - eval $(ssh-agent)\n  - ssh-add ~/.ssh/id_rsa\n  - cp .travis/ssh_config ~/.ssh/config\n  - git config --global user.name 'xxx'\n  - git config --global user.email xxx@gmail.com\n```\n### 修改我们的hexo的站点配置\n在我们的站点配置文件_config.yml总，在我们的deploy这一项stage里，添加发布到githup和coding的git路径\n\n```\ndeploy:\n  type: git\n  name: xxx\n  email: xxx@gmail.com\n  repo: \n    github: git@github.com:xxx/xxx.github.io.git,master\n    coding: git@git.coding.net:xxx/xxx.git,master\n\n```\n\n### 结束\n这时候在Travis-CI使用hexo d -g 的话就可以免密码的自动提交到github或者coding里面了\n\n整个流程其实就是：\n\n* 提交你的文件到github\n* Travis-CI检测到你有提交，然后把你的github上的代码拉下来进行一些操作，比如构建，打包，执行一些命令\n* 构建完成之后再扔给github或者coding\n\n这篇文章主要讲的就是，在Travis-CI里面如何提交还给github，因为CI里它仅仅只是一个docker环境。总不能直接在_config.yml里写上你的github或者coding的账户密码吧。\n\n### 写在最后\n这应该算是真正意义上的第一篇博客，我大多数都是写云笔记里面自己看，对外可能看起来有点语无伦次，见谅。\n\n\n参考资料：\n\nhttps://blog.travis-ci.com/2013-01-14-new-client/\nhttp://www.huangyijie.com/2016/09/20/blog-with-github-travis-ci-and-coding-net-1/\nhttp://www.huangyijie.com/2016/10/05/blog-with-github-travis-ci-and-coding-net-2/\n","slug":"hexo-travis-ci","published":1,"updated":"2019-08-01T08:46:29.389Z","_id":"cjysf06jv001cnzc7wkby96ou","comments":1,"layout":"post","photos":[],"link":"","content":"<p>现在的静态博客是越来越火了，hexo就是其中的一个，我们有很多人都在用，原因无非是全静态的我们可以部署在github上，不需要自己购买主机托管，而且还可以时不时提交。但是全静态的Blog有个问题，就是我们需要在自己的机器上面部署个构建环境，如果换了台没有环境的机器，我们是没办法写。所以，这里主要讲的是如何使用travis-ci自动构建并且提交到我们的github上。这里假设你已经有了一个hexo博客，并且对travis-ci有一定的了解。<br><a id=\"more\"></a></p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>安装好后，提交到github。这些都一一省略，最主要的是如何在travis里面实现构建完成后自动发布到github和coding</p>\n<h3 id=\"使用github的账号授权登陆CI\"><a href=\"#使用github的账号授权登陆CI\" class=\"headerlink\" title=\"使用github的账号授权登陆CI\"></a>使用github的账号授权登陆CI</h3><p>访问 <a href=\"https://travis-ci.org\" target=\"_blank\" rel=\"external\">travis-ci</a>，使用github登陆到travis-ci，登录后你会发现你github里面的项目都被同步到travis里面来了，然后你可以指定你的某个项目需要开启CI</p>\n<h3 id=\"本地安装Travis的命令行工具\"><a href=\"#本地安装Travis的命令行工具\" class=\"headerlink\" title=\"本地安装Travis的命令行工具\"></a>本地安装Travis的命令行工具</h3><p>可以百度Travis CI Command Line Client的安装方法</p>\n<h3 id=\"本地命令行登录Travis\"><a href=\"#本地命令行登录Travis\" class=\"headerlink\" title=\"本地命令行登录Travis\"></a>本地命令行登录Travis</h3><p>在我们本地的travis CI里登陆我们的travis账户，其实也就是你的github账户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">xxxdeMacBook-Pro:~ Johnny$ travis login </div><div class=\"line\"></div><div class=\"line\">We need your GitHub login to identify you.</div><div class=\"line\">This information will not be sent to Travis CI, only to api.github.com.</div><div class=\"line\">The password will not be displayed.</div><div class=\"line\"></div><div class=\"line\">Try running with --github-token or --auto if you don&apos;t want to enter your password anyway.</div><div class=\"line\"></div><div class=\"line\">Username: xxx@gmail.com</div><div class=\"line\">Password for xxx@gmail.com: **********</div><div class=\"line\">Successfully logged in as xxx!</div></pre></td></tr></table></figure>\n<p>查看我们登陆的信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">xxxdeMacBook-Pro:~ Johnny$ travis whoami</div><div class=\"line\">Outdated CLI version, run `gem install travis`.</div><div class=\"line\">You are JohnnyWei188</div></pre></td></tr></table></figure>\n<h3 id=\"加密私钥\"><a href=\"#加密私钥\" class=\"headerlink\" title=\"加密私钥\"></a>加密私钥</h3><p>使用Travis命令行工具加密我们的私钥</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">xxxdeMacBook-Pro:.travis Johnny$ travis encrypt-file id_rsa </div><div class=\"line\">Outdated CLI version, run `gem install travis`.</div><div class=\"line\">Detected repository as xxx/xxx.github.io, is this correct? |yes| yes</div><div class=\"line\">encrypting id_rsa for xxx/xxx.github.io</div><div class=\"line\">storing result as id_rsa.enc</div><div class=\"line\">storing secure env variables for decryption</div><div class=\"line\"></div><div class=\"line\">Please add the following to your build script (before_install stage in your .travis.yml, for instance):</div><div class=\"line\"></div><div class=\"line\">    openssl aes-256-cbc -K $encrypted_ffdfc123d95c_key -iv $encrypted_ffdfc123d95c_iv -in id_rsa.enc -out id_rsa -d</div><div class=\"line\"></div><div class=\"line\">Pro Tip: You can add it automatically by running with --add.</div><div class=\"line\"></div><div class=\"line\">Make sure to add id_rsa.enc to the git repository.</div><div class=\"line\">Make sure not to add id_rsa to the git repository.</div><div class=\"line\">Commit all changes to your .travis.yml.</div></pre></td></tr></table></figure>\n<p>注意，我们加密好的文件应该放在你的hexo的根目录下的.travis目录里面，另外，刚刚我们加密了本机的私钥，所以，我们也需要将我们本地的公钥添加到github和coding里面</p>\n<h3 id=\"添加到-travis-yml配置文件\"><a href=\"#添加到-travis-yml配置文件\" class=\"headerlink\" title=\"添加到.travis.yml配置文件\"></a>添加到.travis.yml配置文件</h3><p>我们加密了我们的私钥之后，命令行工具上会有一条openssl的解密命令，它生成了2个环境变量<code>$encrypted_ffdfc123d95c</code>和<code>encrypted_ffdfc123d95c_iv</code>，这2个环境变量在你登陆到travis-ci后，在你的项目设置里也可以看到，它们就是用来在你的CI环境里面解密你的私钥的。接着我们copy刚刚openssl这条信息到我们的.travis.yml文件中，放在before_script这个stage里面，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">before_script:</div><div class=\"line\">  - openssl aes-256-cbc -K $encrypted_ffdfc123d95c_key -iv $encrypted_ffdfc123d95c_iv -in .travis/id_rsa.enc -out ~/.ssh/id_rsa -d</div><div class=\"line\">  - chmod 600 ~/.ssh/id_rsa</div><div class=\"line\">  - eval $(ssh-agent)</div><div class=\"line\">  - ssh-add ~/.ssh/id_rsa</div><div class=\"line\">  - cp .travis/ssh_config ~/.ssh/config</div><div class=\"line\">  - git config --global user.name &apos;xxx&apos;</div><div class=\"line\">  - git config --global user.email xxx@gmail.com</div></pre></td></tr></table></figure>\n<h3 id=\"修改我们的hexo的站点配置\"><a href=\"#修改我们的hexo的站点配置\" class=\"headerlink\" title=\"修改我们的hexo的站点配置\"></a>修改我们的hexo的站点配置</h3><p>在我们的站点配置文件_config.yml总，在我们的deploy这一项stage里，添加发布到githup和coding的git路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  name: xxx</div><div class=\"line\">  email: xxx@gmail.com</div><div class=\"line\">  repo: </div><div class=\"line\">    github: git@github.com:xxx/xxx.github.io.git,master</div><div class=\"line\">    coding: git@git.coding.net:xxx/xxx.git,master</div></pre></td></tr></table></figure>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p>这时候在Travis-CI使用hexo d -g 的话就可以免密码的自动提交到github或者coding里面了</p>\n<p>整个流程其实就是：</p>\n<ul>\n<li>提交你的文件到github</li>\n<li>Travis-CI检测到你有提交，然后把你的github上的代码拉下来进行一些操作，比如构建，打包，执行一些命令</li>\n<li>构建完成之后再扔给github或者coding</li>\n</ul>\n<p>这篇文章主要讲的就是，在Travis-CI里面如何提交还给github，因为CI里它仅仅只是一个docker环境。总不能直接在_config.yml里写上你的github或者coding的账户密码吧。</p>\n<h3 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h3><p>这应该算是真正意义上的第一篇博客，我大多数都是写云笔记里面自己看，对外可能看起来有点语无伦次，见谅。</p>\n<p>参考资料：</p>\n<p><a href=\"https://blog.travis-ci.com/2013-01-14-new-client/\" target=\"_blank\" rel=\"external\">https://blog.travis-ci.com/2013-01-14-new-client/</a><br><a href=\"http://www.huangyijie.com/2016/09/20/blog-with-github-travis-ci-and-coding-net-1/\" target=\"_blank\" rel=\"external\">http://www.huangyijie.com/2016/09/20/blog-with-github-travis-ci-and-coding-net-1/</a><br><a href=\"http://www.huangyijie.com/2016/10/05/blog-with-github-travis-ci-and-coding-net-2/\" target=\"_blank\" rel=\"external\">http://www.huangyijie.com/2016/10/05/blog-with-github-travis-ci-and-coding-net-2/</a></p>\n","excerpt":"<p>现在的静态博客是越来越火了，hexo就是其中的一个，我们有很多人都在用，原因无非是全静态的我们可以部署在github上，不需要自己购买主机托管，而且还可以时不时提交。但是全静态的Blog有个问题，就是我们需要在自己的机器上面部署个构建环境，如果换了台没有环境的机器，我们是没办法写。所以，这里主要讲的是如何使用travis-ci自动构建并且提交到我们的github上。这里假设你已经有了一个hexo博客，并且对travis-ci有一定的了解。<br>","more":"</p>\n<h3 id=\"安装hexo\"><a href=\"#安装hexo\" class=\"headerlink\" title=\"安装hexo\"></a>安装hexo</h3><p>安装好后，提交到github。这些都一一省略，最主要的是如何在travis里面实现构建完成后自动发布到github和coding</p>\n<h3 id=\"使用github的账号授权登陆CI\"><a href=\"#使用github的账号授权登陆CI\" class=\"headerlink\" title=\"使用github的账号授权登陆CI\"></a>使用github的账号授权登陆CI</h3><p>访问 <a href=\"https://travis-ci.org\">travis-ci</a>，使用github登陆到travis-ci，登录后你会发现你github里面的项目都被同步到travis里面来了，然后你可以指定你的某个项目需要开启CI</p>\n<h3 id=\"本地安装Travis的命令行工具\"><a href=\"#本地安装Travis的命令行工具\" class=\"headerlink\" title=\"本地安装Travis的命令行工具\"></a>本地安装Travis的命令行工具</h3><p>可以百度Travis CI Command Line Client的安装方法</p>\n<h3 id=\"本地命令行登录Travis\"><a href=\"#本地命令行登录Travis\" class=\"headerlink\" title=\"本地命令行登录Travis\"></a>本地命令行登录Travis</h3><p>在我们本地的travis CI里登陆我们的travis账户，其实也就是你的github账户</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">xxxdeMacBook-Pro:~ Johnny$ travis login </div><div class=\"line\"></div><div class=\"line\">We need your GitHub login to identify you.</div><div class=\"line\">This information will not be sent to Travis CI, only to api.github.com.</div><div class=\"line\">The password will not be displayed.</div><div class=\"line\"></div><div class=\"line\">Try running with --github-token or --auto if you don&apos;t want to enter your password anyway.</div><div class=\"line\"></div><div class=\"line\">Username: xxx@gmail.com</div><div class=\"line\">Password for xxx@gmail.com: **********</div><div class=\"line\">Successfully logged in as xxx!</div></pre></td></tr></table></figure>\n<p>查看我们登陆的信息</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">xxxdeMacBook-Pro:~ Johnny$ travis whoami</div><div class=\"line\">Outdated CLI version, run `gem install travis`.</div><div class=\"line\">You are JohnnyWei188</div></pre></td></tr></table></figure>\n<h3 id=\"加密私钥\"><a href=\"#加密私钥\" class=\"headerlink\" title=\"加密私钥\"></a>加密私钥</h3><p>使用Travis命令行工具加密我们的私钥</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div></pre></td><td class=\"code\"><pre><div class=\"line\">xxxdeMacBook-Pro:.travis Johnny$ travis encrypt-file id_rsa </div><div class=\"line\">Outdated CLI version, run `gem install travis`.</div><div class=\"line\">Detected repository as xxx/xxx.github.io, is this correct? |yes| yes</div><div class=\"line\">encrypting id_rsa for xxx/xxx.github.io</div><div class=\"line\">storing result as id_rsa.enc</div><div class=\"line\">storing secure env variables for decryption</div><div class=\"line\"></div><div class=\"line\">Please add the following to your build script (before_install stage in your .travis.yml, for instance):</div><div class=\"line\"></div><div class=\"line\">    openssl aes-256-cbc -K $encrypted_ffdfc123d95c_key -iv $encrypted_ffdfc123d95c_iv -in id_rsa.enc -out id_rsa -d</div><div class=\"line\"></div><div class=\"line\">Pro Tip: You can add it automatically by running with --add.</div><div class=\"line\"></div><div class=\"line\">Make sure to add id_rsa.enc to the git repository.</div><div class=\"line\">Make sure not to add id_rsa to the git repository.</div><div class=\"line\">Commit all changes to your .travis.yml.</div></pre></td></tr></table></figure>\n<p>注意，我们加密好的文件应该放在你的hexo的根目录下的.travis目录里面，另外，刚刚我们加密了本机的私钥，所以，我们也需要将我们本地的公钥添加到github和coding里面</p>\n<h3 id=\"添加到-travis-yml配置文件\"><a href=\"#添加到-travis-yml配置文件\" class=\"headerlink\" title=\"添加到.travis.yml配置文件\"></a>添加到.travis.yml配置文件</h3><p>我们加密了我们的私钥之后，命令行工具上会有一条openssl的解密命令，它生成了2个环境变量<code>$encrypted_ffdfc123d95c</code>和<code>encrypted_ffdfc123d95c_iv</code>，这2个环境变量在你登陆到travis-ci后，在你的项目设置里也可以看到，它们就是用来在你的CI环境里面解密你的私钥的。接着我们copy刚刚openssl这条信息到我们的.travis.yml文件中，放在before_script这个stage里面，如下</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">before_script:</div><div class=\"line\">  - openssl aes-256-cbc -K $encrypted_ffdfc123d95c_key -iv $encrypted_ffdfc123d95c_iv -in .travis/id_rsa.enc -out ~/.ssh/id_rsa -d</div><div class=\"line\">  - chmod 600 ~/.ssh/id_rsa</div><div class=\"line\">  - eval $(ssh-agent)</div><div class=\"line\">  - ssh-add ~/.ssh/id_rsa</div><div class=\"line\">  - cp .travis/ssh_config ~/.ssh/config</div><div class=\"line\">  - git config --global user.name &apos;xxx&apos;</div><div class=\"line\">  - git config --global user.email xxx@gmail.com</div></pre></td></tr></table></figure>\n<h3 id=\"修改我们的hexo的站点配置\"><a href=\"#修改我们的hexo的站点配置\" class=\"headerlink\" title=\"修改我们的hexo的站点配置\"></a>修改我们的hexo的站点配置</h3><p>在我们的站点配置文件_config.yml总，在我们的deploy这一项stage里，添加发布到githup和coding的git路径</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">deploy:</div><div class=\"line\">  type: git</div><div class=\"line\">  name: xxx</div><div class=\"line\">  email: xxx@gmail.com</div><div class=\"line\">  repo: </div><div class=\"line\">    github: git@github.com:xxx/xxx.github.io.git,master</div><div class=\"line\">    coding: git@git.coding.net:xxx/xxx.git,master</div></pre></td></tr></table></figure>\n<h3 id=\"结束\"><a href=\"#结束\" class=\"headerlink\" title=\"结束\"></a>结束</h3><p>这时候在Travis-CI使用hexo d -g 的话就可以免密码的自动提交到github或者coding里面了</p>\n<p>整个流程其实就是：</p>\n<ul>\n<li>提交你的文件到github</li>\n<li>Travis-CI检测到你有提交，然后把你的github上的代码拉下来进行一些操作，比如构建，打包，执行一些命令</li>\n<li>构建完成之后再扔给github或者coding</li>\n</ul>\n<p>这篇文章主要讲的就是，在Travis-CI里面如何提交还给github，因为CI里它仅仅只是一个docker环境。总不能直接在_config.yml里写上你的github或者coding的账户密码吧。</p>\n<h3 id=\"写在最后\"><a href=\"#写在最后\" class=\"headerlink\" title=\"写在最后\"></a>写在最后</h3><p>这应该算是真正意义上的第一篇博客，我大多数都是写云笔记里面自己看，对外可能看起来有点语无伦次，见谅。</p>\n<p>参考资料：</p>\n<p><a href=\"https://blog.travis-ci.com/2013-01-14-new-client/\">https://blog.travis-ci.com/2013-01-14-new-client/</a><br><a href=\"http://www.huangyijie.com/2016/09/20/blog-with-github-travis-ci-and-coding-net-1/\">http://www.huangyijie.com/2016/09/20/blog-with-github-travis-ci-and-coding-net-1/</a><br><a href=\"http://www.huangyijie.com/2016/10/05/blog-with-github-travis-ci-and-coding-net-2/\">http://www.huangyijie.com/2016/10/05/blog-with-github-travis-ci-and-coding-net-2/</a></p>"},{"title":"openssl相关介绍","updated":"2019-08-01T06:21:18.000Z","_content":"\n##### 概述\nopenssl是一个开源的软件包, 我们可以使用它用来进行安全通信, 它主要分为三个功能部分，SSL协议库、应用程序和密码算法库。\n<!--more-->\n\n##### openssl的应用场景是什么？\n在https协议中， http下层的传输协议由TCP/IP变成了SSL/TLS。 说到这里，需要了解下SSL(安全套接层协议)和TLS(传输层安全)他们之间的联系。在我认为TLS其实就是SSL，只不过一开始不存在TLS，在SSL发展到v3版本的时候，在1999年的被IETF改名了，正式成为了一个安全传输协议的标准。所以，TLSv1.0应该是基本等价SSLv3.1。\n那openssl到底应用在哪里呢？ 上面有提到，openssl其实包含了3部分内容，其中一部分就是SSL协议库，它几乎支持所有的加密算法和加密协议，当然就包括SSL协议咯。所以，很多应用软件都会使用它作为底层来实现TLS的功能，例如nginx, apache等。\n\n##### openssl有哪些功能，命令?\n因为加密技术分为对称加密和非对称加密，而openssl既然支持几乎所有的加密算法，所以openssl肯定也是支持对称加密和非对称加密的。\n#####  对称加密算法，加密解密使用同一个密钥\n```\nopenssl enc \n  -e  -des3  使用des3加密\n  -d  -des3  使用des3解密\n  -a  使用base64编码格式\n  -salt 加入随机数\n  -out  输出加密文件路径\n  -in   指定加密文件路径\n\n如：openssl enc -e -des3 -a -salt -in johnny -out johnny.jiami\n```\n\n##### 非对称加密算法，公钥从私钥中提取出来，使用对方的公钥来加密数据，保证数据安全，用自己的私钥加密来证明数据的来源。\n\n- 生成私钥\n```\nopenssl genrsa [-out filename] [-passout arg] [-des] [-des3] [-idea] [-f4] [-3] [-rand file(s)] [-engine id] [numbits]\n\n例如，生成一个长度为4096的私钥\nopenssl genrsa -out johnny.key 4096  \n\n```\n生成私钥的常用命令\n```\n-out filename 将生成的私钥保存到文件\n-des -des3 -idea 指的是加密算法\nnumbits 指的是生成密钥的大写，默认2048\n```\n- 从公钥中提取私钥\n```\nopenssl rsa [-inform PEM|NET|DER] [-outform PEM|NET|DER] [-in filename] [-passin arg] [-out filename] [-passout arg] [-sgckey] [-des] [-des3][-idea] [-text] [-noout] [-modulus] [-check] [-pubin] [-pubout] [-engine id]\n\n例如，提取一个私钥\nopenssl rsa -in johnny.key -out johnny.pub -pubout\n```\n提取私钥的几个命令\n```\n-in 指定私钥文件\n-out 提取的公钥写入文件\n- pubout 提取公钥\n```\n\n##### 单向加密\n```\nopenssl dgst -md5 johnny.key\n\n几种家用的加密算法\n-md5\n-md4\n-sha1\n-sha\n-dss1\n```\n\n##### 生成随机数\n```\nopenssl rand -格式 num\nopenssl rand -base64 10\n\n-base64 以base64格式编码\n-hex 16进制编码\n-out 输出到文件\n后面的num表示生成多少bytes长度的随机数\n```\n\n##### 生成密码\n```\nopenssl passwd \n生成密码(标准输入) echo -n \"123456\" | openssl passwd -crypt stdin\n生成密码(文件输入) openssl passwd -1 -in johnny.mingwen\n\n-1 指定md5算法\n-crypt Linux标准密码算法格式\n-in 需要加密的输入文件\nstdin 通过标准输入\n```\n\n##### openssl还可以生成证书，等\n","source":"_posts/openssl.md","raw":"---\ntitle: openssl相关介绍 \nupdated: 2019-08-01 14:21:18\ntags:\n  - Linux  \ncategories:\n  - 技术\n---\n\n##### 概述\nopenssl是一个开源的软件包, 我们可以使用它用来进行安全通信, 它主要分为三个功能部分，SSL协议库、应用程序和密码算法库。\n<!--more-->\n\n##### openssl的应用场景是什么？\n在https协议中， http下层的传输协议由TCP/IP变成了SSL/TLS。 说到这里，需要了解下SSL(安全套接层协议)和TLS(传输层安全)他们之间的联系。在我认为TLS其实就是SSL，只不过一开始不存在TLS，在SSL发展到v3版本的时候，在1999年的被IETF改名了，正式成为了一个安全传输协议的标准。所以，TLSv1.0应该是基本等价SSLv3.1。\n那openssl到底应用在哪里呢？ 上面有提到，openssl其实包含了3部分内容，其中一部分就是SSL协议库，它几乎支持所有的加密算法和加密协议，当然就包括SSL协议咯。所以，很多应用软件都会使用它作为底层来实现TLS的功能，例如nginx, apache等。\n\n##### openssl有哪些功能，命令?\n因为加密技术分为对称加密和非对称加密，而openssl既然支持几乎所有的加密算法，所以openssl肯定也是支持对称加密和非对称加密的。\n#####  对称加密算法，加密解密使用同一个密钥\n```\nopenssl enc \n  -e  -des3  使用des3加密\n  -d  -des3  使用des3解密\n  -a  使用base64编码格式\n  -salt 加入随机数\n  -out  输出加密文件路径\n  -in   指定加密文件路径\n\n如：openssl enc -e -des3 -a -salt -in johnny -out johnny.jiami\n```\n\n##### 非对称加密算法，公钥从私钥中提取出来，使用对方的公钥来加密数据，保证数据安全，用自己的私钥加密来证明数据的来源。\n\n- 生成私钥\n```\nopenssl genrsa [-out filename] [-passout arg] [-des] [-des3] [-idea] [-f4] [-3] [-rand file(s)] [-engine id] [numbits]\n\n例如，生成一个长度为4096的私钥\nopenssl genrsa -out johnny.key 4096  \n\n```\n生成私钥的常用命令\n```\n-out filename 将生成的私钥保存到文件\n-des -des3 -idea 指的是加密算法\nnumbits 指的是生成密钥的大写，默认2048\n```\n- 从公钥中提取私钥\n```\nopenssl rsa [-inform PEM|NET|DER] [-outform PEM|NET|DER] [-in filename] [-passin arg] [-out filename] [-passout arg] [-sgckey] [-des] [-des3][-idea] [-text] [-noout] [-modulus] [-check] [-pubin] [-pubout] [-engine id]\n\n例如，提取一个私钥\nopenssl rsa -in johnny.key -out johnny.pub -pubout\n```\n提取私钥的几个命令\n```\n-in 指定私钥文件\n-out 提取的公钥写入文件\n- pubout 提取公钥\n```\n\n##### 单向加密\n```\nopenssl dgst -md5 johnny.key\n\n几种家用的加密算法\n-md5\n-md4\n-sha1\n-sha\n-dss1\n```\n\n##### 生成随机数\n```\nopenssl rand -格式 num\nopenssl rand -base64 10\n\n-base64 以base64格式编码\n-hex 16进制编码\n-out 输出到文件\n后面的num表示生成多少bytes长度的随机数\n```\n\n##### 生成密码\n```\nopenssl passwd \n生成密码(标准输入) echo -n \"123456\" | openssl passwd -crypt stdin\n生成密码(文件输入) openssl passwd -1 -in johnny.mingwen\n\n-1 指定md5算法\n-crypt Linux标准密码算法格式\n-in 需要加密的输入文件\nstdin 通过标准输入\n```\n\n##### openssl还可以生成证书，等\n","slug":"openssl","published":1,"date":"2019-08-01T08:43:26.719Z","_id":"cjysf06jz001enzc7w3b84upp","comments":1,"layout":"post","photos":[],"link":"","content":"<h5 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>openssl是一个开源的软件包, 我们可以使用它用来进行安全通信, 它主要分为三个功能部分，SSL协议库、应用程序和密码算法库。<br><a id=\"more\"></a></p>\n<h5 id=\"openssl的应用场景是什么？\"><a href=\"#openssl的应用场景是什么？\" class=\"headerlink\" title=\"openssl的应用场景是什么？\"></a>openssl的应用场景是什么？</h5><p>在https协议中， http下层的传输协议由TCP/IP变成了SSL/TLS。 说到这里，需要了解下SSL(安全套接层协议)和TLS(传输层安全)他们之间的联系。在我认为TLS其实就是SSL，只不过一开始不存在TLS，在SSL发展到v3版本的时候，在1999年的被IETF改名了，正式成为了一个安全传输协议的标准。所以，TLSv1.0应该是基本等价SSLv3.1。<br>那openssl到底应用在哪里呢？ 上面有提到，openssl其实包含了3部分内容，其中一部分就是SSL协议库，它几乎支持所有的加密算法和加密协议，当然就包括SSL协议咯。所以，很多应用软件都会使用它作为底层来实现TLS的功能，例如nginx, apache等。</p>\n<h5 id=\"openssl有哪些功能，命令\"><a href=\"#openssl有哪些功能，命令\" class=\"headerlink\" title=\"openssl有哪些功能，命令?\"></a>openssl有哪些功能，命令?</h5><p>因为加密技术分为对称加密和非对称加密，而openssl既然支持几乎所有的加密算法，所以openssl肯定也是支持对称加密和非对称加密的。</p>\n<h5 id=\"对称加密算法，加密解密使用同一个密钥\"><a href=\"#对称加密算法，加密解密使用同一个密钥\" class=\"headerlink\" title=\"对称加密算法，加密解密使用同一个密钥\"></a>对称加密算法，加密解密使用同一个密钥</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl enc </div><div class=\"line\">  -e  -des3  使用des3加密</div><div class=\"line\">  -d  -des3  使用des3解密</div><div class=\"line\">  -a  使用base64编码格式</div><div class=\"line\">  -salt 加入随机数</div><div class=\"line\">  -out  输出加密文件路径</div><div class=\"line\">  -in   指定加密文件路径</div><div class=\"line\"></div><div class=\"line\">如：openssl enc -e -des3 -a -salt -in johnny -out johnny.jiami</div></pre></td></tr></table></figure>\n<h5 id=\"非对称加密算法，公钥从私钥中提取出来，使用对方的公钥来加密数据，保证数据安全，用自己的私钥加密来证明数据的来源。\"><a href=\"#非对称加密算法，公钥从私钥中提取出来，使用对方的公钥来加密数据，保证数据安全，用自己的私钥加密来证明数据的来源。\" class=\"headerlink\" title=\"非对称加密算法，公钥从私钥中提取出来，使用对方的公钥来加密数据，保证数据安全，用自己的私钥加密来证明数据的来源。\"></a>非对称加密算法，公钥从私钥中提取出来，使用对方的公钥来加密数据，保证数据安全，用自己的私钥加密来证明数据的来源。</h5><ul>\n<li>生成私钥<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl genrsa [-out filename] [-passout arg] [-des] [-des3] [-idea] [-f4] [-3] [-rand file(s)] [-engine id] [numbits]</div><div class=\"line\"></div><div class=\"line\">例如，生成一个长度为4096的私钥</div><div class=\"line\">openssl genrsa -out johnny.key 4096</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>生成私钥的常用命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">-out filename 将生成的私钥保存到文件</div><div class=\"line\">-des -des3 -idea 指的是加密算法</div><div class=\"line\">numbits 指的是生成密钥的大写，默认2048</div></pre></td></tr></table></figure></p>\n<ul>\n<li>从公钥中提取私钥<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl rsa [-inform PEM|NET|DER] [-outform PEM|NET|DER] [-in filename] [-passin arg] [-out filename] [-passout arg] [-sgckey] [-des] [-des3][-idea] [-text] [-noout] [-modulus] [-check] [-pubin] [-pubout] [-engine id]</div><div class=\"line\"></div><div class=\"line\">例如，提取一个私钥</div><div class=\"line\">openssl rsa -in johnny.key -out johnny.pub -pubout</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>提取私钥的几个命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">-in 指定私钥文件</div><div class=\"line\">-out 提取的公钥写入文件</div><div class=\"line\">- pubout 提取公钥</div></pre></td></tr></table></figure></p>\n<h5 id=\"单向加密\"><a href=\"#单向加密\" class=\"headerlink\" title=\"单向加密\"></a>单向加密</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl dgst -md5 johnny.key</div><div class=\"line\"></div><div class=\"line\">几种家用的加密算法</div><div class=\"line\">-md5</div><div class=\"line\">-md4</div><div class=\"line\">-sha1</div><div class=\"line\">-sha</div><div class=\"line\">-dss1</div></pre></td></tr></table></figure>\n<h5 id=\"生成随机数\"><a href=\"#生成随机数\" class=\"headerlink\" title=\"生成随机数\"></a>生成随机数</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl rand -格式 num</div><div class=\"line\">openssl rand -base64 10</div><div class=\"line\"></div><div class=\"line\">-base64 以base64格式编码</div><div class=\"line\">-hex 16进制编码</div><div class=\"line\">-out 输出到文件</div><div class=\"line\">后面的num表示生成多少bytes长度的随机数</div></pre></td></tr></table></figure>\n<h5 id=\"生成密码\"><a href=\"#生成密码\" class=\"headerlink\" title=\"生成密码\"></a>生成密码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl passwd </div><div class=\"line\">生成密码(标准输入) echo -n &quot;123456&quot; | openssl passwd -crypt stdin</div><div class=\"line\">生成密码(文件输入) openssl passwd -1 -in johnny.mingwen</div><div class=\"line\"></div><div class=\"line\">-1 指定md5算法</div><div class=\"line\">-crypt Linux标准密码算法格式</div><div class=\"line\">-in 需要加密的输入文件</div><div class=\"line\">stdin 通过标准输入</div></pre></td></tr></table></figure>\n<h5 id=\"openssl还可以生成证书，等\"><a href=\"#openssl还可以生成证书，等\" class=\"headerlink\" title=\"openssl还可以生成证书，等\"></a>openssl还可以生成证书，等</h5>","excerpt":"<h5 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h5><p>openssl是一个开源的软件包, 我们可以使用它用来进行安全通信, 它主要分为三个功能部分，SSL协议库、应用程序和密码算法库。<br>","more":"</p>\n<h5 id=\"openssl的应用场景是什么？\"><a href=\"#openssl的应用场景是什么？\" class=\"headerlink\" title=\"openssl的应用场景是什么？\"></a>openssl的应用场景是什么？</h5><p>在https协议中， http下层的传输协议由TCP/IP变成了SSL/TLS。 说到这里，需要了解下SSL(安全套接层协议)和TLS(传输层安全)他们之间的联系。在我认为TLS其实就是SSL，只不过一开始不存在TLS，在SSL发展到v3版本的时候，在1999年的被IETF改名了，正式成为了一个安全传输协议的标准。所以，TLSv1.0应该是基本等价SSLv3.1。<br>那openssl到底应用在哪里呢？ 上面有提到，openssl其实包含了3部分内容，其中一部分就是SSL协议库，它几乎支持所有的加密算法和加密协议，当然就包括SSL协议咯。所以，很多应用软件都会使用它作为底层来实现TLS的功能，例如nginx, apache等。</p>\n<h5 id=\"openssl有哪些功能，命令\"><a href=\"#openssl有哪些功能，命令\" class=\"headerlink\" title=\"openssl有哪些功能，命令?\"></a>openssl有哪些功能，命令?</h5><p>因为加密技术分为对称加密和非对称加密，而openssl既然支持几乎所有的加密算法，所以openssl肯定也是支持对称加密和非对称加密的。</p>\n<h5 id=\"对称加密算法，加密解密使用同一个密钥\"><a href=\"#对称加密算法，加密解密使用同一个密钥\" class=\"headerlink\" title=\"对称加密算法，加密解密使用同一个密钥\"></a>对称加密算法，加密解密使用同一个密钥</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl enc </div><div class=\"line\">  -e  -des3  使用des3加密</div><div class=\"line\">  -d  -des3  使用des3解密</div><div class=\"line\">  -a  使用base64编码格式</div><div class=\"line\">  -salt 加入随机数</div><div class=\"line\">  -out  输出加密文件路径</div><div class=\"line\">  -in   指定加密文件路径</div><div class=\"line\"></div><div class=\"line\">如：openssl enc -e -des3 -a -salt -in johnny -out johnny.jiami</div></pre></td></tr></table></figure>\n<h5 id=\"非对称加密算法，公钥从私钥中提取出来，使用对方的公钥来加密数据，保证数据安全，用自己的私钥加密来证明数据的来源。\"><a href=\"#非对称加密算法，公钥从私钥中提取出来，使用对方的公钥来加密数据，保证数据安全，用自己的私钥加密来证明数据的来源。\" class=\"headerlink\" title=\"非对称加密算法，公钥从私钥中提取出来，使用对方的公钥来加密数据，保证数据安全，用自己的私钥加密来证明数据的来源。\"></a>非对称加密算法，公钥从私钥中提取出来，使用对方的公钥来加密数据，保证数据安全，用自己的私钥加密来证明数据的来源。</h5><ul>\n<li>生成私钥<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl genrsa [-out filename] [-passout arg] [-des] [-des3] [-idea] [-f4] [-3] [-rand file(s)] [-engine id] [numbits]</div><div class=\"line\"></div><div class=\"line\">例如，生成一个长度为4096的私钥</div><div class=\"line\">openssl genrsa -out johnny.key 4096</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>生成私钥的常用命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">-out filename 将生成的私钥保存到文件</div><div class=\"line\">-des -des3 -idea 指的是加密算法</div><div class=\"line\">numbits 指的是生成密钥的大写，默认2048</div></pre></td></tr></table></figure></p>\n<ul>\n<li>从公钥中提取私钥<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl rsa [-inform PEM|NET|DER] [-outform PEM|NET|DER] [-in filename] [-passin arg] [-out filename] [-passout arg] [-sgckey] [-des] [-des3][-idea] [-text] [-noout] [-modulus] [-check] [-pubin] [-pubout] [-engine id]</div><div class=\"line\"></div><div class=\"line\">例如，提取一个私钥</div><div class=\"line\">openssl rsa -in johnny.key -out johnny.pub -pubout</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>提取私钥的几个命令<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">-in 指定私钥文件</div><div class=\"line\">-out 提取的公钥写入文件</div><div class=\"line\">- pubout 提取公钥</div></pre></td></tr></table></figure></p>\n<h5 id=\"单向加密\"><a href=\"#单向加密\" class=\"headerlink\" title=\"单向加密\"></a>单向加密</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl dgst -md5 johnny.key</div><div class=\"line\"></div><div class=\"line\">几种家用的加密算法</div><div class=\"line\">-md5</div><div class=\"line\">-md4</div><div class=\"line\">-sha1</div><div class=\"line\">-sha</div><div class=\"line\">-dss1</div></pre></td></tr></table></figure>\n<h5 id=\"生成随机数\"><a href=\"#生成随机数\" class=\"headerlink\" title=\"生成随机数\"></a>生成随机数</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl rand -格式 num</div><div class=\"line\">openssl rand -base64 10</div><div class=\"line\"></div><div class=\"line\">-base64 以base64格式编码</div><div class=\"line\">-hex 16进制编码</div><div class=\"line\">-out 输出到文件</div><div class=\"line\">后面的num表示生成多少bytes长度的随机数</div></pre></td></tr></table></figure>\n<h5 id=\"生成密码\"><a href=\"#生成密码\" class=\"headerlink\" title=\"生成密码\"></a>生成密码</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div></pre></td><td class=\"code\"><pre><div class=\"line\">openssl passwd </div><div class=\"line\">生成密码(标准输入) echo -n &quot;123456&quot; | openssl passwd -crypt stdin</div><div class=\"line\">生成密码(文件输入) openssl passwd -1 -in johnny.mingwen</div><div class=\"line\"></div><div class=\"line\">-1 指定md5算法</div><div class=\"line\">-crypt Linux标准密码算法格式</div><div class=\"line\">-in 需要加密的输入文件</div><div class=\"line\">stdin 通过标准输入</div></pre></td></tr></table></figure>\n<h5 id=\"openssl还可以生成证书，等\"><a href=\"#openssl还可以生成证书，等\" class=\"headerlink\" title=\"openssl还可以生成证书，等\"></a>openssl还可以生成证书，等</h5>"},{"title":"Raft协议算法","_content":"","source":"_posts/raft.md","raw":"---\ntitle: Raft协议算法 \ntags:\n  - 算法\ncategories:\n  - 技术\n---\n","slug":"raft","published":1,"date":"2018-08-15T00:52:14.368Z","updated":"2018-08-15T00:52:14.368Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjysf06k4001gnzc7rq0t54bt","content":"","excerpt":"","more":""},{"title":"关于go里面的context","date":"2018-08-22T01:08:18.000Z","_content":"\n##### context的应用场景\n经常在go里面遇到context，所以这次特意查看了下context的相关资料，感觉学习就应该要如此，遇到不认识的不懂的，应该要花点时间去弄懂弄通，这样才能慢慢的把自己的知识漏洞给补好。\ngolang的Context包，是专门用来简化对于处理单个请求的多个goroutine之间与请求域的数据、取消信号、截止时间等相关操作，这些操作可能涉及多个API调用。\n<!--more-->\n比如有一个网络请求Request，每个Request都需要开启一个goroutine做一些事情，这些goroutine又可能会开启其他的goroutine。这样的话， 我们就可以通过Context，来跟踪这些goroutine，并且通过Context来控制他们的目的，这就是Go语言为我们提供的Context，中文可以称之为“上下文”。在go的http框架gin中就是大量的存在context。\n另外一个实际例子是，在Go服务器程序中，每个请求都会有一个goroutine去处理。然而，处理程序往往还需要创建额外的goroutine去访问后端资源，比如数据库、RPC服务等。由于这些goroutine都是在处理同一个请求，所以它们往往需要访问一些共享的资源，比如用户身份信息、认证token、请求截止时间等。而且如果请求超时或者被取消后，所有的goroutine都应该马上退出并且释放相关的资源。这种情况也需要用Context来为我们取消掉所有goroutine。联系到我们之前写的{% post_link go-goroutine %}, 好像我们又多了一种方式，使用context去控制goroutine。\n\n##### context接口\n```\ntype Context interface {\n\n    Deadline() (deadline time.Time, ok bool)\n\n    Done() <-chan struct{}\n\n    Err() error\n\n    Value(key interface{}) interface{}\n\n}\n```\n在context包里面，我们可以看到Context是一个接口，Context定义了4个方法:\n- Deadline方法是获取设置的截止时间的意思，第一个返回式是截止时间，到了这个时间点，Context会自动发起取消请求；第二个返回值ok==false时表示没有设置截止时间，如果需要取消的话，需要调用取消函数进行取消。\n- Done方法返回一个只读的chan，类型为struct{}，我们在goroutine中，如果该方法返回的chan可以读取，则意味着parent context已经发起了取消请求，我们通过Done方法收到这个信号后，就应该做清理操作，然后退出goroutine，释放资源。之后，Err 方法会返回一个错误，告知为什么 Context 被取消。\n- Err方法返回取消的错误原因，因为什么Context被取消。\n- Value方法获取该Context上绑定的值，是一个键值对，所以要通过一个Key才可以获取对应的值，这个值一般是线程安全的。\n\n##### Context源码解读\n在context包里，我们看到了针对Context的实现`emptyCtx`，对于`emptyCtx`，官方的解读是\n>  An emptyCtx is never canceled, has no values, and has no deadline. It is not\n struct{}, since vars of this type must have distinct addresses.\n\n另外，在context包里，官方给也给我们提供了2个生成`emptyCtx`的方法：\n```\nvar (\n    background = new(emptyCtx)\n    todo       = new(emptyCtx)\n)\n\n// Background returns a non-nil, empty Context. It is never canceled, has no\n// values, and has no deadline. It is typically used by the main function,\n// initialization, and tests, and as the top-level Context for incoming\n// requests.\nfunc Background() Context {\n    return background\n}\n\n// TODO returns a non-nil, empty Context. Code should use context.TODO when\n// it's unclear which Context to use or it is not yet available (because the\n// surrounding function has not yet been extended to accept a Context\n// parameter). TODO is recognized by static analysis tools that determine\n// whether Contexts are propagated correctly in a program.\nfunc TODO() Context {\n    return todo\n}\n\n```\n`Background()`和`TODO()`方法，他们都返回`emptyCtx`, 不能被取消，不能设置value，不能设置截止时间，所以说，它是作为一个根Context的存在，作为代表性的用于main函数，测试等\n\n那有了以上的根Context，我们发现，源码包里还给我们提供了4个With函数：\n```\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc)\n\nfunc WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc)\n\nfunc WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)\n\nfunc WithValue(parent Context, key, val interface{}) Context\n```\n这些With函数，不紧继承了根的Context，还基于根Context对它进行了拓展，实现了我们一棵树状的Context。这些函数给我们拓展了哪些功能：\n- WithCancel函数，传递一个父Context作为参数，返回子Context，以及一个取消函数用来取消Context。 \n- WithDeadline函数，和WithCancel差不多，它会多传递一个截止时间参数，意味着到了这个时间点，会自动取消Context，当然我们也可以不等到这个时候，可以提前通过取消函数进行取消。\n- WithTimeout和WithDeadline基本上一样，这个表示是超时自动取消，是多少时间后自动取消Context的意思。\n- WithValue函数和取消Context无关，它是为了生成一个绑定了一个键值对数据的Context，这个绑定的数据可以通过Context.Value方法访问到\n\n##### 参考文档\nhttps://golang.org/pkg/context/\n\n\n\n","source":"_posts/go-context.md","raw":"---\ntitle: 关于go里面的context \ndate: 2018-08-22 09:08:18\ntags:\n  - Go \n  - golang\ncategories:\n  - 技术\n---\n\n##### context的应用场景\n经常在go里面遇到context，所以这次特意查看了下context的相关资料，感觉学习就应该要如此，遇到不认识的不懂的，应该要花点时间去弄懂弄通，这样才能慢慢的把自己的知识漏洞给补好。\ngolang的Context包，是专门用来简化对于处理单个请求的多个goroutine之间与请求域的数据、取消信号、截止时间等相关操作，这些操作可能涉及多个API调用。\n<!--more-->\n比如有一个网络请求Request，每个Request都需要开启一个goroutine做一些事情，这些goroutine又可能会开启其他的goroutine。这样的话， 我们就可以通过Context，来跟踪这些goroutine，并且通过Context来控制他们的目的，这就是Go语言为我们提供的Context，中文可以称之为“上下文”。在go的http框架gin中就是大量的存在context。\n另外一个实际例子是，在Go服务器程序中，每个请求都会有一个goroutine去处理。然而，处理程序往往还需要创建额外的goroutine去访问后端资源，比如数据库、RPC服务等。由于这些goroutine都是在处理同一个请求，所以它们往往需要访问一些共享的资源，比如用户身份信息、认证token、请求截止时间等。而且如果请求超时或者被取消后，所有的goroutine都应该马上退出并且释放相关的资源。这种情况也需要用Context来为我们取消掉所有goroutine。联系到我们之前写的{% post_link go-goroutine %}, 好像我们又多了一种方式，使用context去控制goroutine。\n\n##### context接口\n```\ntype Context interface {\n\n    Deadline() (deadline time.Time, ok bool)\n\n    Done() <-chan struct{}\n\n    Err() error\n\n    Value(key interface{}) interface{}\n\n}\n```\n在context包里面，我们可以看到Context是一个接口，Context定义了4个方法:\n- Deadline方法是获取设置的截止时间的意思，第一个返回式是截止时间，到了这个时间点，Context会自动发起取消请求；第二个返回值ok==false时表示没有设置截止时间，如果需要取消的话，需要调用取消函数进行取消。\n- Done方法返回一个只读的chan，类型为struct{}，我们在goroutine中，如果该方法返回的chan可以读取，则意味着parent context已经发起了取消请求，我们通过Done方法收到这个信号后，就应该做清理操作，然后退出goroutine，释放资源。之后，Err 方法会返回一个错误，告知为什么 Context 被取消。\n- Err方法返回取消的错误原因，因为什么Context被取消。\n- Value方法获取该Context上绑定的值，是一个键值对，所以要通过一个Key才可以获取对应的值，这个值一般是线程安全的。\n\n##### Context源码解读\n在context包里，我们看到了针对Context的实现`emptyCtx`，对于`emptyCtx`，官方的解读是\n>  An emptyCtx is never canceled, has no values, and has no deadline. It is not\n struct{}, since vars of this type must have distinct addresses.\n\n另外，在context包里，官方给也给我们提供了2个生成`emptyCtx`的方法：\n```\nvar (\n    background = new(emptyCtx)\n    todo       = new(emptyCtx)\n)\n\n// Background returns a non-nil, empty Context. It is never canceled, has no\n// values, and has no deadline. It is typically used by the main function,\n// initialization, and tests, and as the top-level Context for incoming\n// requests.\nfunc Background() Context {\n    return background\n}\n\n// TODO returns a non-nil, empty Context. Code should use context.TODO when\n// it's unclear which Context to use or it is not yet available (because the\n// surrounding function has not yet been extended to accept a Context\n// parameter). TODO is recognized by static analysis tools that determine\n// whether Contexts are propagated correctly in a program.\nfunc TODO() Context {\n    return todo\n}\n\n```\n`Background()`和`TODO()`方法，他们都返回`emptyCtx`, 不能被取消，不能设置value，不能设置截止时间，所以说，它是作为一个根Context的存在，作为代表性的用于main函数，测试等\n\n那有了以上的根Context，我们发现，源码包里还给我们提供了4个With函数：\n```\nfunc WithCancel(parent Context) (ctx Context, cancel CancelFunc)\n\nfunc WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc)\n\nfunc WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)\n\nfunc WithValue(parent Context, key, val interface{}) Context\n```\n这些With函数，不紧继承了根的Context，还基于根Context对它进行了拓展，实现了我们一棵树状的Context。这些函数给我们拓展了哪些功能：\n- WithCancel函数，传递一个父Context作为参数，返回子Context，以及一个取消函数用来取消Context。 \n- WithDeadline函数，和WithCancel差不多，它会多传递一个截止时间参数，意味着到了这个时间点，会自动取消Context，当然我们也可以不等到这个时候，可以提前通过取消函数进行取消。\n- WithTimeout和WithDeadline基本上一样，这个表示是超时自动取消，是多少时间后自动取消Context的意思。\n- WithValue函数和取消Context无关，它是为了生成一个绑定了一个键值对数据的Context，这个绑定的数据可以通过Context.Value方法访问到\n\n##### 参考文档\nhttps://golang.org/pkg/context/\n\n\n\n","slug":"go-context","published":1,"updated":"2019-08-01T08:42:46.159Z","_id":"cjysf06k5001inzc7lypsgi1l","comments":1,"layout":"post","photos":[],"link":"","content":"<h5 id=\"context的应用场景\"><a href=\"#context的应用场景\" class=\"headerlink\" title=\"context的应用场景\"></a>context的应用场景</h5><p>经常在go里面遇到context，所以这次特意查看了下context的相关资料，感觉学习就应该要如此，遇到不认识的不懂的，应该要花点时间去弄懂弄通，这样才能慢慢的把自己的知识漏洞给补好。<br>golang的Context包，是专门用来简化对于处理单个请求的多个goroutine之间与请求域的数据、取消信号、截止时间等相关操作，这些操作可能涉及多个API调用。<br><a id=\"more\"></a><br>比如有一个网络请求Request，每个Request都需要开启一个goroutine做一些事情，这些goroutine又可能会开启其他的goroutine。这样的话， 我们就可以通过Context，来跟踪这些goroutine，并且通过Context来控制他们的目的，这就是Go语言为我们提供的Context，中文可以称之为“上下文”。在go的http框架gin中就是大量的存在context。<br>另外一个实际例子是，在Go服务器程序中，每个请求都会有一个goroutine去处理。然而，处理程序往往还需要创建额外的goroutine去访问后端资源，比如数据库、RPC服务等。由于这些goroutine都是在处理同一个请求，所以它们往往需要访问一些共享的资源，比如用户身份信息、认证token、请求截止时间等。而且如果请求超时或者被取消后，所有的goroutine都应该马上退出并且释放相关的资源。这种情况也需要用Context来为我们取消掉所有goroutine。联系到我们之前写的<a href=\"/2019/02/02/go-goroutine/\" title=\"golang控制goroutine\">golang控制goroutine</a>, 好像我们又多了一种方式，使用context去控制goroutine。</p>\n<h5 id=\"context接口\"><a href=\"#context接口\" class=\"headerlink\" title=\"context接口\"></a>context接口</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">type Context interface &#123;</div><div class=\"line\"></div><div class=\"line\">    Deadline() (deadline time.Time, ok bool)</div><div class=\"line\"></div><div class=\"line\">    Done() &lt;-chan struct&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    Err() error</div><div class=\"line\"></div><div class=\"line\">    Value(key interface&#123;&#125;) interface&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在context包里面，我们可以看到Context是一个接口，Context定义了4个方法:</p>\n<ul>\n<li>Deadline方法是获取设置的截止时间的意思，第一个返回式是截止时间，到了这个时间点，Context会自动发起取消请求；第二个返回值ok==false时表示没有设置截止时间，如果需要取消的话，需要调用取消函数进行取消。</li>\n<li>Done方法返回一个只读的chan，类型为struct{}，我们在goroutine中，如果该方法返回的chan可以读取，则意味着parent context已经发起了取消请求，我们通过Done方法收到这个信号后，就应该做清理操作，然后退出goroutine，释放资源。之后，Err 方法会返回一个错误，告知为什么 Context 被取消。</li>\n<li>Err方法返回取消的错误原因，因为什么Context被取消。</li>\n<li>Value方法获取该Context上绑定的值，是一个键值对，所以要通过一个Key才可以获取对应的值，这个值一般是线程安全的。</li>\n</ul>\n<h5 id=\"Context源码解读\"><a href=\"#Context源码解读\" class=\"headerlink\" title=\"Context源码解读\"></a>Context源码解读</h5><p>在context包里，我们看到了针对Context的实现<code>emptyCtx</code>，对于<code>emptyCtx</code>，官方的解读是</p>\n<blockquote>\n<p> An emptyCtx is never canceled, has no values, and has no deadline. It is not<br> struct{}, since vars of this type must have distinct addresses.</p>\n</blockquote>\n<p>另外，在context包里，官方给也给我们提供了2个生成<code>emptyCtx</code>的方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var (</div><div class=\"line\">    background = new(emptyCtx)</div><div class=\"line\">    todo       = new(emptyCtx)</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">// Background returns a non-nil, empty Context. It is never canceled, has no</div><div class=\"line\">// values, and has no deadline. It is typically used by the main function,</div><div class=\"line\">// initialization, and tests, and as the top-level Context for incoming</div><div class=\"line\">// requests.</div><div class=\"line\">func Background() Context &#123;</div><div class=\"line\">    return background</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// TODO returns a non-nil, empty Context. Code should use context.TODO when</div><div class=\"line\">// it&apos;s unclear which Context to use or it is not yet available (because the</div><div class=\"line\">// surrounding function has not yet been extended to accept a Context</div><div class=\"line\">// parameter). TODO is recognized by static analysis tools that determine</div><div class=\"line\">// whether Contexts are propagated correctly in a program.</div><div class=\"line\">func TODO() Context &#123;</div><div class=\"line\">    return todo</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>Background()</code>和<code>TODO()</code>方法，他们都返回<code>emptyCtx</code>, 不能被取消，不能设置value，不能设置截止时间，所以说，它是作为一个根Context的存在，作为代表性的用于main函数，测试等</p>\n<p>那有了以上的根Context，我们发现，源码包里还给我们提供了4个With函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">func WithCancel(parent Context) (ctx Context, cancel CancelFunc)</div><div class=\"line\"></div><div class=\"line\">func WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc)</div><div class=\"line\"></div><div class=\"line\">func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)</div><div class=\"line\"></div><div class=\"line\">func WithValue(parent Context, key, val interface&#123;&#125;) Context</div></pre></td></tr></table></figure></p>\n<p>这些With函数，不紧继承了根的Context，还基于根Context对它进行了拓展，实现了我们一棵树状的Context。这些函数给我们拓展了哪些功能：</p>\n<ul>\n<li>WithCancel函数，传递一个父Context作为参数，返回子Context，以及一个取消函数用来取消Context。 </li>\n<li>WithDeadline函数，和WithCancel差不多，它会多传递一个截止时间参数，意味着到了这个时间点，会自动取消Context，当然我们也可以不等到这个时候，可以提前通过取消函数进行取消。</li>\n<li>WithTimeout和WithDeadline基本上一样，这个表示是超时自动取消，是多少时间后自动取消Context的意思。</li>\n<li>WithValue函数和取消Context无关，它是为了生成一个绑定了一个键值对数据的Context，这个绑定的数据可以通过Context.Value方法访问到</li>\n</ul>\n<h5 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h5><p><a href=\"https://golang.org/pkg/context/\" target=\"_blank\" rel=\"external\">https://golang.org/pkg/context/</a></p>\n","excerpt":"<h5 id=\"context的应用场景\"><a href=\"#context的应用场景\" class=\"headerlink\" title=\"context的应用场景\"></a>context的应用场景</h5><p>经常在go里面遇到context，所以这次特意查看了下context的相关资料，感觉学习就应该要如此，遇到不认识的不懂的，应该要花点时间去弄懂弄通，这样才能慢慢的把自己的知识漏洞给补好。<br>golang的Context包，是专门用来简化对于处理单个请求的多个goroutine之间与请求域的数据、取消信号、截止时间等相关操作，这些操作可能涉及多个API调用。<br>","more":"<br>比如有一个网络请求Request，每个Request都需要开启一个goroutine做一些事情，这些goroutine又可能会开启其他的goroutine。这样的话， 我们就可以通过Context，来跟踪这些goroutine，并且通过Context来控制他们的目的，这就是Go语言为我们提供的Context，中文可以称之为“上下文”。在go的http框架gin中就是大量的存在context。<br>另外一个实际例子是，在Go服务器程序中，每个请求都会有一个goroutine去处理。然而，处理程序往往还需要创建额外的goroutine去访问后端资源，比如数据库、RPC服务等。由于这些goroutine都是在处理同一个请求，所以它们往往需要访问一些共享的资源，比如用户身份信息、认证token、请求截止时间等。而且如果请求超时或者被取消后，所有的goroutine都应该马上退出并且释放相关的资源。这种情况也需要用Context来为我们取消掉所有goroutine。联系到我们之前写的<a href=\"/2019/02/02/go-goroutine/\" title=\"golang控制goroutine\">golang控制goroutine</a>, 好像我们又多了一种方式，使用context去控制goroutine。</p>\n<h5 id=\"context接口\"><a href=\"#context接口\" class=\"headerlink\" title=\"context接口\"></a>context接口</h5><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div></pre></td><td class=\"code\"><pre><div class=\"line\">type Context interface &#123;</div><div class=\"line\"></div><div class=\"line\">    Deadline() (deadline time.Time, ok bool)</div><div class=\"line\"></div><div class=\"line\">    Done() &lt;-chan struct&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">    Err() error</div><div class=\"line\"></div><div class=\"line\">    Value(key interface&#123;&#125;) interface&#123;&#125;</div><div class=\"line\"></div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>在context包里面，我们可以看到Context是一个接口，Context定义了4个方法:</p>\n<ul>\n<li>Deadline方法是获取设置的截止时间的意思，第一个返回式是截止时间，到了这个时间点，Context会自动发起取消请求；第二个返回值ok==false时表示没有设置截止时间，如果需要取消的话，需要调用取消函数进行取消。</li>\n<li>Done方法返回一个只读的chan，类型为struct{}，我们在goroutine中，如果该方法返回的chan可以读取，则意味着parent context已经发起了取消请求，我们通过Done方法收到这个信号后，就应该做清理操作，然后退出goroutine，释放资源。之后，Err 方法会返回一个错误，告知为什么 Context 被取消。</li>\n<li>Err方法返回取消的错误原因，因为什么Context被取消。</li>\n<li>Value方法获取该Context上绑定的值，是一个键值对，所以要通过一个Key才可以获取对应的值，这个值一般是线程安全的。</li>\n</ul>\n<h5 id=\"Context源码解读\"><a href=\"#Context源码解读\" class=\"headerlink\" title=\"Context源码解读\"></a>Context源码解读</h5><p>在context包里，我们看到了针对Context的实现<code>emptyCtx</code>，对于<code>emptyCtx</code>，官方的解读是</p>\n<blockquote>\n<p> An emptyCtx is never canceled, has no values, and has no deadline. It is not<br> struct{}, since vars of this type must have distinct addresses.</p>\n</blockquote>\n<p>另外，在context包里，官方给也给我们提供了2个生成<code>emptyCtx</code>的方法：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div></pre></td><td class=\"code\"><pre><div class=\"line\">var (</div><div class=\"line\">    background = new(emptyCtx)</div><div class=\"line\">    todo       = new(emptyCtx)</div><div class=\"line\">)</div><div class=\"line\"></div><div class=\"line\">// Background returns a non-nil, empty Context. It is never canceled, has no</div><div class=\"line\">// values, and has no deadline. It is typically used by the main function,</div><div class=\"line\">// initialization, and tests, and as the top-level Context for incoming</div><div class=\"line\">// requests.</div><div class=\"line\">func Background() Context &#123;</div><div class=\"line\">    return background</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\">// TODO returns a non-nil, empty Context. Code should use context.TODO when</div><div class=\"line\">// it&apos;s unclear which Context to use or it is not yet available (because the</div><div class=\"line\">// surrounding function has not yet been extended to accept a Context</div><div class=\"line\">// parameter). TODO is recognized by static analysis tools that determine</div><div class=\"line\">// whether Contexts are propagated correctly in a program.</div><div class=\"line\">func TODO() Context &#123;</div><div class=\"line\">    return todo</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p><code>Background()</code>和<code>TODO()</code>方法，他们都返回<code>emptyCtx</code>, 不能被取消，不能设置value，不能设置截止时间，所以说，它是作为一个根Context的存在，作为代表性的用于main函数，测试等</p>\n<p>那有了以上的根Context，我们发现，源码包里还给我们提供了4个With函数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">func WithCancel(parent Context) (ctx Context, cancel CancelFunc)</div><div class=\"line\"></div><div class=\"line\">func WithDeadline(parent Context, deadline time.Time) (Context, CancelFunc)</div><div class=\"line\"></div><div class=\"line\">func WithTimeout(parent Context, timeout time.Duration) (Context, CancelFunc)</div><div class=\"line\"></div><div class=\"line\">func WithValue(parent Context, key, val interface&#123;&#125;) Context</div></pre></td></tr></table></figure></p>\n<p>这些With函数，不紧继承了根的Context，还基于根Context对它进行了拓展，实现了我们一棵树状的Context。这些函数给我们拓展了哪些功能：</p>\n<ul>\n<li>WithCancel函数，传递一个父Context作为参数，返回子Context，以及一个取消函数用来取消Context。 </li>\n<li>WithDeadline函数，和WithCancel差不多，它会多传递一个截止时间参数，意味着到了这个时间点，会自动取消Context，当然我们也可以不等到这个时候，可以提前通过取消函数进行取消。</li>\n<li>WithTimeout和WithDeadline基本上一样，这个表示是超时自动取消，是多少时间后自动取消Context的意思。</li>\n<li>WithValue函数和取消Context无关，它是为了生成一个绑定了一个键值对数据的Context，这个绑定的数据可以通过Context.Value方法访问到</li>\n</ul>\n<h5 id=\"参考文档\"><a href=\"#参考文档\" class=\"headerlink\" title=\"参考文档\"></a>参考文档</h5><p><a href=\"https://golang.org/pkg/context/\">https://golang.org/pkg/context/</a></p>"},{"_content":"soa 是...\n\nsoa里面还有一个xlsoa.core.certificate, 这个服务主要用来实现服务的鉴权，授权管理等\n\nconsul 用于服务注册以及发现,即我们所有的服务都注册到consul上去\n\nenvoy 是一个使用C++编写的高可用的proxy  可以用于流量控制，熔断等\n\neds是我们在使用的时候针对envoy某些接口的封装\n","source":"_posts/soa-consul-envoy.md","raw":"soa 是...\n\nsoa里面还有一个xlsoa.core.certificate, 这个服务主要用来实现服务的鉴权，授权管理等\n\nconsul 用于服务注册以及发现,即我们所有的服务都注册到consul上去\n\nenvoy 是一个使用C++编写的高可用的proxy  可以用于流量控制，熔断等\n\neds是我们在使用的时候针对envoy某些接口的封装\n","slug":"soa-consul-envoy","published":1,"date":"2018-08-15T02:04:18.619Z","updated":"2018-08-15T02:04:18.619Z","title":"","comments":1,"layout":"post","photos":[],"link":"","_id":"cjysf06k7001knzc76jw5poyw","content":"<p>soa 是…</p>\n<p>soa里面还有一个xlsoa.core.certificate, 这个服务主要用来实现服务的鉴权，授权管理等</p>\n<p>consul 用于服务注册以及发现,即我们所有的服务都注册到consul上去</p>\n<p>envoy 是一个使用C++编写的高可用的proxy  可以用于流量控制，熔断等</p>\n<p>eds是我们在使用的时候针对envoy某些接口的封装</p>\n","excerpt":"","more":"<p>soa 是…</p>\n<p>soa里面还有一个xlsoa.core.certificate, 这个服务主要用来实现服务的鉴权，授权管理等</p>\n<p>consul 用于服务注册以及发现,即我们所有的服务都注册到consul上去</p>\n<p>envoy 是一个使用C++编写的高可用的proxy  可以用于流量控制，熔断等</p>\n<p>eds是我们在使用的时候针对envoy某些接口的封装</p>\n"},{"title":"nsq的简介","date":"2018-11-02T16:00:00.000Z","_content":"\n##### nsq是什么？ \n","source":"_posts/nsq.md","raw":"---\ntitle: nsq的简介\ndate: 2018-11-03\ntags:\n  - Go \n  - golang\n  - nsq \ncategories:\n  - 技术\n---\n\n##### nsq是什么？ \n","slug":"nsq","published":1,"updated":"2018-11-03T04:13:32.521Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjysf06kb001onzc7hr7d5mxz","content":"<h5 id=\"nsq是什么？\"><a href=\"#nsq是什么？\" class=\"headerlink\" title=\"nsq是什么？\"></a>nsq是什么？</h5>","excerpt":"","more":"<h5 id=\"nsq是什么？\"><a href=\"#nsq是什么？\" class=\"headerlink\" title=\"nsq是什么？\"></a>nsq是什么？</h5>"}],"PostAsset":[{"_id":"source/_posts/go-pprof/web.svg","slug":"web.svg","post":"cjysf06da000anzc7pqldk6px","modified":0,"renderable":0},{"_id":"source/_posts/go-pprof/cpu.png","slug":"cpu.png","post":"cjysf06da000anzc7pqldk6px","modified":0,"renderable":0},{"_id":"source/_posts/go-pprof/web.jpeg","slug":"web.jpeg","post":"cjysf06da000anzc7pqldk6px","modified":0,"renderable":0}],"PostCategory":[{"post_id":"cjysf06d40006nzc7udwx54gz","category_id":"cjysf06cu0003nzc7ap5fg03i","_id":"cjysf06dc000bnzc7okdn1rrp"},{"post_id":"cjysf06ck0001nzc7bgvlm62v","category_id":"cjysf06cu0003nzc7ap5fg03i","_id":"cjysf06dg000fnzc7ecyuolhr"},{"post_id":"cjysf06d60007nzc7ydrej0zj","category_id":"cjysf06cu0003nzc7ap5fg03i","_id":"cjysf06dl000inzc7c8enb23c"},{"post_id":"cjysf06da000anzc7pqldk6px","category_id":"cjysf06cu0003nzc7ap5fg03i","_id":"cjysf06dm000lnzc7h1fb1da8"},{"post_id":"cjysf06cs0002nzc78bkfed74","category_id":"cjysf06cu0003nzc7ap5fg03i","_id":"cjysf06du000mnzc794x8he2t"},{"post_id":"cjysf06dd000cnzc7xr9xl6jz","category_id":"cjysf06cu0003nzc7ap5fg03i","_id":"cjysf06dv000nnzc7309et7ux"},{"post_id":"cjysf06cy0005nzc7bhqlz9id","category_id":"cjysf06cu0003nzc7ap5fg03i","_id":"cjysf06dw000qnzc7k7ywwbk0"},{"post_id":"cjysf06jv001cnzc7wkby96ou","category_id":"cjysf06cu0003nzc7ap5fg03i","_id":"cjysf06k5001hnzc7hwjxpfel"},{"post_id":"cjysf06jz001enzc7w3b84upp","category_id":"cjysf06cu0003nzc7ap5fg03i","_id":"cjysf06k7001jnzc7v5h9mym2"},{"post_id":"cjysf06k4001gnzc7rq0t54bt","category_id":"cjysf06cu0003nzc7ap5fg03i","_id":"cjysf06ka001nnzc7mtfci6ad"},{"post_id":"cjysf06k5001inzc7lypsgi1l","category_id":"cjysf06cu0003nzc7ap5fg03i","_id":"cjysf06ke001qnzc74pijoiqn"},{"post_id":"cjysf06kb001onzc7hr7d5mxz","category_id":"cjysf06cu0003nzc7ap5fg03i","_id":"cjysf06kf001tnzc7hvnb2duy"}],"PostTag":[{"post_id":"cjysf06ck0001nzc7bgvlm62v","tag_id":"cjysf06cx0004nzc7ayvnorfg","_id":"cjysf06dk000hnzc7xpk14h40"},{"post_id":"cjysf06ck0001nzc7bgvlm62v","tag_id":"cjysf06d90009nzc7swfppltk","_id":"cjysf06dl000jnzc7v39wvtv5"},{"post_id":"cjysf06cs0002nzc78bkfed74","tag_id":"cjysf06df000enzc762rl49hd","_id":"cjysf06dw000pnzc7s2d1yz46"},{"post_id":"cjysf06cs0002nzc78bkfed74","tag_id":"cjysf06dm000knzc77050v82n","_id":"cjysf06dw000rnzc7j51yqo0y"},{"post_id":"cjysf06cy0005nzc7bhqlz9id","tag_id":"cjysf06d90009nzc7swfppltk","_id":"cjysf06dx000vnzc7p3ss60h2"},{"post_id":"cjysf06cy0005nzc7bhqlz9id","tag_id":"cjysf06dw000snzc7djbltedo","_id":"cjysf06dx000wnzc7hd9q4qg5"},{"post_id":"cjysf06cy0005nzc7bhqlz9id","tag_id":"cjysf06dx000tnzc7p7rfmchz","_id":"cjysf06e0000ynzc73gfrmkc7"},{"post_id":"cjysf06d40006nzc7udwx54gz","tag_id":"cjysf06d90009nzc7swfppltk","_id":"cjysf06e00011nzc74io31ee6"},{"post_id":"cjysf06d40006nzc7udwx54gz","tag_id":"cjysf06dx000xnzc7npgmndgs","_id":"cjysf06e00012nzc708jpqlw3"},{"post_id":"cjysf06d40006nzc7udwx54gz","tag_id":"cjysf06e0000znzc7gf9jzvd8","_id":"cjysf06e20014nzc7035dl2j6"},{"post_id":"cjysf06d60007nzc7ydrej0zj","tag_id":"cjysf06d90009nzc7swfppltk","_id":"cjysf06e30016nzc7lnv637l3"},{"post_id":"cjysf06d60007nzc7ydrej0zj","tag_id":"cjysf06dx000xnzc7npgmndgs","_id":"cjysf06e30017nzc7l2zh82fn"},{"post_id":"cjysf06da000anzc7pqldk6px","tag_id":"cjysf06df000enzc762rl49hd","_id":"cjysf06e40019nzc73gsrfs93"},{"post_id":"cjysf06da000anzc7pqldk6px","tag_id":"cjysf06d90009nzc7swfppltk","_id":"cjysf06e4001anzc7g4bgywcn"},{"post_id":"cjysf06dd000cnzc7xr9xl6jz","tag_id":"cjysf06e30018nzc78arcfou7","_id":"cjysf06e4001bnzc7kn5r0ogp"},{"post_id":"cjysf06k5001inzc7lypsgi1l","tag_id":"cjysf06d90009nzc7swfppltk","_id":"cjysf06ka001mnzc7gnwrijov"},{"post_id":"cjysf06k5001inzc7lypsgi1l","tag_id":"cjysf06dx000xnzc7npgmndgs","_id":"cjysf06kd001pnzc7csc06ez7"},{"post_id":"cjysf06jv001cnzc7wkby96ou","tag_id":"cjysf06k3001fnzc7n0zabcsp","_id":"cjysf06kf001snzc7k7h75sfo"},{"post_id":"cjysf06jv001cnzc7wkby96ou","tag_id":"cjysf06k9001lnzc70b7iu6sk","_id":"cjysf06kf001unzc73ngdgd8h"},{"post_id":"cjysf06jz001enzc7w3b84upp","tag_id":"cjysf06ke001rnzc77o8dknz0","_id":"cjysf06kg001wnzc73yxgd9ea"},{"post_id":"cjysf06k4001gnzc7rq0t54bt","tag_id":"cjysf06kg001vnzc7i5y77ncq","_id":"cjysf06kh001ynzc7xfvbigfu"},{"post_id":"cjysf06kb001onzc7hr7d5mxz","tag_id":"cjysf06d90009nzc7swfppltk","_id":"cjysf06ki001znzc7t3vfqsmh"},{"post_id":"cjysf06kb001onzc7hr7d5mxz","tag_id":"cjysf06dx000xnzc7npgmndgs","_id":"cjysf06kj0020nzc72y6g8s7q"},{"post_id":"cjysf06kb001onzc7hr7d5mxz","tag_id":"cjysf06kh001xnzc7e2xq2qba","_id":"cjysf06kj0021nzc7v6wt3ztn"}],"Tag":[{"name":"Elasticsearch","_id":"cjysf06cx0004nzc7ayvnorfg"},{"name":"Go","_id":"cjysf06d90009nzc7swfppltk"},{"name":"Docker","_id":"cjysf06df000enzc762rl49hd"},{"name":"Lnmp","_id":"cjysf06dm000knzc77050v82n"},{"name":"Fannel","_id":"cjysf06dw000snzc7djbltedo"},{"name":"Kubernetes","_id":"cjysf06dx000tnzc7p7rfmchz"},{"name":"golang","_id":"cjysf06dx000xnzc7npgmndgs"},{"name":"etcd","_id":"cjysf06e0000znzc7gf9jzvd8"},{"name":"nginx","_id":"cjysf06e30018nzc78arcfou7"},{"name":"hexo","_id":"cjysf06k3001fnzc7n0zabcsp"},{"name":"Travis-CI","_id":"cjysf06k9001lnzc70b7iu6sk"},{"name":"Linux","_id":"cjysf06ke001rnzc77o8dknz0"},{"name":"算法","_id":"cjysf06kg001vnzc7i5y77ncq"},{"name":"nsq","_id":"cjysf06kh001xnzc7e2xq2qba"}]}}